#include "pch.h"
#include "GeneralPanel.h"

GeneralPanel::GeneralPanel(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size,
	long style, const wxString& title)
	: wxPanel(parent, id, pos, size, style, title)
{
	wxBoxSizer* generalSettingsSizer;
	generalSettingsSizer = new wxBoxSizer(wxVERTICAL);

	wxBoxSizer* partyStrengthSizer;
	partyStrengthSizer = new wxBoxSizer(wxHORIZONTAL);

	m_staticText10 = new wxStaticText(this, wxID_ANY, _("Average party strength (in levels)"), wxDefaultPosition, wxDefaultSize, 0);
	m_staticText10->Wrap(-1);
	partyStrengthSizer->Add(m_staticText10, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5);

	partyStrengthSlider = new wxSlider(this, wxID_ANY, 25, 1, 200, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL | wxSL_LABELS);
	partyStrengthSizer->Add(partyStrengthSlider, 1, wxLEFT | wxRIGHT | wxTOP, 5);


	generalSettingsSizer->Add(partyStrengthSizer, 0, wxEXPAND, 5);

	m_staticline3 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL);
	generalSettingsSizer->Add(m_staticline3, 0, wxBOTTOM | wxEXPAND | wxLEFT | wxRIGHT, 5);

	miscSkillsOnePlayerCheckbox = new wxCheckBox(this, wxID_ANY, _("Grant each misc skill for at most one player"), wxDefaultPosition, wxDefaultSize, 0);
	miscSkillsOnePlayerCheckbox->SetValue(true);
	miscSkillsOnePlayerCheckbox->SetToolTip(_("This option is intended to prevent wasting skill points. Affects merchant, alchemy, disarm trap, identify item, repair item, perception, stealing"));

	generalSettingsSizer->Add(miscSkillsOnePlayerCheckbox, 0, wxALL, 5);

	m_staticline1 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL);
	generalSettingsSizer->Add(m_staticline1, 0, wxALL | wxEXPAND, 5);

	generateArtifactsCheckbox = new wxCheckBox(this, wxID_ANY, _("Allow artifact generation"), wxDefaultPosition, wxDefaultSize, 0);
	generalSettingsSizer->Add(generateArtifactsCheckbox, 0, wxALL, 5);

	clearFoundArtifactsCheckbox = new wxCheckBox(this, wxID_ANY, _("Clear found artifacts list"), wxDefaultPosition, wxDefaultSize, 0);
	clearFoundArtifactsCheckbox->SetToolTip(_("You'll be able to find every artifact again"));

	generalSettingsSizer->Add(clearFoundArtifactsCheckbox, 0, wxALL, 5);

	markArtifactsAsFoundCheckbox = new wxCheckBox(this, wxID_ANY, _("Mark generated artifacts as found"), wxDefaultPosition, wxDefaultSize, 0);
	markArtifactsAsFoundCheckbox->SetValue(true);
	markArtifactsAsFoundCheckbox->SetToolTip(_("Artifacts generated by this tool will be added to \"found artifacts\" list (see above)"));

	generalSettingsSizer->Add(markArtifactsAsFoundCheckbox, 0, wxALL, 5);

	m_staticline2 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLI_HORIZONTAL);
	generalSettingsSizer->Add(m_staticline2, 0, wxEXPAND | wxALL, 5);

	wxBoxSizer* generateGoldSizer;
	generateGoldSizer = new wxBoxSizer(wxHORIZONTAL);

	generateGoldCheckbox = new wxCheckBox(this, wxID_ANY, _("Generate gold"), wxDefaultPosition, wxDefaultSize, 0);
	generateGoldSizer->Add(generateGoldCheckbox, 0, wxALL | wxEXPAND, 5);

	m_staticText1 = new wxStaticText(this, wxID_ANY, _("Min:"), wxDefaultPosition, wxDefaultSize, 0);
	m_staticText1->Wrap(-1);
	generateGoldSizer->Add(m_staticText1, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5);

	goldMin = new wxTextCtrl(this, wxID_ANY, _("5000"), wxDefaultPosition, wxDefaultSize, wxTE_NOHIDESEL);
	generateGoldSizer->Add(goldMin, 0, wxALL, 5);

	m_staticText2 = new wxStaticText(this, wxID_ANY, _("Max:"), wxDefaultPosition, wxDefaultSize, 0);
	m_staticText2->Wrap(-1);
	generateGoldSizer->Add(m_staticText2, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5);

	goldMax = new wxTextCtrl(this, wxID_ANY, _("10000"), wxDefaultPosition, wxDefaultSize, wxTE_NOHIDESEL);
	generateGoldSizer->Add(goldMax, 0, wxALL, 5);

	clearBankGoldCheckbox = new wxCheckBox(this, wxID_ANY, _("Clear bank gold"), wxDefaultPosition, wxDefaultSize, 0);
	generateGoldSizer->Add(clearBankGoldCheckbox, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5);

	removeFineCheckbox = new wxCheckBox(this, wxID_ANY, _("Remove fine (MM7+)"), wxDefaultPosition, wxDefaultSize, 0);
	generateGoldSizer->Add(removeFineCheckbox, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5);


	generalSettingsSizer->Add(generateGoldSizer, 0, wxEXPAND, 5);

	wxBoxSizer* generateFoodSizer;
	generateFoodSizer = new wxBoxSizer(wxHORIZONTAL);

	generateFoodCheckbox = new wxCheckBox(this, wxID_ANY, _("Generate food"), wxDefaultPosition, wxDefaultSize, 0);
	generateFoodSizer->Add(generateFoodCheckbox, 0, wxALL | wxEXPAND, 5);

	m_staticText11 = new wxStaticText(this, wxID_ANY, _("Min:"), wxDefaultPosition, wxDefaultSize, 0);
	m_staticText11->Wrap(-1);
	generateFoodSizer->Add(m_staticText11, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5);

	foodMin = new wxTextCtrl(this, wxID_ANY, _("10"), wxDefaultPosition, wxDefaultSize, wxTE_NOHIDESEL);
	generateFoodSizer->Add(foodMin, 0, wxALL, 5);

	m_staticText21 = new wxStaticText(this, wxID_ANY, _("Max:"), wxDefaultPosition, wxDefaultSize, 0);
	m_staticText21->Wrap(-1);
	generateFoodSizer->Add(m_staticText21, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5);

	foodMax = new wxTextCtrl(this, wxID_ANY, _("20"), wxDefaultPosition, wxDefaultSize, wxTE_NOHIDESEL);
	generateFoodSizer->Add(foodMax, 0, wxALL, 5);


	generalSettingsSizer->Add(generateFoodSizer, 0, wxEXPAND, 5);

	wxBoxSizer* partyConditionSizer;
	partyConditionSizer = new wxBoxSizer(wxHORIZONTAL);

	clearConditionsCheckbox = new wxCheckBox(this, wxID_ANY, _("Clear conditions"), wxDefaultPosition, wxDefaultSize, 0);
	clearConditionsCheckbox->SetValue(true);
	partyConditionSizer->Add(clearConditionsCheckbox, 0, wxALL, 5);

	fullHpSpCheckbox = new wxCheckBox(this, wxID_ANY, _("Full HP/SP"), wxDefaultPosition, wxDefaultSize, 0);
	fullHpSpCheckbox->SetValue(true);
	partyConditionSizer->Add(fullHpSpCheckbox, 0, wxALL, 5);

	dispelPartyCheckbox = new wxCheckBox(this, wxID_ANY, _("Remove active buffs and statistics bonuses"), wxDefaultPosition, wxDefaultSize, 0);
	dispelPartyCheckbox->SetValue(true);
	partyConditionSizer->Add(dispelPartyCheckbox, 0, wxALL, 5);


	generalSettingsSizer->Add(partyConditionSizer, 0, wxEXPAND, 5);

	wxString interfaceColorRadioBoxChoices[] = { _("Current"), _("Neutral"), _("Light"), _("Dark") };
	int interfaceColorRadioBoxNChoices = sizeof(interfaceColorRadioBoxChoices) / sizeof(wxString);
	interfaceColorRadioBox = new wxRadioBox(this, wxID_ANY, _("Interface color (MM7)"), wxDefaultPosition, wxDefaultSize, interfaceColorRadioBoxNChoices, interfaceColorRadioBoxChoices, 1, wxRA_SPECIFY_ROWS);
	interfaceColorRadioBox->SetSelection(0);
	generalSettingsSizer->Add(interfaceColorRadioBox, 0, wxALL, 5);


	this->SetSizer(generalSettingsSizer);
	this->Layout();
	generalSettingsSizer->Fit(this);
}