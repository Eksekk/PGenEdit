#include "pch.h"
#include "main.h"
#include "Enum_const.h"
#include "Utility.h"
#include "PlayerStructAccessor.h"

extern const int INVALID_ID;
extern int MMVER;

int MAX_PLAYERS = 0;

bool IS_ELEMENTAL_MOD = false;
bool IS_MERGE = false;

int CURRENT_PARTY_SIZE = 0;

Mastery MAX_MASTERY = Mastery::GM; // 3 in mm6, 4 in mm7+
SkillCombineMode SKILL_COMBINE_MODE = BIT_PER_MASTERY;
int SKILL_BITS = 6;
std::array<int, 5> MASTERY_BITS = {-1, -1, 6, 7, 8};

const double MINIMUM_AFFINITY = 0.0;
const double MAXIMUM_AFFINITY = 1.0;

int NUM_CLASSES = 30;

const std::unordered_map<std::string, int> plTypeEnumStringToId = { {"caster", PLAYER_CASTER}, {"melee", PLAYER_MELEE}, {"defensive", PLAYER_DEFENSIVE}
	, {"utility", PLAYER_UTILITY}, {"ranged", PLAYER_RANGED} };

const std::unordered_map<std::string, int> skillTypeEnumStringToId = { {"melee", SKILL_MELEE}, {"ranged", SKILL_RANGED }, {"defensive", SKILL_DEFENSIVE},
	{"magic", SKILL_MAGIC}, {"utility", SKILL_UTILITY} };

const std::unordered_map<std::string, int> skillSpecialEnumStringToId = { {"blaster", SKSPC_BLASTER}, {"meditation", SKSPC_MEDITATION}, {"elemental", SKSPC_ELEMENTAL},
	{"self", SKSPC_SELF}, {"magicExclusive", SKSPC_MAGIC_EXCLUSIVE}, {"shield", SKSPC_SHIELD}, {"raceSkill", SKSPC_RACE_SKILL} };
const std::unordered_map<std::string, int> alignmentStringToId = { {"neutral", ALIGNMENT_NEUTRAL}, {"light", ALIGNMENT_LIGHT}, {"dark", ALIGNMENT_DARK}, {"any", ALIGNMENT_ANY} };


const std::unordered_map<int, std::string> plTypeEnumIdToString = invertMap(plTypeEnumStringToId);
const std::unordered_map<int, std::string> skillTypeEnumIdToString = invertMap(skillTypeEnumStringToId);
const std::unordered_map<int, std::string> skillSpecialEnumIdToString = invertMap(skillSpecialEnumStringToId);
const std::unordered_map<int, std::string> alignmentIdToString = invertMap(alignmentStringToId);

// GAME ENUMS

int nextFreeCustomId()
{
	static int id = 100;
	return id++;
}

int
STAT_MIGHT = INVALID_ID,
STAT_INTELLECT = INVALID_ID,
STAT_PERSONALITY = INVALID_ID,
STAT_ENDURANCE = INVALID_ID,
STAT_ACCURACY = INVALID_ID,
STAT_SPEED = INVALID_ID,
STAT_LUCK = INVALID_ID,
STAT_HIT_POINTS = INVALID_ID,
STAT_SPELL_POINTS = INVALID_ID,
STAT_ARMOR_CLASS = INVALID_ID,
STAT_FIRE_RESISTANCE = INVALID_ID,
STAT_ELEC_RESISTANCE = INVALID_ID,
STAT_COLD_RESISTANCE = INVALID_ID,
STAT_POISON_RESISTANCE = INVALID_ID,
STAT_LEVEL = INVALID_ID,
STAT_MELEE_ATTACK = INVALID_ID,
STAT_MELEE_DAMAGE_BASE = INVALID_ID,
STAT_MELEE_DAMAGE_MIN = INVALID_ID,
STAT_MELEE_DAMAGE_MAX = INVALID_ID,
STAT_RANGED_ATTACK = INVALID_ID,
STAT_RANGED_DAMAGE_BASE = INVALID_ID,
STAT_RANGED_DAMAGE_MIN = INVALID_ID,
STAT_RANGED_DAMAGE_MAX = INVALID_ID,
STAT_MAGIC_RESISTANCE = INVALID_ID,
STAT_AIR_RESISTANCE = INVALID_ID,
STAT_WATER_RESISTANCE = INVALID_ID,
STAT_EARTH_RESISTANCE = INVALID_ID,
STAT_MIND_RESISTANCE = INVALID_ID,
STAT_BODY_RESISTANCE = INVALID_ID,
STAT_ALCHEMY = INVALID_ID,
STAT_STEALING = INVALID_ID,
STAT_DISARM_TRAPS = INVALID_ID,
STAT_IDENTIFY_ITEM = INVALID_ID,
STAT_IDENTIFY_MONSTER = INVALID_ID,
STAT_ARMSMASTER = INVALID_ID,
STAT_DODGING = INVALID_ID,
STAT_UNARMED = INVALID_ID,
STAT_SPIRIT_RESISTANCE = INVALID_ID,
STAT_FIRE_MAGIC = INVALID_ID,
STAT_AIR_MAGIC = INVALID_ID,
STAT_WATER_MAGIC = INVALID_ID,
STAT_EARTH_MAGIC = INVALID_ID,
STAT_SPIRIT_MAGIC = INVALID_ID,
STAT_MIND_MAGIC = INVALID_ID,
STAT_BODY_MAGIC = INVALID_ID,
STAT_LIGHT_MAGIC = INVALID_ID,
STAT_DARK_MAGIC = INVALID_ID,
STAT_MEDITATION = INVALID_ID,
STAT_BOW = INVALID_ID,
STAT_SHIELD = INVALID_ID,
STAT_LEARNING = INVALID_ID,
STAT_DARK_ELF = INVALID_ID,
STAT_VAMPIRE = INVALID_ID,
STAT_DRAGON = INVALID_ID;

int
STAT_LIGHT_RESISTANCE = INVALID_ID,
STAT_DARK_RESISTANCE = INVALID_ID,
STAT_RANGED_ATTACK_BONUS = INVALID_ID,
STAT_RANGED_DAMAGE_BONUS = INVALID_ID,
STAT_MELEE_ATTACK_BONUS = INVALID_ID,
STAT_MELEE_DAMAGE_BONUS = INVALID_ID,
STAT_HIT_POINTS_BONUS = INVALID_ID,
STAT_SPELL_POINTS_BONUS = INVALID_ID,
STAT_AGE = INVALID_ID;

void makeEnumStats_6()
{
	STAT_MIGHT = 0;
	STAT_INTELLECT = 1;
	STAT_PERSONALITY = 2;
	STAT_ENDURANCE = 3;
	STAT_ACCURACY = 4;
	STAT_SPEED = 5;
	STAT_LUCK = 6;
	STAT_HIT_POINTS = 7;
	STAT_SPELL_POINTS = 8;
	STAT_ARMOR_CLASS = 9;
	STAT_FIRE_RESISTANCE = 10;
	STAT_ELEC_RESISTANCE = 11;
	STAT_COLD_RESISTANCE = 12;
	STAT_POISON_RESISTANCE = 13;
	STAT_LEVEL = 14;
	STAT_MELEE_ATTACK = 15;
	STAT_MELEE_DAMAGE_BASE = 16;
	STAT_MELEE_DAMAGE_MIN = 17;
	STAT_MELEE_DAMAGE_MAX = 18;
	STAT_RANGED_ATTACK = 19;
	STAT_RANGED_DAMAGE_BASE = 20;
	STAT_RANGED_DAMAGE_MIN = 21;
	STAT_RANGED_DAMAGE_MAX = 22;
	STAT_MAGIC_RESISTANCE = 23;

	STAT_RANGED_ATTACK_BONUS = nextFreeCustomId();
	STAT_RANGED_DAMAGE_BONUS = nextFreeCustomId();
	STAT_MELEE_ATTACK_BONUS = nextFreeCustomId();
	STAT_MELEE_DAMAGE_BONUS = nextFreeCustomId();
	STAT_HIT_POINTS_BONUS = nextFreeCustomId();
	STAT_SPELL_POINTS_BONUS = nextFreeCustomId();
	STAT_AGE = nextFreeCustomId();
}

void makeEnumStats_7()
{
	STAT_MIGHT = 0;
	STAT_INTELLECT = 1;
	STAT_PERSONALITY = 2;
	STAT_ENDURANCE = 3;
	STAT_ACCURACY = 4;
	STAT_SPEED = 5;
	STAT_LUCK = 6;
	STAT_HIT_POINTS = 7;
	STAT_SPELL_POINTS = 8;
	STAT_ARMOR_CLASS = 9;
	STAT_FIRE_RESISTANCE = 10;
	STAT_AIR_RESISTANCE = 11;
	STAT_WATER_RESISTANCE = 12;
	STAT_EARTH_RESISTANCE = 13;
	STAT_MIND_RESISTANCE = 14;
	STAT_BODY_RESISTANCE = 15;
	STAT_ALCHEMY = 16;
	STAT_STEALING = 17;
	STAT_DISARM_TRAPS = 18;
	STAT_IDENTIFY_ITEM = 19;
	STAT_IDENTIFY_MONSTER = 20;
	STAT_ARMSMASTER = 21;
	STAT_DODGING = 22;
	STAT_UNARMED = 23;
	STAT_LEVEL = 24;
	STAT_MELEE_ATTACK = 25;
	STAT_MELEE_DAMAGE_BASE = 26;
	STAT_MELEE_DAMAGE_MIN = 27;
	STAT_MELEE_DAMAGE_MAX = 28;
	STAT_RANGED_ATTACK = 29;
	STAT_RANGED_DAMAGE_BASE = 30;
	STAT_RANGED_DAMAGE_MIN = 31;
	STAT_RANGED_DAMAGE_MAX = 32;
	STAT_SPIRIT_RESISTANCE = 33;
	STAT_FIRE_MAGIC = 34;
	STAT_AIR_MAGIC = 35;
	STAT_WATER_MAGIC = 36;
	STAT_EARTH_MAGIC = 37;
	STAT_SPIRIT_MAGIC = 38;
	STAT_MIND_MAGIC = 39;
	STAT_BODY_MAGIC = 40;
	STAT_LIGHT_MAGIC = 41;
	STAT_DARK_MAGIC = 42;
	STAT_MEDITATION = 43;
	STAT_BOW = 44;
	STAT_SHIELD = 45;
	STAT_LEARNING = 46;

	STAT_LIGHT_RESISTANCE = nextFreeCustomId();
	STAT_DARK_RESISTANCE = nextFreeCustomId();
	STAT_RANGED_ATTACK_BONUS = nextFreeCustomId();
	STAT_RANGED_DAMAGE_BONUS = nextFreeCustomId();
	STAT_MELEE_ATTACK_BONUS = nextFreeCustomId();
	STAT_MELEE_DAMAGE_BONUS = nextFreeCustomId();
	STAT_HIT_POINTS_BONUS = nextFreeCustomId();
	STAT_SPELL_POINTS_BONUS = nextFreeCustomId();
	STAT_AGE = nextFreeCustomId();
}

void makeEnumStats_8()
{
	STAT_MIGHT = 0;
	STAT_INTELLECT = 1;
	STAT_PERSONALITY = 2;
	STAT_ENDURANCE = 3;
	STAT_ACCURACY = 4;
	STAT_SPEED = 5;
	STAT_LUCK = 6;
	STAT_HIT_POINTS = 7;
	STAT_SPELL_POINTS = 8;
	STAT_ARMOR_CLASS = 9;
	STAT_FIRE_RESISTANCE = 10;
	STAT_AIR_RESISTANCE = 11;
	STAT_WATER_RESISTANCE = 12;
	STAT_EARTH_RESISTANCE = 13;
	STAT_MIND_RESISTANCE = 14;
	STAT_BODY_RESISTANCE = 15;
	STAT_ALCHEMY = 16;
	STAT_STEALING = 17;
	STAT_DISARM_TRAPS = 18;
	STAT_IDENTIFY_ITEM = 19;
	STAT_IDENTIFY_MONSTER = 20;
	STAT_ARMSMASTER = 21;
	STAT_DODGING = 22;
	STAT_UNARMED = 23;
	STAT_LEVEL = 24;
	STAT_MELEE_ATTACK = 25;
	STAT_MELEE_DAMAGE_BASE = 26;
	STAT_MELEE_DAMAGE_MIN = 27;
	STAT_MELEE_DAMAGE_MAX = 28;
	STAT_RANGED_ATTACK = 29;
	STAT_RANGED_DAMAGE_BASE = 30;
	STAT_RANGED_DAMAGE_MIN = 31;
	STAT_RANGED_DAMAGE_MAX = 32;
	STAT_SPIRIT_RESISTANCE = 33;
	STAT_FIRE_MAGIC = 34;
	STAT_AIR_MAGIC = 35;
	STAT_WATER_MAGIC = 36;
	STAT_EARTH_MAGIC = 37;
	STAT_SPIRIT_MAGIC = 38;
	STAT_MIND_MAGIC = 39;
	STAT_BODY_MAGIC = 40;
	STAT_LIGHT_MAGIC = 41;
	STAT_DARK_MAGIC = 42;
	STAT_MEDITATION = 43;
	STAT_BOW = 44;
	STAT_SHIELD = 45;
	STAT_LEARNING = 46;
	STAT_DARK_ELF = 47;
	STAT_VAMPIRE = 48;
	STAT_DRAGON = 49;

	STAT_LIGHT_RESISTANCE = nextFreeCustomId();
	STAT_DARK_RESISTANCE = nextFreeCustomId();
	STAT_AGE = nextFreeCustomId();
}

std::vector<int> STATS_PRIMARY;
std::vector<int> STATS_RESISTANCES;
std::vector<int> STATS_MELEE_RANGED;
std::vector<int> STATS_SKILLS;
std::vector<int> STATS_MM67_BONUSES;
std::vector<int> STATS_OTHER;
std::vector<int> STATS_ALL;

void makeEnums()
{
	if (MMVER == 6)
	{
		makeEnumStats_6();
		makeEnumDamage_6();
		STATS_RESISTANCES.insert(STATS_RESISTANCES.end(), {STAT_FIRE_RESISTANCE, STAT_COLD_RESISTANCE, STAT_ELEC_RESISTANCE, STAT_POISON_RESISTANCE, STAT_MAGIC_RESISTANCE});
	}
	else if (MMVER == 7)
	{
		makeEnumStats_7();
		makeEnumDamage_7();
	}
	else if (MMVER == 8)
	{
		makeEnumStats_8();
		makeEnumDamage_8();
		STATS_SKILLS.insert(STATS_SKILLS.end(), { STAT_DRAGON, STAT_DARK_ELF, STAT_VAMPIRE });
	}
	else
	{
		wxLogFatalError("Unknown MM version (%d)!", MMVER);
	}

	// STATS
	{
		if (MMVER < 8)
		{
			STATS_MM67_BONUSES.insert(STATS_MM67_BONUSES.begin(), { STAT_MELEE_ATTACK_BONUS, STAT_MELEE_DAMAGE_BONUS, STAT_RANGED_ATTACK_BONUS,
				STAT_RANGED_DAMAGE_BONUS, STAT_HIT_POINTS_BONUS, STAT_SPELL_POINTS_BONUS });
		}
		if (MMVER > 6)
		{
			STATS_RESISTANCES.insert(STATS_RESISTANCES.end(), { STAT_FIRE_RESISTANCE, STAT_WATER_RESISTANCE, STAT_AIR_RESISTANCE, STAT_EARTH_RESISTANCE, STAT_BODY_RESISTANCE,
				STAT_SPIRIT_RESISTANCE, STAT_MIND_RESISTANCE, STAT_LIGHT_RESISTANCE, STAT_DARK_RESISTANCE });

			STATS_SKILLS.insert(STATS_SKILLS.end(), { STAT_FIRE_MAGIC, STAT_AIR_MAGIC, STAT_EARTH_MAGIC, STAT_WATER_MAGIC, STAT_BODY_MAGIC, STAT_SPIRIT_MAGIC,
				STAT_MIND_MAGIC, STAT_LIGHT_MAGIC, STAT_DARK_MAGIC, STAT_BOW, STAT_MEDITATION, STAT_SHIELD, STAT_LEARNING, STAT_ARMSMASTER, STAT_ALCHEMY, STAT_DODGING,
				STAT_UNARMED, STAT_IDENTIFY_ITEM, STAT_IDENTIFY_MONSTER, STAT_STEALING });
		}
		STATS_PRIMARY.insert(STATS_PRIMARY.end(), { STAT_MIGHT, STAT_INTELLECT, STAT_PERSONALITY, STAT_ENDURANCE, STAT_ACCURACY, STAT_SPEED, STAT_LUCK });

		STATS_MELEE_RANGED.insert(STATS_MELEE_RANGED.end(), { STAT_MELEE_ATTACK, STAT_MELEE_DAMAGE_BASE, STAT_MELEE_DAMAGE_MAX, STAT_MELEE_DAMAGE_MIN,
			STAT_RANGED_ATTACK, STAT_RANGED_DAMAGE_BASE, STAT_RANGED_DAMAGE_MAX, STAT_RANGED_DAMAGE_MIN });

		STATS_OTHER.insert(STATS_OTHER.end(), { STAT_HIT_POINTS, STAT_SPELL_POINTS, STAT_ARMOR_CLASS, STAT_LEVEL, STAT_AGE });

		// all
		STATS_ALL.insert(STATS_ALL.end(), STATS_PRIMARY.begin(), STATS_PRIMARY.end());
		STATS_ALL.insert(STATS_ALL.end(), STATS_MELEE_RANGED.begin(), STATS_MELEE_RANGED.end());
		STATS_ALL.insert(STATS_ALL.end(), STATS_RESISTANCES.begin(), STATS_RESISTANCES.end());
		STATS_ALL.insert(STATS_ALL.end(), STATS_SKILLS.begin(), STATS_SKILLS.end());
		STATS_ALL.insert(STATS_ALL.end(), STATS_OTHER.begin(), STATS_OTHER.end());
		STATS_ALL.insert(STATS_ALL.end(), STATS_MM67_BONUSES.begin(), STATS_MM67_BONUSES.end());
	}
	
	// DAMAGE
	{
		if (MMVER == 6)
		{
			DAMAGE_ALL_TYPES.insert(DAMAGE_ALL_TYPES.end(), { DMG_FIRE, DMG_ELEC, DMG_COLD, DMG_POISON, DMG_MAGIC, DMG_ENERGY, DMG_PHYS });
		}
		else if (MMVER == 7)
		{
			DAMAGE_ALL_TYPES.insert(DAMAGE_ALL_TYPES.end(), { DMG_FIRE, DMG_WATER, DMG_AIR, DMG_EARTH, DMG_BODY, DMG_MIND, DMG_SPIRIT, DMG_LIGHT, DMG_DARK, DMG_ENERGY, DMG_MAGIC, DMG_PHYS });
		}
		else
		{
			DAMAGE_ALL_TYPES.insert(DAMAGE_ALL_TYPES.end(), { DMG_FIRE, DMG_WATER, DMG_AIR, DMG_EARTH, DMG_BODY, DMG_MIND, DMG_SPIRIT, DMG_LIGHT, DMG_DARK, DMG_ENERGY, DMG_MAGIC, DMG_PHYS, DMG_DRAGON });
		}
	}
}

int
DMG_PHYS = INVALID_ID,
DMG_MAGIC = INVALID_ID,
DMG_FIRE = INVALID_ID,
DMG_ELEC = INVALID_ID,
DMG_COLD = INVALID_ID,
DMG_POISON = INVALID_ID,
DMG_ENERGY = INVALID_ID,
DMG_AIR = INVALID_ID,
DMG_WATER = INVALID_ID,
DMG_EARTH = INVALID_ID,
DMG_SPIRIT = INVALID_ID,
DMG_MIND = INVALID_ID,
DMG_BODY = INVALID_ID,
DMG_LIGHT = INVALID_ID,
DMG_DARK = INVALID_ID,
DMG_DRAGON = INVALID_ID;

void makeEnumDamage_6()
{
	DMG_PHYS = 0;
	DMG_MAGIC = 1;
	DMG_FIRE = 2;
	DMG_ELEC = 3;
	DMG_COLD = 4;
	DMG_POISON = 5;
	DMG_ENERGY = 6;
}

void makeEnumDamage_7()
{
	DMG_FIRE = 0;
	DMG_AIR = 1;
	DMG_WATER = 2;
	DMG_EARTH = 3;
	DMG_PHYS = 4;
	DMG_MAGIC = 5;
	DMG_SPIRIT = 6;
	DMG_MIND = 7;
	DMG_BODY = 8;
	DMG_LIGHT = 9;
	DMG_DARK = 10;
	DMG_ENERGY = 12;
}

void makeEnumDamage_8()
{
	DMG_FIRE = 0;
	DMG_AIR = 1;
	DMG_WATER = 2;
	DMG_EARTH = 3;
	DMG_PHYS = 4;
	DMG_MAGIC = 5;
	DMG_SPIRIT = 6;
	DMG_MIND = 7;
	DMG_BODY = 8;
	DMG_LIGHT = 9;
	DMG_DARK = 10;
	DMG_ENERGY = 12;
	DMG_DRAGON = 50;
}

std::vector<int> DAMAGE_ALL_TYPES;

inline void checkStatValidity(int stat)
{
	wxASSERT_MSG(existsInVector(STATS_ALL, stat), wxString::Format("Stat %d doesn't exist in game version %d", stat, MMVER));
}
inline void checkDamageTypeValidity(int dmgType)
{
	wxASSERT_MSG(existsInVector(DAMAGE_ALL_TYPES, dmgType), wxString::Format("Damage type %d doesn't exist in game version %d", dmgType, MMVER));
}