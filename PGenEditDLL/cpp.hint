// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define DLL_EXPORT __declspec(dllexport)
#define DLL_EXPORT __declspec(dllimport)
// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define _EXPORT_STD
// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define _NODISCARD [[nodiscard]]
#define GEN_DEF_1(name) GEN_DEF_2(name, name)
#define GEN_DEF_2(name, codeName) using Any##name##Variant = std::variant<mm6::codeName*, mm7::codeName*, mm8::codeName*>;\
template<typename T>\
concept Any##name##Struct = SAME(T, mm6::codeName) || SAME(T, mm7::codeName) || SAME(T, mm8::codeName)

// "macro overloading" on number of arguments
#define GET_MACRO(_1, _2, name, ...) name
#define GEN_DEF(...) GET_MACRO(__VA_ARGS__, GEN_DEF_2, GEN_DEF_1)(__VA_ARGS__)#define RTTR_REG
#define RTTR_REGISTRATION static void rttr_auto_register_reflection_function_(); namespace {\
    struct rttr__auto__register__ {\
        rttr__auto__register__() {\
            rttr_auto_register_reflection_function_();\
        }\
    };\
} static const rttr__auto__register__ auto_register__473; static void rttr_auto_register_reflection_function_()#define RTTR_REGISTRATION_FRIEND
#define RTTR_REGISTRATION_FRIEND friend void ::rttr_auto_register_reflection_function_(); template<typename Ctor_Type, typename Policy, typename Accessor, typename Arg_Indexer> friend struct rttr::detail::constructor_invoker;
#define RTTR_ENABLE(__VA_ARGS__) public:RTTR_BEGIN_DISABLE_OVERRIDE_WARNING virtual RTTR_INLINE ::rttr::type get_type() const { return ::rttr::detail::get_type_from_instance(this); } virtual RTTR_INLINE void* get_ptr() { return reinterpret_cast<void*>(this); } virtual RTTR_INLINE ::rttr::detail::derived_info get_derived_info() { return {reinterpret_cast<void*>(this), ::rttr::detail::get_type_from_instance(this)}; } using base_class_list = TYPE_LIST(__VA_ARGS__); RTTR_END_DISABLE_OVERRIDE_WARNING private:
#define LUA_TTABLE
#define wxFAIL_MSG(msg) wxFAIL_COND_MSG("Assert failure", msg)
#define wxFAIL_MSG(msg)
#define wxASSERT_MSG(cond, msg) wxASSERT_MSG_AT(cond, msg, __FILE__, __LINE__, __WXFUNCTION__)
#define wxASSERT_MSG(cond, msg)
#define MMDEF(_) _(index) _(newindex) _(gc) _(mode) _(eq) _(len) _(lt) _(le) _(concat) _(call) _(add) _(sub) _(mul) _(div) _(mod) _(pow) _(unm) _(metatable) _(tostring) MMDEF_FFI(_) MMDEF_PAIRS(_)
#define LJ_NORET __attribute__((noreturn))
#define LJ_NORET __declspec(noreturn)
#define LJ_NORET
#define LJ_NOINLINE __attribute__((noinline))
#define LJ_NOINLINE __declspec(noinline)
#define LJ_ALIGN(n) __attribute__((aligned(n)))
#define LJ_ALIGN(n) __declspec(align(n))
#define LJ_ENDIAN_LOHI(lo, hi)
#define MMENUM(name)
#define LUA_TCDATA (LAST_TT+2)
#define LJ_DATA
#define LJ_AINLINE inline __attribute__((always_inline))
#define LJ_AINLINE
#define LJ_FUNC
