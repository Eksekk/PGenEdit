#include "pch.h"
#include "constDefinitionsAutoGenerated.h"
#include "Enum_const.h"
#include "Utility.h"

namespace consts

{

	// Stats //

	int64_t 
		STAT_MIGHT = INVALID_ID,
		STAT_INTELLECT = INVALID_ID,
		STAT_PERSONALITY = INVALID_ID,
		STAT_ENDURANCE = INVALID_ID,
		STAT_ACCURACY = INVALID_ID,
		STAT_SPEED = INVALID_ID,
		STAT_LUCK = INVALID_ID,
		STAT_HP = INVALID_ID,
		STAT_SPELL_POINTS = INVALID_ID,
		STAT_ARMOR_CLASS = INVALID_ID,
		STAT_FIRE_RESISTANCE = INVALID_ID,
		STAT_ELEC_RESISTANCE = INVALID_ID,
		STAT_COLD_RESISTANCE = INVALID_ID,
		STAT_POISON_RESISTANCE = INVALID_ID,
		STAT_LEVEL = INVALID_ID,
		STAT_MELEE_ATTACK = INVALID_ID,
		STAT_MELEE_DAMAGE_BASE = INVALID_ID,
		STAT_MELEE_DAMAGE_MIN = INVALID_ID,
		STAT_MELEE_DAMAGE_MAX = INVALID_ID,
		STAT_RANGED_ATTACK = INVALID_ID,
		STAT_RANGED_DAMAGE_BASE = INVALID_ID,
		STAT_RANGED_DAMAGE_MIN = INVALID_ID,
		STAT_RANGED_DAMAGE_MAX = INVALID_ID,
		STAT_MAGIC_RESISTANCE = INVALID_ID,
		STAT_HIT_POINTS = INVALID_ID,
		STAT_AIR_RESISTANCE = INVALID_ID,
		STAT_WATER_RESISTANCE = INVALID_ID,
		STAT_EARTH_RESISTANCE = INVALID_ID,
		STAT_MIND_RESISTANCE = INVALID_ID,
		STAT_BODY_RESISTANCE = INVALID_ID,
		STAT_ALCHEMY = INVALID_ID,
		STAT_STEALING = INVALID_ID,
		STAT_DISARM_TRAPS = INVALID_ID,
		STAT_IDENTIFY_ITEM = INVALID_ID,
		STAT_IDENTIFY_MONSTER = INVALID_ID,
		STAT_ARMSMASTER = INVALID_ID,
		STAT_DODGING = INVALID_ID,
		STAT_UNARMED = INVALID_ID,
		STAT_SPIRIT_RESISTANCE = INVALID_ID,
		STAT_FIRE_MAGIC = INVALID_ID,
		STAT_AIR_MAGIC = INVALID_ID,
		STAT_WATER_MAGIC = INVALID_ID,
		STAT_EARTH_MAGIC = INVALID_ID,
		STAT_SPIRIT_MAGIC = INVALID_ID,
		STAT_MIND_MAGIC = INVALID_ID,
		STAT_BODY_MAGIC = INVALID_ID,
		STAT_LIGHT_MAGIC = INVALID_ID,
		STAT_DARK_MAGIC = INVALID_ID,
		STAT_MEDITATION = INVALID_ID,
		STAT_BOW = INVALID_ID,
		STAT_SHIELD = INVALID_ID,
		STAT_LEARNING = INVALID_ID,
		STAT_DARK_ELF = INVALID_ID,
		STAT_VAMPIRE = INVALID_ID,
		STAT_DRAGON = INVALID_ID;

	std::vector<int64_t> STATS_ALL;
	std::map<int64_t, std::string> ENUM_TO_STRING_STATS;
	std::map<std::string, int64_t> STRING_TO_ENUM_STATS;

	void makeEnumStats_6()
	{
		STAT_MIGHT = 0;
		STAT_INTELLECT = 1;
		STAT_PERSONALITY = 2;
		STAT_ENDURANCE = 3;
		STAT_ACCURACY = 4;
		STAT_SPEED = 5;
		STAT_LUCK = 6;
		STAT_HP = 7;
		STAT_SPELL_POINTS = 8;
		STAT_ARMOR_CLASS = 9;
		STAT_FIRE_RESISTANCE = 10;
		STAT_ELEC_RESISTANCE = 11;
		STAT_COLD_RESISTANCE = 12;
		STAT_POISON_RESISTANCE = 13;
		STAT_LEVEL = 14;
		STAT_MELEE_ATTACK = 15;
		STAT_MELEE_DAMAGE_BASE = 16;
		STAT_MELEE_DAMAGE_MIN = 17;
		STAT_MELEE_DAMAGE_MAX = 18;
		STAT_RANGED_ATTACK = 19;
		STAT_RANGED_DAMAGE_BASE = 20;
		STAT_RANGED_DAMAGE_MIN = 21;
		STAT_RANGED_DAMAGE_MAX = 22;
		STAT_MAGIC_RESISTANCE = 23;

		STATS_ALL = { STAT_MIGHT, STAT_INTELLECT, STAT_PERSONALITY, STAT_ENDURANCE, STAT_ACCURACY, STAT_SPEED, STAT_LUCK, STAT_HP, STAT_SPELL_POINTS, STAT_ARMOR_CLASS, STAT_FIRE_RESISTANCE, STAT_ELEC_RESISTANCE, STAT_COLD_RESISTANCE, STAT_POISON_RESISTANCE, STAT_LEVEL, STAT_MELEE_ATTACK, STAT_MELEE_DAMAGE_BASE, STAT_MELEE_DAMAGE_MIN, STAT_MELEE_DAMAGE_MAX, STAT_RANGED_ATTACK, STAT_RANGED_DAMAGE_BASE, STAT_RANGED_DAMAGE_MIN, STAT_RANGED_DAMAGE_MAX, STAT_MAGIC_RESISTANCE };

		ENUM_TO_STRING_STATS = { {STAT_MIGHT, "Might"}, {STAT_INTELLECT, "Intellect"}, {STAT_PERSONALITY, "Personality"}, {STAT_ENDURANCE, "Endurance"}, {STAT_ACCURACY, "Accuracy"}, {STAT_SPEED, "Speed"}, {STAT_LUCK, "Luck"}, {STAT_HP, "HP"}, {STAT_SPELL_POINTS, "Spell points"}, {STAT_ARMOR_CLASS, "Armor class"}, {STAT_FIRE_RESISTANCE, "Fire resistance"}, {STAT_ELEC_RESISTANCE, "Elec resistance"}, {STAT_COLD_RESISTANCE, "Cold resistance"}, {STAT_POISON_RESISTANCE, "Poison resistance"}, {STAT_LEVEL, "Level"}, {STAT_MELEE_ATTACK, "Melee attack"}, {STAT_MELEE_DAMAGE_BASE, "Melee damage base"}, {STAT_MELEE_DAMAGE_MIN, "Melee damage min"}, {STAT_MELEE_DAMAGE_MAX, "Melee damage max"}, {STAT_RANGED_ATTACK, "Ranged attack"}, {STAT_RANGED_DAMAGE_BASE, "Ranged damage base"}, {STAT_RANGED_DAMAGE_MIN, "Ranged damage min"}, {STAT_RANGED_DAMAGE_MAX, "Ranged damage max"}, {STAT_MAGIC_RESISTANCE, "Magic resistance"} };

		STRING_TO_ENUM_STATS = invertMap(ENUM_TO_STRING_STATS);

		detail::callbackStatsInitialize();

	}

	void makeEnumStats_7()
	{
		STAT_MIGHT = 0;
		STAT_INTELLECT = 1;
		STAT_PERSONALITY = 2;
		STAT_ENDURANCE = 3;
		STAT_ACCURACY = 4;
		STAT_SPEED = 5;
		STAT_LUCK = 6;
		STAT_HIT_POINTS = 7;
		STAT_SPELL_POINTS = 8;
		STAT_ARMOR_CLASS = 9;
		STAT_FIRE_RESISTANCE = 10;
		STAT_AIR_RESISTANCE = 11;
		STAT_WATER_RESISTANCE = 12;
		STAT_EARTH_RESISTANCE = 13;
		STAT_MIND_RESISTANCE = 14;
		STAT_BODY_RESISTANCE = 15;
		STAT_ALCHEMY = 16;
		STAT_STEALING = 17;
		STAT_DISARM_TRAPS = 18;
		STAT_IDENTIFY_ITEM = 19;
		STAT_IDENTIFY_MONSTER = 20;
		STAT_ARMSMASTER = 21;
		STAT_DODGING = 22;
		STAT_UNARMED = 23;
		STAT_LEVEL = 24;
		STAT_MELEE_ATTACK = 25;
		STAT_MELEE_DAMAGE_BASE = 26;
		STAT_MELEE_DAMAGE_MIN = 27;
		STAT_MELEE_DAMAGE_MAX = 28;
		STAT_RANGED_ATTACK = 29;
		STAT_RANGED_DAMAGE_BASE = 30;
		STAT_RANGED_DAMAGE_MIN = 31;
		STAT_RANGED_DAMAGE_MAX = 32;
		STAT_SPIRIT_RESISTANCE = 33;
		STAT_FIRE_MAGIC = 34;
		STAT_AIR_MAGIC = 35;
		STAT_WATER_MAGIC = 36;
		STAT_EARTH_MAGIC = 37;
		STAT_SPIRIT_MAGIC = 38;
		STAT_MIND_MAGIC = 39;
		STAT_BODY_MAGIC = 40;
		STAT_LIGHT_MAGIC = 41;
		STAT_DARK_MAGIC = 42;
		STAT_MEDITATION = 43;
		STAT_BOW = 44;
		STAT_SHIELD = 45;
		STAT_LEARNING = 46;

		STATS_ALL = { STAT_MIGHT, STAT_INTELLECT, STAT_PERSONALITY, STAT_ENDURANCE, STAT_ACCURACY, STAT_SPEED, STAT_LUCK, STAT_HIT_POINTS, STAT_SPELL_POINTS, STAT_ARMOR_CLASS, STAT_FIRE_RESISTANCE, STAT_AIR_RESISTANCE, STAT_WATER_RESISTANCE, STAT_EARTH_RESISTANCE, STAT_MIND_RESISTANCE, STAT_BODY_RESISTANCE, STAT_ALCHEMY, STAT_STEALING, STAT_DISARM_TRAPS, STAT_IDENTIFY_ITEM, STAT_IDENTIFY_MONSTER, STAT_ARMSMASTER, STAT_DODGING, STAT_UNARMED, STAT_LEVEL, STAT_MELEE_ATTACK, STAT_MELEE_DAMAGE_BASE, STAT_MELEE_DAMAGE_MIN, STAT_MELEE_DAMAGE_MAX, STAT_RANGED_ATTACK, STAT_RANGED_DAMAGE_BASE, STAT_RANGED_DAMAGE_MIN, STAT_RANGED_DAMAGE_MAX, STAT_SPIRIT_RESISTANCE, STAT_FIRE_MAGIC, STAT_AIR_MAGIC, STAT_WATER_MAGIC, STAT_EARTH_MAGIC, STAT_SPIRIT_MAGIC, STAT_MIND_MAGIC, STAT_BODY_MAGIC, STAT_LIGHT_MAGIC, STAT_DARK_MAGIC, STAT_MEDITATION, STAT_BOW, STAT_SHIELD, STAT_LEARNING };

		ENUM_TO_STRING_STATS = { {STAT_MIGHT, "Might"}, {STAT_INTELLECT, "Intellect"}, {STAT_PERSONALITY, "Personality"}, {STAT_ENDURANCE, "Endurance"}, {STAT_ACCURACY, "Accuracy"}, {STAT_SPEED, "Speed"}, {STAT_LUCK, "Luck"}, {STAT_HIT_POINTS, "Hit points"}, {STAT_SPELL_POINTS, "Spell points"}, {STAT_ARMOR_CLASS, "Armor class"}, {STAT_FIRE_RESISTANCE, "Fire resistance"}, {STAT_AIR_RESISTANCE, "Air resistance"}, {STAT_WATER_RESISTANCE, "Water resistance"}, {STAT_EARTH_RESISTANCE, "Earth resistance"}, {STAT_MIND_RESISTANCE, "Mind resistance"}, {STAT_BODY_RESISTANCE, "Body resistance"}, {STAT_ALCHEMY, "Alchemy"}, {STAT_STEALING, "Stealing"}, {STAT_DISARM_TRAPS, "Disarm traps"}, {STAT_IDENTIFY_ITEM, "Identify item"}, {STAT_IDENTIFY_MONSTER, "Identify monster"}, {STAT_ARMSMASTER, "Armsmaster"}, {STAT_DODGING, "Dodging"}, {STAT_UNARMED, "Unarmed"}, {STAT_LEVEL, "Level"}, {STAT_MELEE_ATTACK, "Melee attack"}, {STAT_MELEE_DAMAGE_BASE, "Melee damage base"}, {STAT_MELEE_DAMAGE_MIN, "Melee damage min"}, {STAT_MELEE_DAMAGE_MAX, "Melee damage max"}, {STAT_RANGED_ATTACK, "Ranged attack"}, {STAT_RANGED_DAMAGE_BASE, "Ranged damage base"}, {STAT_RANGED_DAMAGE_MIN, "Ranged damage min"}, {STAT_RANGED_DAMAGE_MAX, "Ranged damage max"}, {STAT_SPIRIT_RESISTANCE, "Spirit resistance"}, {STAT_FIRE_MAGIC, "Fire magic"}, {STAT_AIR_MAGIC, "Air magic"}, {STAT_WATER_MAGIC, "Water magic"}, {STAT_EARTH_MAGIC, "Earth magic"}, {STAT_SPIRIT_MAGIC, "Spirit magic"}, {STAT_MIND_MAGIC, "Mind magic"}, {STAT_BODY_MAGIC, "Body magic"}, {STAT_LIGHT_MAGIC, "Light magic"}, {STAT_DARK_MAGIC, "Dark magic"}, {STAT_MEDITATION, "Meditation"}, {STAT_BOW, "Bow"}, {STAT_SHIELD, "Shield"}, {STAT_LEARNING, "Learning"} };

		STRING_TO_ENUM_STATS = invertMap(ENUM_TO_STRING_STATS);

		detail::callbackStatsInitialize();

	}

	void makeEnumStats_8()
	{
		STAT_MIGHT = 0;
		STAT_INTELLECT = 1;
		STAT_PERSONALITY = 2;
		STAT_ENDURANCE = 3;
		STAT_ACCURACY = 4;
		STAT_SPEED = 5;
		STAT_LUCK = 6;
		STAT_HIT_POINTS = 7;
		STAT_SPELL_POINTS = 8;
		STAT_ARMOR_CLASS = 9;
		STAT_FIRE_RESISTANCE = 10;
		STAT_AIR_RESISTANCE = 11;
		STAT_WATER_RESISTANCE = 12;
		STAT_EARTH_RESISTANCE = 13;
		STAT_MIND_RESISTANCE = 14;
		STAT_BODY_RESISTANCE = 15;
		STAT_ALCHEMY = 16;
		STAT_STEALING = 17;
		STAT_DISARM_TRAPS = 18;
		STAT_IDENTIFY_ITEM = 19;
		STAT_IDENTIFY_MONSTER = 20;
		STAT_ARMSMASTER = 21;
		STAT_DODGING = 22;
		STAT_UNARMED = 23;
		STAT_LEVEL = 24;
		STAT_MELEE_ATTACK = 25;
		STAT_MELEE_DAMAGE_BASE = 26;
		STAT_MELEE_DAMAGE_MIN = 27;
		STAT_MELEE_DAMAGE_MAX = 28;
		STAT_RANGED_ATTACK = 29;
		STAT_RANGED_DAMAGE_BASE = 30;
		STAT_RANGED_DAMAGE_MIN = 31;
		STAT_RANGED_DAMAGE_MAX = 32;
		STAT_SPIRIT_RESISTANCE = 33;
		STAT_FIRE_MAGIC = 34;
		STAT_AIR_MAGIC = 35;
		STAT_WATER_MAGIC = 36;
		STAT_EARTH_MAGIC = 37;
		STAT_SPIRIT_MAGIC = 38;
		STAT_MIND_MAGIC = 39;
		STAT_BODY_MAGIC = 40;
		STAT_LIGHT_MAGIC = 41;
		STAT_DARK_MAGIC = 42;
		STAT_MEDITATION = 43;
		STAT_BOW = 44;
		STAT_SHIELD = 45;
		STAT_LEARNING = 46;
		STAT_DARK_ELF = 47;
		STAT_VAMPIRE = 48;
		STAT_DRAGON = 49;

		STATS_ALL = { STAT_MIGHT, STAT_INTELLECT, STAT_PERSONALITY, STAT_ENDURANCE, STAT_ACCURACY, STAT_SPEED, STAT_LUCK, STAT_HIT_POINTS, STAT_SPELL_POINTS, STAT_ARMOR_CLASS, STAT_FIRE_RESISTANCE, STAT_AIR_RESISTANCE, STAT_WATER_RESISTANCE, STAT_EARTH_RESISTANCE, STAT_MIND_RESISTANCE, STAT_BODY_RESISTANCE, STAT_ALCHEMY, STAT_STEALING, STAT_DISARM_TRAPS, STAT_IDENTIFY_ITEM, STAT_IDENTIFY_MONSTER, STAT_ARMSMASTER, STAT_DODGING, STAT_UNARMED, STAT_LEVEL, STAT_MELEE_ATTACK, STAT_MELEE_DAMAGE_BASE, STAT_MELEE_DAMAGE_MIN, STAT_MELEE_DAMAGE_MAX, STAT_RANGED_ATTACK, STAT_RANGED_DAMAGE_BASE, STAT_RANGED_DAMAGE_MIN, STAT_RANGED_DAMAGE_MAX, STAT_SPIRIT_RESISTANCE, STAT_FIRE_MAGIC, STAT_AIR_MAGIC, STAT_WATER_MAGIC, STAT_EARTH_MAGIC, STAT_SPIRIT_MAGIC, STAT_MIND_MAGIC, STAT_BODY_MAGIC, STAT_LIGHT_MAGIC, STAT_DARK_MAGIC, STAT_MEDITATION, STAT_BOW, STAT_SHIELD, STAT_LEARNING, STAT_DARK_ELF, STAT_VAMPIRE, STAT_DRAGON };

		ENUM_TO_STRING_STATS = { {STAT_MIGHT, "Might"}, {STAT_INTELLECT, "Intellect"}, {STAT_PERSONALITY, "Personality"}, {STAT_ENDURANCE, "Endurance"}, {STAT_ACCURACY, "Accuracy"}, {STAT_SPEED, "Speed"}, {STAT_LUCK, "Luck"}, {STAT_HIT_POINTS, "Hit points"}, {STAT_SPELL_POINTS, "Spell points"}, {STAT_ARMOR_CLASS, "Armor class"}, {STAT_FIRE_RESISTANCE, "Fire resistance"}, {STAT_AIR_RESISTANCE, "Air resistance"}, {STAT_WATER_RESISTANCE, "Water resistance"}, {STAT_EARTH_RESISTANCE, "Earth resistance"}, {STAT_MIND_RESISTANCE, "Mind resistance"}, {STAT_BODY_RESISTANCE, "Body resistance"}, {STAT_ALCHEMY, "Alchemy"}, {STAT_STEALING, "Stealing"}, {STAT_DISARM_TRAPS, "Disarm traps"}, {STAT_IDENTIFY_ITEM, "Identify item"}, {STAT_IDENTIFY_MONSTER, "Identify monster"}, {STAT_ARMSMASTER, "Armsmaster"}, {STAT_DODGING, "Dodging"}, {STAT_UNARMED, "Unarmed"}, {STAT_LEVEL, "Level"}, {STAT_MELEE_ATTACK, "Melee attack"}, {STAT_MELEE_DAMAGE_BASE, "Melee damage base"}, {STAT_MELEE_DAMAGE_MIN, "Melee damage min"}, {STAT_MELEE_DAMAGE_MAX, "Melee damage max"}, {STAT_RANGED_ATTACK, "Ranged attack"}, {STAT_RANGED_DAMAGE_BASE, "Ranged damage base"}, {STAT_RANGED_DAMAGE_MIN, "Ranged damage min"}, {STAT_RANGED_DAMAGE_MAX, "Ranged damage max"}, {STAT_SPIRIT_RESISTANCE, "Spirit resistance"}, {STAT_FIRE_MAGIC, "Fire magic"}, {STAT_AIR_MAGIC, "Air magic"}, {STAT_WATER_MAGIC, "Water magic"}, {STAT_EARTH_MAGIC, "Earth magic"}, {STAT_SPIRIT_MAGIC, "Spirit magic"}, {STAT_MIND_MAGIC, "Mind magic"}, {STAT_BODY_MAGIC, "Body magic"}, {STAT_LIGHT_MAGIC, "Light magic"}, {STAT_DARK_MAGIC, "Dark magic"}, {STAT_MEDITATION, "Meditation"}, {STAT_BOW, "Bow"}, {STAT_SHIELD, "Shield"}, {STAT_LEARNING, "Learning"}, {STAT_DARK_ELF, "Dark elf"}, {STAT_VAMPIRE, "Vampire"}, {STAT_DRAGON, "Dragon"} };

		STRING_TO_ENUM_STATS = invertMap(ENUM_TO_STRING_STATS);

		detail::callbackStatsInitialize();

	}

bool checkStatsValidity(int64_t value)
{
	return detail::checkValidValue(STATS_ALL, value, detail::callbackCheckStatsValidity);
}


	// Skills //

	int64_t 
		SKILL_STAFF = INVALID_ID,
		SKILL_SWORD = INVALID_ID,
		SKILL_DAGGER = INVALID_ID,
		SKILL_AXE = INVALID_ID,
		SKILL_SPEAR = INVALID_ID,
		SKILL_BOW = INVALID_ID,
		SKILL_MACE = INVALID_ID,
		SKILL_BLASTER = INVALID_ID,
		SKILL_SHIELD = INVALID_ID,
		SKILL_LEATHER = INVALID_ID,
		SKILL_CHAIN = INVALID_ID,
		SKILL_PLATE = INVALID_ID,
		SKILL_FIRE = INVALID_ID,
		SKILL_AIR = INVALID_ID,
		SKILL_WATER = INVALID_ID,
		SKILL_EARTH = INVALID_ID,
		SKILL_SPIRIT = INVALID_ID,
		SKILL_MIND = INVALID_ID,
		SKILL_BODY = INVALID_ID,
		SKILL_LIGHT = INVALID_ID,
		SKILL_DARK = INVALID_ID,
		SKILL_IDENTIFY_ITEM = INVALID_ID,
		SKILL_MERCHANT = INVALID_ID,
		SKILL_REPAIR = INVALID_ID,
		SKILL_BODYBUILDING = INVALID_ID,
		SKILL_MEDITATION = INVALID_ID,
		SKILL_PERCEPTION = INVALID_ID,
		SKILL_DIPLOMACY = INVALID_ID,
		SKILL_THIEVERY = INVALID_ID,
		SKILL_DISARM_TRAPS = INVALID_ID,
		SKILL_LEARNING = INVALID_ID,
		SKILL_DODGING = INVALID_ID,
		SKILL_UNARMED = INVALID_ID,
		SKILL_IDENTIFY_MONSTER = INVALID_ID,
		SKILL_ARMSMASTER = INVALID_ID,
		SKILL_STEALING = INVALID_ID,
		SKILL_ALCHEMY = INVALID_ID,
		SKILL_DARK_ELF_ABILITY = INVALID_ID,
		SKILL_VAMPIRE_ABILITY = INVALID_ID,
		SKILL_DRAGON_ABILITY = INVALID_ID,
		SKILL_REGENERATION = INVALID_ID;

	std::vector<int64_t> SKILLS_ALL;
	std::map<int64_t, std::string> ENUM_TO_STRING_SKILLS;
	std::map<std::string, int64_t> STRING_TO_ENUM_SKILLS;

	void makeEnumSkills_6()
	{
		SKILL_STAFF = 0;
		SKILL_SWORD = 1;
		SKILL_DAGGER = 2;
		SKILL_AXE = 3;
		SKILL_SPEAR = 4;
		SKILL_BOW = 5;
		SKILL_MACE = 6;
		SKILL_BLASTER = 7;
		SKILL_SHIELD = 8;
		SKILL_LEATHER = 9;
		SKILL_CHAIN = 10;
		SKILL_PLATE = 11;
		SKILL_FIRE = 12;
		SKILL_AIR = 13;
		SKILL_WATER = 14;
		SKILL_EARTH = 15;
		SKILL_SPIRIT = 16;
		SKILL_MIND = 17;
		SKILL_BODY = 18;
		SKILL_LIGHT = 19;
		SKILL_DARK = 20;
		SKILL_IDENTIFY_ITEM = 21;
		SKILL_MERCHANT = 22;
		SKILL_REPAIR = 23;
		SKILL_BODYBUILDING = 24;
		SKILL_MEDITATION = 25;
		SKILL_PERCEPTION = 26;
		SKILL_DIPLOMACY = 27;
		SKILL_THIEVERY = 28;
		SKILL_DISARM_TRAPS = 29;
		SKILL_LEARNING = 30;

		SKILLS_ALL = { SKILL_STAFF, SKILL_SWORD, SKILL_DAGGER, SKILL_AXE, SKILL_SPEAR, SKILL_BOW, SKILL_MACE, SKILL_BLASTER, SKILL_SHIELD, SKILL_LEATHER, SKILL_CHAIN, SKILL_PLATE, SKILL_FIRE, SKILL_AIR, SKILL_WATER, SKILL_EARTH, SKILL_SPIRIT, SKILL_MIND, SKILL_BODY, SKILL_LIGHT, SKILL_DARK, SKILL_IDENTIFY_ITEM, SKILL_MERCHANT, SKILL_REPAIR, SKILL_BODYBUILDING, SKILL_MEDITATION, SKILL_PERCEPTION, SKILL_DIPLOMACY, SKILL_THIEVERY, SKILL_DISARM_TRAPS, SKILL_LEARNING };

		ENUM_TO_STRING_SKILLS = { {SKILL_STAFF, "Staff"}, {SKILL_SWORD, "Sword"}, {SKILL_DAGGER, "Dagger"}, {SKILL_AXE, "Axe"}, {SKILL_SPEAR, "Spear"}, {SKILL_BOW, "Bow"}, {SKILL_MACE, "Mace"}, {SKILL_BLASTER, "Blaster"}, {SKILL_SHIELD, "Shield"}, {SKILL_LEATHER, "Leather"}, {SKILL_CHAIN, "Chain"}, {SKILL_PLATE, "Plate"}, {SKILL_FIRE, "Fire"}, {SKILL_AIR, "Air"}, {SKILL_WATER, "Water"}, {SKILL_EARTH, "Earth"}, {SKILL_SPIRIT, "Spirit"}, {SKILL_MIND, "Mind"}, {SKILL_BODY, "Body"}, {SKILL_LIGHT, "Light"}, {SKILL_DARK, "Dark"}, {SKILL_IDENTIFY_ITEM, "Identify item"}, {SKILL_MERCHANT, "Merchant"}, {SKILL_REPAIR, "Repair"}, {SKILL_BODYBUILDING, "Bodybuilding"}, {SKILL_MEDITATION, "Meditation"}, {SKILL_PERCEPTION, "Perception"}, {SKILL_DIPLOMACY, "Diplomacy"}, {SKILL_THIEVERY, "Thievery"}, {SKILL_DISARM_TRAPS, "Disarm traps"}, {SKILL_LEARNING, "Learning"} };

		STRING_TO_ENUM_SKILLS = invertMap(ENUM_TO_STRING_SKILLS);

		detail::callbackSkillsInitialize();

	}

	void makeEnumSkills_7()
	{
		SKILL_STAFF = 0;
		SKILL_SWORD = 1;
		SKILL_DAGGER = 2;
		SKILL_AXE = 3;
		SKILL_SPEAR = 4;
		SKILL_BOW = 5;
		SKILL_MACE = 6;
		SKILL_BLASTER = 7;
		SKILL_SHIELD = 8;
		SKILL_LEATHER = 9;
		SKILL_CHAIN = 10;
		SKILL_PLATE = 11;
		SKILL_FIRE = 12;
		SKILL_AIR = 13;
		SKILL_WATER = 14;
		SKILL_EARTH = 15;
		SKILL_SPIRIT = 16;
		SKILL_MIND = 17;
		SKILL_BODY = 18;
		SKILL_LIGHT = 19;
		SKILL_DARK = 20;
		SKILL_IDENTIFY_ITEM = 21;
		SKILL_MERCHANT = 22;
		SKILL_REPAIR = 23;
		SKILL_BODYBUILDING = 24;
		SKILL_MEDITATION = 25;
		SKILL_PERCEPTION = 26;
		SKILL_DIPLOMACY = 27;
		SKILL_THIEVERY = 28;
		SKILL_DISARM_TRAPS = 29;
		SKILL_DODGING = 30;
		SKILL_UNARMED = 31;
		SKILL_IDENTIFY_MONSTER = 32;
		SKILL_ARMSMASTER = 33;
		SKILL_STEALING = 34;
		SKILL_ALCHEMY = 35;
		SKILL_LEARNING = 36;

		SKILLS_ALL = { SKILL_STAFF, SKILL_SWORD, SKILL_DAGGER, SKILL_AXE, SKILL_SPEAR, SKILL_BOW, SKILL_MACE, SKILL_BLASTER, SKILL_SHIELD, SKILL_LEATHER, SKILL_CHAIN, SKILL_PLATE, SKILL_FIRE, SKILL_AIR, SKILL_WATER, SKILL_EARTH, SKILL_SPIRIT, SKILL_MIND, SKILL_BODY, SKILL_LIGHT, SKILL_DARK, SKILL_IDENTIFY_ITEM, SKILL_MERCHANT, SKILL_REPAIR, SKILL_BODYBUILDING, SKILL_MEDITATION, SKILL_PERCEPTION, SKILL_DIPLOMACY, SKILL_THIEVERY, SKILL_DISARM_TRAPS, SKILL_DODGING, SKILL_UNARMED, SKILL_IDENTIFY_MONSTER, SKILL_ARMSMASTER, SKILL_STEALING, SKILL_ALCHEMY, SKILL_LEARNING };

		ENUM_TO_STRING_SKILLS = { {SKILL_STAFF, "Staff"}, {SKILL_SWORD, "Sword"}, {SKILL_DAGGER, "Dagger"}, {SKILL_AXE, "Axe"}, {SKILL_SPEAR, "Spear"}, {SKILL_BOW, "Bow"}, {SKILL_MACE, "Mace"}, {SKILL_BLASTER, "Blaster"}, {SKILL_SHIELD, "Shield"}, {SKILL_LEATHER, "Leather"}, {SKILL_CHAIN, "Chain"}, {SKILL_PLATE, "Plate"}, {SKILL_FIRE, "Fire"}, {SKILL_AIR, "Air"}, {SKILL_WATER, "Water"}, {SKILL_EARTH, "Earth"}, {SKILL_SPIRIT, "Spirit"}, {SKILL_MIND, "Mind"}, {SKILL_BODY, "Body"}, {SKILL_LIGHT, "Light"}, {SKILL_DARK, "Dark"}, {SKILL_IDENTIFY_ITEM, "Identify item"}, {SKILL_MERCHANT, "Merchant"}, {SKILL_REPAIR, "Repair"}, {SKILL_BODYBUILDING, "Bodybuilding"}, {SKILL_MEDITATION, "Meditation"}, {SKILL_PERCEPTION, "Perception"}, {SKILL_DIPLOMACY, "Diplomacy"}, {SKILL_THIEVERY, "Thievery"}, {SKILL_DISARM_TRAPS, "Disarm traps"}, {SKILL_DODGING, "Dodging"}, {SKILL_UNARMED, "Unarmed"}, {SKILL_IDENTIFY_MONSTER, "Identify monster"}, {SKILL_ARMSMASTER, "Armsmaster"}, {SKILL_STEALING, "Stealing"}, {SKILL_ALCHEMY, "Alchemy"}, {SKILL_LEARNING, "Learning"} };

		STRING_TO_ENUM_SKILLS = invertMap(ENUM_TO_STRING_SKILLS);

		detail::callbackSkillsInitialize();

	}

	void makeEnumSkills_8()
	{
		SKILL_STAFF = 0;
		SKILL_SWORD = 1;
		SKILL_DAGGER = 2;
		SKILL_AXE = 3;
		SKILL_SPEAR = 4;
		SKILL_BOW = 5;
		SKILL_MACE = 6;
		SKILL_BLASTER = 7;
		SKILL_SHIELD = 8;
		SKILL_LEATHER = 9;
		SKILL_CHAIN = 10;
		SKILL_PLATE = 11;
		SKILL_FIRE = 12;
		SKILL_AIR = 13;
		SKILL_WATER = 14;
		SKILL_EARTH = 15;
		SKILL_SPIRIT = 16;
		SKILL_MIND = 17;
		SKILL_BODY = 18;
		SKILL_LIGHT = 19;
		SKILL_DARK = 20;
		SKILL_DARK_ELF_ABILITY = 21;
		SKILL_VAMPIRE_ABILITY = 22;
		SKILL_DRAGON_ABILITY = 23;
		SKILL_IDENTIFY_ITEM = 24;
		SKILL_MERCHANT = 25;
		SKILL_REPAIR = 26;
		SKILL_BODYBUILDING = 27;
		SKILL_MEDITATION = 28;
		SKILL_PERCEPTION = 29;
		SKILL_REGENERATION = 30;
		SKILL_DISARM_TRAPS = 31;
		SKILL_DODGING = 32;
		SKILL_UNARMED = 33;
		SKILL_IDENTIFY_MONSTER = 34;
		SKILL_ARMSMASTER = 35;
		SKILL_STEALING = 36;
		SKILL_ALCHEMY = 37;
		SKILL_LEARNING = 38;

		SKILLS_ALL = { SKILL_STAFF, SKILL_SWORD, SKILL_DAGGER, SKILL_AXE, SKILL_SPEAR, SKILL_BOW, SKILL_MACE, SKILL_BLASTER, SKILL_SHIELD, SKILL_LEATHER, SKILL_CHAIN, SKILL_PLATE, SKILL_FIRE, SKILL_AIR, SKILL_WATER, SKILL_EARTH, SKILL_SPIRIT, SKILL_MIND, SKILL_BODY, SKILL_LIGHT, SKILL_DARK, SKILL_DARK_ELF_ABILITY, SKILL_VAMPIRE_ABILITY, SKILL_DRAGON_ABILITY, SKILL_IDENTIFY_ITEM, SKILL_MERCHANT, SKILL_REPAIR, SKILL_BODYBUILDING, SKILL_MEDITATION, SKILL_PERCEPTION, SKILL_REGENERATION, SKILL_DISARM_TRAPS, SKILL_DODGING, SKILL_UNARMED, SKILL_IDENTIFY_MONSTER, SKILL_ARMSMASTER, SKILL_STEALING, SKILL_ALCHEMY, SKILL_LEARNING };

		ENUM_TO_STRING_SKILLS = { {SKILL_STAFF, "Staff"}, {SKILL_SWORD, "Sword"}, {SKILL_DAGGER, "Dagger"}, {SKILL_AXE, "Axe"}, {SKILL_SPEAR, "Spear"}, {SKILL_BOW, "Bow"}, {SKILL_MACE, "Mace"}, {SKILL_BLASTER, "Blaster"}, {SKILL_SHIELD, "Shield"}, {SKILL_LEATHER, "Leather"}, {SKILL_CHAIN, "Chain"}, {SKILL_PLATE, "Plate"}, {SKILL_FIRE, "Fire"}, {SKILL_AIR, "Air"}, {SKILL_WATER, "Water"}, {SKILL_EARTH, "Earth"}, {SKILL_SPIRIT, "Spirit"}, {SKILL_MIND, "Mind"}, {SKILL_BODY, "Body"}, {SKILL_LIGHT, "Light"}, {SKILL_DARK, "Dark"}, {SKILL_DARK_ELF_ABILITY, "Dark elf ability"}, {SKILL_VAMPIRE_ABILITY, "Vampire ability"}, {SKILL_DRAGON_ABILITY, "Dragon ability"}, {SKILL_IDENTIFY_ITEM, "Identify item"}, {SKILL_MERCHANT, "Merchant"}, {SKILL_REPAIR, "Repair"}, {SKILL_BODYBUILDING, "Bodybuilding"}, {SKILL_MEDITATION, "Meditation"}, {SKILL_PERCEPTION, "Perception"}, {SKILL_REGENERATION, "Regeneration"}, {SKILL_DISARM_TRAPS, "Disarm traps"}, {SKILL_DODGING, "Dodging"}, {SKILL_UNARMED, "Unarmed"}, {SKILL_IDENTIFY_MONSTER, "Identify monster"}, {SKILL_ARMSMASTER, "Armsmaster"}, {SKILL_STEALING, "Stealing"}, {SKILL_ALCHEMY, "Alchemy"}, {SKILL_LEARNING, "Learning"} };

		STRING_TO_ENUM_SKILLS = invertMap(ENUM_TO_STRING_SKILLS);

		detail::callbackSkillsInitialize();

	}

bool checkSkillsValidity(int64_t value)
{
	return detail::checkValidValue(SKILLS_ALL, value, detail::callbackCheckSkillsValidity);
}


	// Damage //

	int64_t 
		DMG_PHYS = INVALID_ID,
		DMG_MAGIC = INVALID_ID,
		DMG_FIRE = INVALID_ID,
		DMG_ELEC = INVALID_ID,
		DMG_COLD = INVALID_ID,
		DMG_POISON = INVALID_ID,
		DMG_ENERGY = INVALID_ID,
		DMG_AIR = INVALID_ID,
		DMG_WATER = INVALID_ID,
		DMG_EARTH = INVALID_ID,
		DMG_SPIRIT = INVALID_ID,
		DMG_MIND = INVALID_ID,
		DMG_BODY = INVALID_ID,
		DMG_LIGHT = INVALID_ID,
		DMG_DARK = INVALID_ID,
		DMG_DRAGON = INVALID_ID;

	std::vector<int64_t> DAMAGE_ALL;
	std::map<int64_t, std::string> ENUM_TO_STRING_DAMAGE;
	std::map<std::string, int64_t> STRING_TO_ENUM_DAMAGE;

	void makeEnumDamage_6()
	{
		DMG_PHYS = 0;
		DMG_MAGIC = 1;
		DMG_FIRE = 2;
		DMG_ELEC = 3;
		DMG_COLD = 4;
		DMG_POISON = 5;
		DMG_ENERGY = 6;

		DAMAGE_ALL = { DMG_PHYS, DMG_MAGIC, DMG_FIRE, DMG_ELEC, DMG_COLD, DMG_POISON, DMG_ENERGY };

		ENUM_TO_STRING_DAMAGE = { {DMG_PHYS, "Phys"}, {DMG_MAGIC, "Magic"}, {DMG_FIRE, "Fire"}, {DMG_ELEC, "Elec"}, {DMG_COLD, "Cold"}, {DMG_POISON, "Poison"}, {DMG_ENERGY, "Energy"} };

		STRING_TO_ENUM_DAMAGE = invertMap(ENUM_TO_STRING_DAMAGE);

		detail::callbackDamageInitialize();

	}

	void makeEnumDamage_7()
	{
		DMG_FIRE = 0;
		DMG_AIR = 1;
		DMG_WATER = 2;
		DMG_EARTH = 3;
		DMG_PHYS = 4;
		DMG_MAGIC = 5;
		DMG_SPIRIT = 6;
		DMG_MIND = 7;
		DMG_BODY = 8;
		DMG_LIGHT = 9;
		DMG_DARK = 10;
		DMG_ENERGY = 12;

		DAMAGE_ALL = { DMG_FIRE, DMG_AIR, DMG_WATER, DMG_EARTH, DMG_PHYS, DMG_MAGIC, DMG_SPIRIT, DMG_MIND, DMG_BODY, DMG_LIGHT, DMG_DARK, DMG_ENERGY };

		ENUM_TO_STRING_DAMAGE = { {DMG_FIRE, "Fire"}, {DMG_AIR, "Air"}, {DMG_WATER, "Water"}, {DMG_EARTH, "Earth"}, {DMG_PHYS, "Phys"}, {DMG_MAGIC, "Magic"}, {DMG_SPIRIT, "Spirit"}, {DMG_MIND, "Mind"}, {DMG_BODY, "Body"}, {DMG_LIGHT, "Light"}, {DMG_DARK, "Dark"}, {DMG_ENERGY, "Energy"} };

		STRING_TO_ENUM_DAMAGE = invertMap(ENUM_TO_STRING_DAMAGE);

		detail::callbackDamageInitialize();

	}

	void makeEnumDamage_8()
	{
		DMG_FIRE = 0;
		DMG_AIR = 1;
		DMG_WATER = 2;
		DMG_EARTH = 3;
		DMG_PHYS = 4;
		DMG_MAGIC = 5;
		DMG_SPIRIT = 6;
		DMG_MIND = 7;
		DMG_BODY = 8;
		DMG_LIGHT = 9;
		DMG_DARK = 10;
		DMG_ENERGY = 12;
		DMG_DRAGON = 50;

		DAMAGE_ALL = { DMG_FIRE, DMG_AIR, DMG_WATER, DMG_EARTH, DMG_PHYS, DMG_MAGIC, DMG_SPIRIT, DMG_MIND, DMG_BODY, DMG_LIGHT, DMG_DARK, DMG_ENERGY, DMG_DRAGON };

		ENUM_TO_STRING_DAMAGE = { {DMG_FIRE, "Fire"}, {DMG_AIR, "Air"}, {DMG_WATER, "Water"}, {DMG_EARTH, "Earth"}, {DMG_PHYS, "Phys"}, {DMG_MAGIC, "Magic"}, {DMG_SPIRIT, "Spirit"}, {DMG_MIND, "Mind"}, {DMG_BODY, "Body"}, {DMG_LIGHT, "Light"}, {DMG_DARK, "Dark"}, {DMG_ENERGY, "Energy"}, {DMG_DRAGON, "Dragon"} };

		STRING_TO_ENUM_DAMAGE = invertMap(ENUM_TO_STRING_DAMAGE);

		detail::callbackDamageInitialize();

	}

bool checkDamageValidity(int64_t value)
{
	return detail::checkValidValue(DAMAGE_ALL, value, detail::callbackCheckDamageValidity);
}


	// ItemType //

	int64_t 
		ITEM_TYPE_ANY = INVALID_ID,
		ITEM_TYPE_WEAPON = INVALID_ID,
		ITEM_TYPE_WEAPON_2H = INVALID_ID,
		ITEM_TYPE_MISSILE = INVALID_ID,
		ITEM_TYPE_ARMOR = INVALID_ID,
		ITEM_TYPE_SHIELD = INVALID_ID,
		ITEM_TYPE_HELM = INVALID_ID,
		ITEM_TYPE_BELT = INVALID_ID,
		ITEM_TYPE_CLOAK = INVALID_ID,
		ITEM_TYPE_GAUNTLETS = INVALID_ID,
		ITEM_TYPE_BOOTS = INVALID_ID,
		ITEM_TYPE_RING = INVALID_ID,
		ITEM_TYPE_AMULET = INVALID_ID,
		ITEM_TYPE_WAND = INVALID_ID,
		ITEM_TYPE_REAGENT = INVALID_ID,
		ITEM_TYPE_POTION = INVALID_ID,
		ITEM_TYPE_SCROLL = INVALID_ID,
		ITEM_TYPE_BOOK = INVALID_ID,
		ITEM_TYPE_MSCROLL = INVALID_ID,
		ITEM_TYPE_GOLD = INVALID_ID,
		ITEM_TYPE_WEAPON_ = INVALID_ID,
		ITEM_TYPE_ARMOR_ = INVALID_ID,
		ITEM_TYPE_MISC = INVALID_ID,
		ITEM_TYPE_SWORD = INVALID_ID,
		ITEM_TYPE_DAGGER = INVALID_ID,
		ITEM_TYPE_AXE = INVALID_ID,
		ITEM_TYPE_SPEAR = INVALID_ID,
		ITEM_TYPE_BOW = INVALID_ID,
		ITEM_TYPE_MACE = INVALID_ID,
		ITEM_TYPE_CLUB = INVALID_ID,
		ITEM_TYPE_STAFF = INVALID_ID,
		ITEM_TYPE_LEATHER = INVALID_ID,
		ITEM_TYPE_CHAIN = INVALID_ID,
		ITEM_TYPE_PLATE = INVALID_ID,
		ITEM_TYPE_SHIELD_ = INVALID_ID,
		ITEM_TYPE_HELM_ = INVALID_ID,
		ITEM_TYPE_BELT_ = INVALID_ID,
		ITEM_TYPE_CLOAK_ = INVALID_ID,
		ITEM_TYPE_GAUNTLETS_ = INVALID_ID,
		ITEM_TYPE_BOOTS_ = INVALID_ID,
		ITEM_TYPE_RING_ = INVALID_ID,
		ITEM_TYPE_AMULET_ = INVALID_ID,
		ITEM_TYPE_WAND_ = INVALID_ID,
		ITEM_TYPE_SCROLL_ = INVALID_ID,
		ITEM_TYPE_POTION_ = INVALID_ID,
		ITEM_TYPE_REAGENT_ = INVALID_ID,
		ITEM_TYPE_GEMS = INVALID_ID,
		ITEM_TYPE_GEMS_2 = INVALID_ID,
		ITEM_TYPE_GOLD_ = INVALID_ID;

	std::vector<int64_t> ITEM_TYPE_ALL;
	std::map<int64_t, std::string> ENUM_TO_STRING_ITEM_TYPE;
	std::map<std::string, int64_t> STRING_TO_ENUM_ITEM_TYPE;

	void makeEnumItemType_6()
	{
		ITEM_TYPE_ANY = 0;
		ITEM_TYPE_WEAPON = 1;
		ITEM_TYPE_WEAPON_2H = 2;
		ITEM_TYPE_MISSILE = 3;
		ITEM_TYPE_ARMOR = 4;
		ITEM_TYPE_SHIELD = 5;
		ITEM_TYPE_HELM = 6;
		ITEM_TYPE_BELT = 7;
		ITEM_TYPE_CLOAK = 8;
		ITEM_TYPE_GAUNTLETS = 9;
		ITEM_TYPE_BOOTS = 10;
		ITEM_TYPE_RING = 11;
		ITEM_TYPE_AMULET = 12;
		ITEM_TYPE_WAND = 13;
		ITEM_TYPE_REAGENT = 14;
		ITEM_TYPE_POTION = 15;
		ITEM_TYPE_SCROLL = 16;
		ITEM_TYPE_BOOK = 17;
		ITEM_TYPE_MSCROLL = 18;
		ITEM_TYPE_GOLD = 19;
		ITEM_TYPE_WEAPON_ = 20;
		ITEM_TYPE_ARMOR_ = 21;
		ITEM_TYPE_MISC = 22;
		ITEM_TYPE_SWORD = 23;
		ITEM_TYPE_DAGGER = 24;
		ITEM_TYPE_AXE = 25;
		ITEM_TYPE_SPEAR = 26;
		ITEM_TYPE_BOW = 27;
		ITEM_TYPE_MACE = 28;
		ITEM_TYPE_CLUB = 29;
		ITEM_TYPE_STAFF = 30;
		ITEM_TYPE_LEATHER = 31;
		ITEM_TYPE_CHAIN = 32;
		ITEM_TYPE_PLATE = 33;
		ITEM_TYPE_SHIELD_ = 34;
		ITEM_TYPE_HELM_ = 35;
		ITEM_TYPE_BELT_ = 36;
		ITEM_TYPE_CLOAK_ = 37;
		ITEM_TYPE_GAUNTLETS_ = 38;
		ITEM_TYPE_BOOTS_ = 39;
		ITEM_TYPE_RING_ = 40;
		ITEM_TYPE_AMULET_ = 41;
		ITEM_TYPE_WAND_ = 42;
		ITEM_TYPE_SCROLL_ = 43;
		ITEM_TYPE_POTION_ = 44;
		ITEM_TYPE_REAGENT_ = 45;
		ITEM_TYPE_GEMS = 46;
		ITEM_TYPE_GEMS_2 = 47;
		ITEM_TYPE_GOLD_ = 50;

		ITEM_TYPE_ALL = { ITEM_TYPE_ANY, ITEM_TYPE_WEAPON, ITEM_TYPE_WEAPON_2H, ITEM_TYPE_MISSILE, ITEM_TYPE_ARMOR, ITEM_TYPE_SHIELD, ITEM_TYPE_HELM, ITEM_TYPE_BELT, ITEM_TYPE_CLOAK, ITEM_TYPE_GAUNTLETS, ITEM_TYPE_BOOTS, ITEM_TYPE_RING, ITEM_TYPE_AMULET, ITEM_TYPE_WAND, ITEM_TYPE_REAGENT, ITEM_TYPE_POTION, ITEM_TYPE_SCROLL, ITEM_TYPE_BOOK, ITEM_TYPE_MSCROLL, ITEM_TYPE_GOLD, ITEM_TYPE_WEAPON_, ITEM_TYPE_ARMOR_, ITEM_TYPE_MISC, ITEM_TYPE_SWORD, ITEM_TYPE_DAGGER, ITEM_TYPE_AXE, ITEM_TYPE_SPEAR, ITEM_TYPE_BOW, ITEM_TYPE_MACE, ITEM_TYPE_CLUB, ITEM_TYPE_STAFF, ITEM_TYPE_LEATHER, ITEM_TYPE_CHAIN, ITEM_TYPE_PLATE, ITEM_TYPE_SHIELD_, ITEM_TYPE_HELM_, ITEM_TYPE_BELT_, ITEM_TYPE_CLOAK_, ITEM_TYPE_GAUNTLETS_, ITEM_TYPE_BOOTS_, ITEM_TYPE_RING_, ITEM_TYPE_AMULET_, ITEM_TYPE_WAND_, ITEM_TYPE_SCROLL_, ITEM_TYPE_POTION_, ITEM_TYPE_REAGENT_, ITEM_TYPE_GEMS, ITEM_TYPE_GEMS_2, ITEM_TYPE_GOLD_ };

		ENUM_TO_STRING_ITEM_TYPE = { {ITEM_TYPE_ANY, "Any"}, {ITEM_TYPE_WEAPON, "Weapon"}, {ITEM_TYPE_WEAPON_2H, "Weapon 2H"}, {ITEM_TYPE_MISSILE, "Missile"}, {ITEM_TYPE_ARMOR, "Armor"}, {ITEM_TYPE_SHIELD, "Shield"}, {ITEM_TYPE_HELM, "Helm"}, {ITEM_TYPE_BELT, "Belt"}, {ITEM_TYPE_CLOAK, "Cloak"}, {ITEM_TYPE_GAUNTLETS, "Gauntlets"}, {ITEM_TYPE_BOOTS, "Boots"}, {ITEM_TYPE_RING, "Ring"}, {ITEM_TYPE_AMULET, "Amulet"}, {ITEM_TYPE_WAND, "Wand"}, {ITEM_TYPE_REAGENT, "Reagent"}, {ITEM_TYPE_POTION, "Potion"}, {ITEM_TYPE_SCROLL, "Scroll"}, {ITEM_TYPE_BOOK, "Book"}, {ITEM_TYPE_MSCROLL, "MScroll"}, {ITEM_TYPE_GOLD, "Gold"}, {ITEM_TYPE_WEAPON_, "Weapon_"}, {ITEM_TYPE_ARMOR_, "Armor_"}, {ITEM_TYPE_MISC, "Misc"}, {ITEM_TYPE_SWORD, "Sword"}, {ITEM_TYPE_DAGGER, "Dagger"}, {ITEM_TYPE_AXE, "Axe"}, {ITEM_TYPE_SPEAR, "Spear"}, {ITEM_TYPE_BOW, "Bow"}, {ITEM_TYPE_MACE, "Mace"}, {ITEM_TYPE_CLUB, "Club"}, {ITEM_TYPE_STAFF, "Staff"}, {ITEM_TYPE_LEATHER, "Leather"}, {ITEM_TYPE_CHAIN, "Chain"}, {ITEM_TYPE_PLATE, "Plate"}, {ITEM_TYPE_SHIELD_, "Shield_"}, {ITEM_TYPE_HELM_, "Helm_"}, {ITEM_TYPE_BELT_, "Belt_"}, {ITEM_TYPE_CLOAK_, "Cloak_"}, {ITEM_TYPE_GAUNTLETS_, "Gauntlets_"}, {ITEM_TYPE_BOOTS_, "Boots_"}, {ITEM_TYPE_RING_, "Ring_"}, {ITEM_TYPE_AMULET_, "Amulet_"}, {ITEM_TYPE_WAND_, "Wand_"}, {ITEM_TYPE_SCROLL_, "Scroll_"}, {ITEM_TYPE_POTION_, "Potion_"}, {ITEM_TYPE_REAGENT_, "Reagent_"}, {ITEM_TYPE_GEMS, "Gems"}, {ITEM_TYPE_GEMS_2, "Gems 2"}, {ITEM_TYPE_GOLD_, "Gold_"} };

		STRING_TO_ENUM_ITEM_TYPE = invertMap(ENUM_TO_STRING_ITEM_TYPE);

		detail::callbackItemTypeInitialize();

	}

	void makeEnumItemType_7()
	{
		ITEM_TYPE_ANY = 0;
		ITEM_TYPE_WEAPON = 1;
		ITEM_TYPE_WEAPON_2H = 2;
		ITEM_TYPE_MISSILE = 3;
		ITEM_TYPE_ARMOR = 4;
		ITEM_TYPE_SHIELD = 5;
		ITEM_TYPE_HELM = 6;
		ITEM_TYPE_BELT = 7;
		ITEM_TYPE_CLOAK = 8;
		ITEM_TYPE_GAUNTLETS = 9;
		ITEM_TYPE_BOOTS = 10;
		ITEM_TYPE_RING = 11;
		ITEM_TYPE_AMULET = 12;
		ITEM_TYPE_WAND = 13;
		ITEM_TYPE_REAGENT = 14;
		ITEM_TYPE_POTION = 15;
		ITEM_TYPE_SCROLL = 16;
		ITEM_TYPE_BOOK = 17;
		ITEM_TYPE_MSCROLL = 18;
		ITEM_TYPE_GOLD = 19;
		ITEM_TYPE_WEAPON_ = 20;
		ITEM_TYPE_ARMOR_ = 21;
		ITEM_TYPE_MISC = 22;
		ITEM_TYPE_SWORD = 23;
		ITEM_TYPE_DAGGER = 24;
		ITEM_TYPE_AXE = 25;
		ITEM_TYPE_SPEAR = 26;
		ITEM_TYPE_BOW = 27;
		ITEM_TYPE_MACE = 28;
		ITEM_TYPE_CLUB = 29;
		ITEM_TYPE_STAFF = 30;
		ITEM_TYPE_LEATHER = 31;
		ITEM_TYPE_CHAIN = 32;
		ITEM_TYPE_PLATE = 33;
		ITEM_TYPE_SHIELD_ = 34;
		ITEM_TYPE_HELM_ = 35;
		ITEM_TYPE_BELT_ = 36;
		ITEM_TYPE_CLOAK_ = 37;
		ITEM_TYPE_GAUNTLETS_ = 38;
		ITEM_TYPE_BOOTS_ = 39;
		ITEM_TYPE_RING_ = 40;
		ITEM_TYPE_AMULET_ = 41;
		ITEM_TYPE_WAND_ = 42;
		ITEM_TYPE_SCROLL_ = 43;
		ITEM_TYPE_POTION_ = 44;
		ITEM_TYPE_REAGENT_ = 45;
		ITEM_TYPE_GEMS = 46;
		ITEM_TYPE_GEMS_2 = 47;
		ITEM_TYPE_GOLD_ = 50;

		ITEM_TYPE_ALL = { ITEM_TYPE_ANY, ITEM_TYPE_WEAPON, ITEM_TYPE_WEAPON_2H, ITEM_TYPE_MISSILE, ITEM_TYPE_ARMOR, ITEM_TYPE_SHIELD, ITEM_TYPE_HELM, ITEM_TYPE_BELT, ITEM_TYPE_CLOAK, ITEM_TYPE_GAUNTLETS, ITEM_TYPE_BOOTS, ITEM_TYPE_RING, ITEM_TYPE_AMULET, ITEM_TYPE_WAND, ITEM_TYPE_REAGENT, ITEM_TYPE_POTION, ITEM_TYPE_SCROLL, ITEM_TYPE_BOOK, ITEM_TYPE_MSCROLL, ITEM_TYPE_GOLD, ITEM_TYPE_WEAPON_, ITEM_TYPE_ARMOR_, ITEM_TYPE_MISC, ITEM_TYPE_SWORD, ITEM_TYPE_DAGGER, ITEM_TYPE_AXE, ITEM_TYPE_SPEAR, ITEM_TYPE_BOW, ITEM_TYPE_MACE, ITEM_TYPE_CLUB, ITEM_TYPE_STAFF, ITEM_TYPE_LEATHER, ITEM_TYPE_CHAIN, ITEM_TYPE_PLATE, ITEM_TYPE_SHIELD_, ITEM_TYPE_HELM_, ITEM_TYPE_BELT_, ITEM_TYPE_CLOAK_, ITEM_TYPE_GAUNTLETS_, ITEM_TYPE_BOOTS_, ITEM_TYPE_RING_, ITEM_TYPE_AMULET_, ITEM_TYPE_WAND_, ITEM_TYPE_SCROLL_, ITEM_TYPE_POTION_, ITEM_TYPE_REAGENT_, ITEM_TYPE_GEMS, ITEM_TYPE_GEMS_2, ITEM_TYPE_GOLD_ };

		ENUM_TO_STRING_ITEM_TYPE = { {ITEM_TYPE_ANY, "Any"}, {ITEM_TYPE_WEAPON, "Weapon"}, {ITEM_TYPE_WEAPON_2H, "Weapon 2H"}, {ITEM_TYPE_MISSILE, "Missile"}, {ITEM_TYPE_ARMOR, "Armor"}, {ITEM_TYPE_SHIELD, "Shield"}, {ITEM_TYPE_HELM, "Helm"}, {ITEM_TYPE_BELT, "Belt"}, {ITEM_TYPE_CLOAK, "Cloak"}, {ITEM_TYPE_GAUNTLETS, "Gauntlets"}, {ITEM_TYPE_BOOTS, "Boots"}, {ITEM_TYPE_RING, "Ring"}, {ITEM_TYPE_AMULET, "Amulet"}, {ITEM_TYPE_WAND, "Wand"}, {ITEM_TYPE_REAGENT, "Reagent"}, {ITEM_TYPE_POTION, "Potion"}, {ITEM_TYPE_SCROLL, "Scroll"}, {ITEM_TYPE_BOOK, "Book"}, {ITEM_TYPE_MSCROLL, "MScroll"}, {ITEM_TYPE_GOLD, "Gold"}, {ITEM_TYPE_WEAPON_, "Weapon_"}, {ITEM_TYPE_ARMOR_, "Armor_"}, {ITEM_TYPE_MISC, "Misc"}, {ITEM_TYPE_SWORD, "Sword"}, {ITEM_TYPE_DAGGER, "Dagger"}, {ITEM_TYPE_AXE, "Axe"}, {ITEM_TYPE_SPEAR, "Spear"}, {ITEM_TYPE_BOW, "Bow"}, {ITEM_TYPE_MACE, "Mace"}, {ITEM_TYPE_CLUB, "Club"}, {ITEM_TYPE_STAFF, "Staff"}, {ITEM_TYPE_LEATHER, "Leather"}, {ITEM_TYPE_CHAIN, "Chain"}, {ITEM_TYPE_PLATE, "Plate"}, {ITEM_TYPE_SHIELD_, "Shield_"}, {ITEM_TYPE_HELM_, "Helm_"}, {ITEM_TYPE_BELT_, "Belt_"}, {ITEM_TYPE_CLOAK_, "Cloak_"}, {ITEM_TYPE_GAUNTLETS_, "Gauntlets_"}, {ITEM_TYPE_BOOTS_, "Boots_"}, {ITEM_TYPE_RING_, "Ring_"}, {ITEM_TYPE_AMULET_, "Amulet_"}, {ITEM_TYPE_WAND_, "Wand_"}, {ITEM_TYPE_SCROLL_, "Scroll_"}, {ITEM_TYPE_POTION_, "Potion_"}, {ITEM_TYPE_REAGENT_, "Reagent_"}, {ITEM_TYPE_GEMS, "Gems"}, {ITEM_TYPE_GEMS_2, "Gems 2"}, {ITEM_TYPE_GOLD_, "Gold_"} };

		STRING_TO_ENUM_ITEM_TYPE = invertMap(ENUM_TO_STRING_ITEM_TYPE);

		detail::callbackItemTypeInitialize();

	}

	void makeEnumItemType_8()
	{
		ITEM_TYPE_ANY = 0;
		ITEM_TYPE_WEAPON = 1;
		ITEM_TYPE_WEAPON_2H = 2;
		ITEM_TYPE_MISSILE = 3;
		ITEM_TYPE_ARMOR = 4;
		ITEM_TYPE_SHIELD = 5;
		ITEM_TYPE_HELM = 6;
		ITEM_TYPE_BELT = 7;
		ITEM_TYPE_CLOAK = 8;
		ITEM_TYPE_GAUNTLETS = 9;
		ITEM_TYPE_BOOTS = 10;
		ITEM_TYPE_RING = 11;
		ITEM_TYPE_AMULET = 12;
		ITEM_TYPE_WAND = 13;
		ITEM_TYPE_REAGENT = 14;
		ITEM_TYPE_POTION = 15;
		ITEM_TYPE_SCROLL = 16;
		ITEM_TYPE_BOOK = 17;
		ITEM_TYPE_MSCROLL = 18;
		ITEM_TYPE_GOLD = 19;
		ITEM_TYPE_WEAPON_ = 20;
		ITEM_TYPE_ARMOR_ = 21;
		ITEM_TYPE_MISC = 22;
		ITEM_TYPE_SWORD = 23;
		ITEM_TYPE_DAGGER = 24;
		ITEM_TYPE_AXE = 25;
		ITEM_TYPE_SPEAR = 26;
		ITEM_TYPE_BOW = 27;
		ITEM_TYPE_MACE = 28;
		ITEM_TYPE_CLUB = 29;
		ITEM_TYPE_STAFF = 30;
		ITEM_TYPE_LEATHER = 31;
		ITEM_TYPE_CHAIN = 32;
		ITEM_TYPE_PLATE = 33;
		ITEM_TYPE_SHIELD_ = 34;
		ITEM_TYPE_HELM_ = 35;
		ITEM_TYPE_BELT_ = 36;
		ITEM_TYPE_CLOAK_ = 37;
		ITEM_TYPE_GAUNTLETS_ = 38;
		ITEM_TYPE_BOOTS_ = 39;
		ITEM_TYPE_RING_ = 40;
		ITEM_TYPE_AMULET_ = 41;
		ITEM_TYPE_WAND_ = 42;
		ITEM_TYPE_SCROLL_ = 43;
		ITEM_TYPE_POTION_ = 44;
		ITEM_TYPE_REAGENT_ = 45;
		ITEM_TYPE_GEMS = 46;
		ITEM_TYPE_GEMS_2 = 47;
		ITEM_TYPE_GOLD_ = 50;

		ITEM_TYPE_ALL = { ITEM_TYPE_ANY, ITEM_TYPE_WEAPON, ITEM_TYPE_WEAPON_2H, ITEM_TYPE_MISSILE, ITEM_TYPE_ARMOR, ITEM_TYPE_SHIELD, ITEM_TYPE_HELM, ITEM_TYPE_BELT, ITEM_TYPE_CLOAK, ITEM_TYPE_GAUNTLETS, ITEM_TYPE_BOOTS, ITEM_TYPE_RING, ITEM_TYPE_AMULET, ITEM_TYPE_WAND, ITEM_TYPE_REAGENT, ITEM_TYPE_POTION, ITEM_TYPE_SCROLL, ITEM_TYPE_BOOK, ITEM_TYPE_MSCROLL, ITEM_TYPE_GOLD, ITEM_TYPE_WEAPON_, ITEM_TYPE_ARMOR_, ITEM_TYPE_MISC, ITEM_TYPE_SWORD, ITEM_TYPE_DAGGER, ITEM_TYPE_AXE, ITEM_TYPE_SPEAR, ITEM_TYPE_BOW, ITEM_TYPE_MACE, ITEM_TYPE_CLUB, ITEM_TYPE_STAFF, ITEM_TYPE_LEATHER, ITEM_TYPE_CHAIN, ITEM_TYPE_PLATE, ITEM_TYPE_SHIELD_, ITEM_TYPE_HELM_, ITEM_TYPE_BELT_, ITEM_TYPE_CLOAK_, ITEM_TYPE_GAUNTLETS_, ITEM_TYPE_BOOTS_, ITEM_TYPE_RING_, ITEM_TYPE_AMULET_, ITEM_TYPE_WAND_, ITEM_TYPE_SCROLL_, ITEM_TYPE_POTION_, ITEM_TYPE_REAGENT_, ITEM_TYPE_GEMS, ITEM_TYPE_GEMS_2, ITEM_TYPE_GOLD_ };

		ENUM_TO_STRING_ITEM_TYPE = { {ITEM_TYPE_ANY, "Any"}, {ITEM_TYPE_WEAPON, "Weapon"}, {ITEM_TYPE_WEAPON_2H, "Weapon 2H"}, {ITEM_TYPE_MISSILE, "Missile"}, {ITEM_TYPE_ARMOR, "Armor"}, {ITEM_TYPE_SHIELD, "Shield"}, {ITEM_TYPE_HELM, "Helm"}, {ITEM_TYPE_BELT, "Belt"}, {ITEM_TYPE_CLOAK, "Cloak"}, {ITEM_TYPE_GAUNTLETS, "Gauntlets"}, {ITEM_TYPE_BOOTS, "Boots"}, {ITEM_TYPE_RING, "Ring"}, {ITEM_TYPE_AMULET, "Amulet"}, {ITEM_TYPE_WAND, "Wand"}, {ITEM_TYPE_REAGENT, "Reagent"}, {ITEM_TYPE_POTION, "Potion"}, {ITEM_TYPE_SCROLL, "Scroll"}, {ITEM_TYPE_BOOK, "Book"}, {ITEM_TYPE_MSCROLL, "MScroll"}, {ITEM_TYPE_GOLD, "Gold"}, {ITEM_TYPE_WEAPON_, "Weapon_"}, {ITEM_TYPE_ARMOR_, "Armor_"}, {ITEM_TYPE_MISC, "Misc"}, {ITEM_TYPE_SWORD, "Sword"}, {ITEM_TYPE_DAGGER, "Dagger"}, {ITEM_TYPE_AXE, "Axe"}, {ITEM_TYPE_SPEAR, "Spear"}, {ITEM_TYPE_BOW, "Bow"}, {ITEM_TYPE_MACE, "Mace"}, {ITEM_TYPE_CLUB, "Club"}, {ITEM_TYPE_STAFF, "Staff"}, {ITEM_TYPE_LEATHER, "Leather"}, {ITEM_TYPE_CHAIN, "Chain"}, {ITEM_TYPE_PLATE, "Plate"}, {ITEM_TYPE_SHIELD_, "Shield_"}, {ITEM_TYPE_HELM_, "Helm_"}, {ITEM_TYPE_BELT_, "Belt_"}, {ITEM_TYPE_CLOAK_, "Cloak_"}, {ITEM_TYPE_GAUNTLETS_, "Gauntlets_"}, {ITEM_TYPE_BOOTS_, "Boots_"}, {ITEM_TYPE_RING_, "Ring_"}, {ITEM_TYPE_AMULET_, "Amulet_"}, {ITEM_TYPE_WAND_, "Wand_"}, {ITEM_TYPE_SCROLL_, "Scroll_"}, {ITEM_TYPE_POTION_, "Potion_"}, {ITEM_TYPE_REAGENT_, "Reagent_"}, {ITEM_TYPE_GEMS, "Gems"}, {ITEM_TYPE_GEMS_2, "Gems 2"}, {ITEM_TYPE_GOLD_, "Gold_"} };

		STRING_TO_ENUM_ITEM_TYPE = invertMap(ENUM_TO_STRING_ITEM_TYPE);

		detail::callbackItemTypeInitialize();

	}

bool checkItemTypeValidity(int64_t value)
{
	return detail::checkValidValue(ITEM_TYPE_ALL, value, detail::callbackCheckItemTypeValidity);
}


	// ItemSlot //

	int64_t 
		ITEM_SLOT_EXTRA_HAND = INVALID_ID,
		ITEM_SLOT_MAIN_HAND = INVALID_ID,
		ITEM_SLOT_BOW = INVALID_ID,
		ITEM_SLOT_ARMOR = INVALID_ID,
		ITEM_SLOT_HELM = INVALID_ID,
		ITEM_SLOT_BELT = INVALID_ID,
		ITEM_SLOT_CLOAK = INVALID_ID,
		ITEM_SLOT_GAUNTLETS = INVALID_ID,
		ITEM_SLOT_BOOTS = INVALID_ID,
		ITEM_SLOT_AMULET = INVALID_ID,
		ITEM_SLOT_RING_1 = INVALID_ID,
		ITEM_SLOT_RING_2 = INVALID_ID,
		ITEM_SLOT_RING_3 = INVALID_ID,
		ITEM_SLOT_RING_4 = INVALID_ID,
		ITEM_SLOT_RING_5 = INVALID_ID,
		ITEM_SLOT_RING_6 = INVALID_ID;

	std::vector<int64_t> ITEM_SLOT_ALL;
	std::map<int64_t, std::string> ENUM_TO_STRING_ITEM_SLOT;
	std::map<std::string, int64_t> STRING_TO_ENUM_ITEM_SLOT;

	void makeEnumItemSlot_6()
	{
		ITEM_SLOT_EXTRA_HAND = 0;
		ITEM_SLOT_MAIN_HAND = 1;
		ITEM_SLOT_BOW = 2;
		ITEM_SLOT_ARMOR = 3;
		ITEM_SLOT_HELM = 4;
		ITEM_SLOT_BELT = 5;
		ITEM_SLOT_CLOAK = 6;
		ITEM_SLOT_GAUNTLETS = 7;
		ITEM_SLOT_BOOTS = 8;
		ITEM_SLOT_AMULET = 9;
		ITEM_SLOT_RING_1 = 10;
		ITEM_SLOT_RING_2 = 11;
		ITEM_SLOT_RING_3 = 12;
		ITEM_SLOT_RING_4 = 13;
		ITEM_SLOT_RING_5 = 14;
		ITEM_SLOT_RING_6 = 15;

		ITEM_SLOT_ALL = { ITEM_SLOT_EXTRA_HAND, ITEM_SLOT_MAIN_HAND, ITEM_SLOT_BOW, ITEM_SLOT_ARMOR, ITEM_SLOT_HELM, ITEM_SLOT_BELT, ITEM_SLOT_CLOAK, ITEM_SLOT_GAUNTLETS, ITEM_SLOT_BOOTS, ITEM_SLOT_AMULET, ITEM_SLOT_RING_1, ITEM_SLOT_RING_2, ITEM_SLOT_RING_3, ITEM_SLOT_RING_4, ITEM_SLOT_RING_5, ITEM_SLOT_RING_6 };

		ENUM_TO_STRING_ITEM_SLOT = { {ITEM_SLOT_EXTRA_HAND, "Extra hand"}, {ITEM_SLOT_MAIN_HAND, "Main hand"}, {ITEM_SLOT_BOW, "Bow"}, {ITEM_SLOT_ARMOR, "Armor"}, {ITEM_SLOT_HELM, "Helm"}, {ITEM_SLOT_BELT, "Belt"}, {ITEM_SLOT_CLOAK, "Cloak"}, {ITEM_SLOT_GAUNTLETS, "Gauntlets"}, {ITEM_SLOT_BOOTS, "Boots"}, {ITEM_SLOT_AMULET, "Amulet"}, {ITEM_SLOT_RING_1, "Ring 1"}, {ITEM_SLOT_RING_2, "Ring 2"}, {ITEM_SLOT_RING_3, "Ring 3"}, {ITEM_SLOT_RING_4, "Ring 4"}, {ITEM_SLOT_RING_5, "Ring 5"}, {ITEM_SLOT_RING_6, "Ring 6"} };

		STRING_TO_ENUM_ITEM_SLOT = invertMap(ENUM_TO_STRING_ITEM_SLOT);

		detail::callbackItemSlotInitialize();

	}

	void makeEnumItemSlot_7()
	{
		ITEM_SLOT_EXTRA_HAND = 0;
		ITEM_SLOT_MAIN_HAND = 1;
		ITEM_SLOT_BOW = 2;
		ITEM_SLOT_ARMOR = 3;
		ITEM_SLOT_HELM = 4;
		ITEM_SLOT_BELT = 5;
		ITEM_SLOT_CLOAK = 6;
		ITEM_SLOT_GAUNTLETS = 7;
		ITEM_SLOT_BOOTS = 8;
		ITEM_SLOT_AMULET = 9;
		ITEM_SLOT_RING_1 = 10;
		ITEM_SLOT_RING_2 = 11;
		ITEM_SLOT_RING_3 = 12;
		ITEM_SLOT_RING_4 = 13;
		ITEM_SLOT_RING_5 = 14;
		ITEM_SLOT_RING_6 = 15;

		ITEM_SLOT_ALL = { ITEM_SLOT_EXTRA_HAND, ITEM_SLOT_MAIN_HAND, ITEM_SLOT_BOW, ITEM_SLOT_ARMOR, ITEM_SLOT_HELM, ITEM_SLOT_BELT, ITEM_SLOT_CLOAK, ITEM_SLOT_GAUNTLETS, ITEM_SLOT_BOOTS, ITEM_SLOT_AMULET, ITEM_SLOT_RING_1, ITEM_SLOT_RING_2, ITEM_SLOT_RING_3, ITEM_SLOT_RING_4, ITEM_SLOT_RING_5, ITEM_SLOT_RING_6 };

		ENUM_TO_STRING_ITEM_SLOT = { {ITEM_SLOT_EXTRA_HAND, "Extra hand"}, {ITEM_SLOT_MAIN_HAND, "Main hand"}, {ITEM_SLOT_BOW, "Bow"}, {ITEM_SLOT_ARMOR, "Armor"}, {ITEM_SLOT_HELM, "Helm"}, {ITEM_SLOT_BELT, "Belt"}, {ITEM_SLOT_CLOAK, "Cloak"}, {ITEM_SLOT_GAUNTLETS, "Gauntlets"}, {ITEM_SLOT_BOOTS, "Boots"}, {ITEM_SLOT_AMULET, "Amulet"}, {ITEM_SLOT_RING_1, "Ring 1"}, {ITEM_SLOT_RING_2, "Ring 2"}, {ITEM_SLOT_RING_3, "Ring 3"}, {ITEM_SLOT_RING_4, "Ring 4"}, {ITEM_SLOT_RING_5, "Ring 5"}, {ITEM_SLOT_RING_6, "Ring 6"} };

		STRING_TO_ENUM_ITEM_SLOT = invertMap(ENUM_TO_STRING_ITEM_SLOT);

		detail::callbackItemSlotInitialize();

	}

	void makeEnumItemSlot_8()
	{
		ITEM_SLOT_EXTRA_HAND = 0;
		ITEM_SLOT_MAIN_HAND = 1;
		ITEM_SLOT_BOW = 2;
		ITEM_SLOT_ARMOR = 3;
		ITEM_SLOT_HELM = 4;
		ITEM_SLOT_BELT = 5;
		ITEM_SLOT_CLOAK = 6;
		ITEM_SLOT_GAUNTLETS = 7;
		ITEM_SLOT_BOOTS = 8;
		ITEM_SLOT_AMULET = 9;
		ITEM_SLOT_RING_1 = 10;
		ITEM_SLOT_RING_2 = 11;
		ITEM_SLOT_RING_3 = 12;
		ITEM_SLOT_RING_4 = 13;
		ITEM_SLOT_RING_5 = 14;
		ITEM_SLOT_RING_6 = 15;

		ITEM_SLOT_ALL = { ITEM_SLOT_EXTRA_HAND, ITEM_SLOT_MAIN_HAND, ITEM_SLOT_BOW, ITEM_SLOT_ARMOR, ITEM_SLOT_HELM, ITEM_SLOT_BELT, ITEM_SLOT_CLOAK, ITEM_SLOT_GAUNTLETS, ITEM_SLOT_BOOTS, ITEM_SLOT_AMULET, ITEM_SLOT_RING_1, ITEM_SLOT_RING_2, ITEM_SLOT_RING_3, ITEM_SLOT_RING_4, ITEM_SLOT_RING_5, ITEM_SLOT_RING_6 };

		ENUM_TO_STRING_ITEM_SLOT = { {ITEM_SLOT_EXTRA_HAND, "Extra hand"}, {ITEM_SLOT_MAIN_HAND, "Main hand"}, {ITEM_SLOT_BOW, "Bow"}, {ITEM_SLOT_ARMOR, "Armor"}, {ITEM_SLOT_HELM, "Helm"}, {ITEM_SLOT_BELT, "Belt"}, {ITEM_SLOT_CLOAK, "Cloak"}, {ITEM_SLOT_GAUNTLETS, "Gauntlets"}, {ITEM_SLOT_BOOTS, "Boots"}, {ITEM_SLOT_AMULET, "Amulet"}, {ITEM_SLOT_RING_1, "Ring 1"}, {ITEM_SLOT_RING_2, "Ring 2"}, {ITEM_SLOT_RING_3, "Ring 3"}, {ITEM_SLOT_RING_4, "Ring 4"}, {ITEM_SLOT_RING_5, "Ring 5"}, {ITEM_SLOT_RING_6, "Ring 6"} };

		STRING_TO_ENUM_ITEM_SLOT = invertMap(ENUM_TO_STRING_ITEM_SLOT);

		detail::callbackItemSlotInitialize();

	}

bool checkItemSlotValidity(int64_t value)
{
	return detail::checkValidValue(ITEM_SLOT_ALL, value, detail::callbackCheckItemSlotValidity);
}


	// PlayerBuff //

	int64_t 
		PLAYER_BUFF_BLESS = INVALID_ID,
		PLAYER_BUFF_HEROISM = INVALID_ID,
		PLAYER_BUFF_HASTE = INVALID_ID,
		PLAYER_BUFF_SHIELD = INVALID_ID,
		PLAYER_BUFF_STONESKIN = INVALID_ID,
		PLAYER_BUFF_TEMP_LUCK = INVALID_ID,
		PLAYER_BUFF_TEMP_INTELLECT = INVALID_ID,
		PLAYER_BUFF_TEMP_PERSONALITY = INVALID_ID,
		PLAYER_BUFF_TEMP_ACCURACY = INVALID_ID,
		PLAYER_BUFF_TEMP_SPEED = INVALID_ID,
		PLAYER_BUFF_TEMP_MIGHT = INVALID_ID,
		PLAYER_BUFF_TEMP_ENDURANCY = INVALID_ID,
		PLAYER_BUFF_AIR_RESISTANCE = INVALID_ID,
		PLAYER_BUFF_BODY_RESISTANCE = INVALID_ID,
		PLAYER_BUFF_EARTH_RESISTANCE = INVALID_ID,
		PLAYER_BUFF_FATE = INVALID_ID,
		PLAYER_BUFF_FIRE_RESISTANCE = INVALID_ID,
		PLAYER_BUFF_HAMMERHANDS = INVALID_ID,
		PLAYER_BUFF_MIND_RESISTANCE = INVALID_ID,
		PLAYER_BUFF_PAIN_REFLECTION = INVALID_ID,
		PLAYER_BUFF_PRESERVATION = INVALID_ID,
		PLAYER_BUFF_REGENERATION = INVALID_ID,
		PLAYER_BUFF_TEMP_ENDURANCE = INVALID_ID,
		PLAYER_BUFF_WATER_RESISTANCE = INVALID_ID,
		PLAYER_BUFF_WATER_BREATHING = INVALID_ID,
		PLAYER_BUFF_GLAMOUR = INVALID_ID,
		PLAYER_BUFF_LEVITATE = INVALID_ID,
		PLAYER_BUFF_MISFORM = INVALID_ID;

	std::vector<int64_t> PLAYER_BUFF_ALL;
	std::map<int64_t, std::string> ENUM_TO_STRING_PLAYER_BUFF;
	std::map<std::string, int64_t> STRING_TO_ENUM_PLAYER_BUFF;

	void makeEnumPlayerBuff_6()
	{
		PLAYER_BUFF_BLESS = 0;
		PLAYER_BUFF_HEROISM = 1;
		PLAYER_BUFF_HASTE = 2;
		PLAYER_BUFF_SHIELD = 3;
		PLAYER_BUFF_STONESKIN = 4;
		PLAYER_BUFF_TEMP_LUCK = 5;
		PLAYER_BUFF_TEMP_INTELLECT = 6;
		PLAYER_BUFF_TEMP_PERSONALITY = 7;
		PLAYER_BUFF_TEMP_ACCURACY = 8;
		PLAYER_BUFF_TEMP_SPEED = 9;
		PLAYER_BUFF_TEMP_MIGHT = 10;
		PLAYER_BUFF_TEMP_ENDURANCY = 11;

		PLAYER_BUFF_ALL = { PLAYER_BUFF_BLESS, PLAYER_BUFF_HEROISM, PLAYER_BUFF_HASTE, PLAYER_BUFF_SHIELD, PLAYER_BUFF_STONESKIN, PLAYER_BUFF_TEMP_LUCK, PLAYER_BUFF_TEMP_INTELLECT, PLAYER_BUFF_TEMP_PERSONALITY, PLAYER_BUFF_TEMP_ACCURACY, PLAYER_BUFF_TEMP_SPEED, PLAYER_BUFF_TEMP_MIGHT, PLAYER_BUFF_TEMP_ENDURANCY };

		ENUM_TO_STRING_PLAYER_BUFF = { {PLAYER_BUFF_BLESS, "Bless"}, {PLAYER_BUFF_HEROISM, "Heroism"}, {PLAYER_BUFF_HASTE, "Haste"}, {PLAYER_BUFF_SHIELD, "Shield"}, {PLAYER_BUFF_STONESKIN, "Stoneskin"}, {PLAYER_BUFF_TEMP_LUCK, "Temp luck"}, {PLAYER_BUFF_TEMP_INTELLECT, "Temp intellect"}, {PLAYER_BUFF_TEMP_PERSONALITY, "Temp personality"}, {PLAYER_BUFF_TEMP_ACCURACY, "Temp accuracy"}, {PLAYER_BUFF_TEMP_SPEED, "Temp speed"}, {PLAYER_BUFF_TEMP_MIGHT, "Temp might"}, {PLAYER_BUFF_TEMP_ENDURANCY, "Temp endurancy"} };

		STRING_TO_ENUM_PLAYER_BUFF = invertMap(ENUM_TO_STRING_PLAYER_BUFF);

		detail::callbackPlayerBuffInitialize();

	}

	void makeEnumPlayerBuff_7()
	{
		PLAYER_BUFF_AIR_RESISTANCE = 0;
		PLAYER_BUFF_BLESS = 1;
		PLAYER_BUFF_BODY_RESISTANCE = 2;
		PLAYER_BUFF_EARTH_RESISTANCE = 3;
		PLAYER_BUFF_FATE = 4;
		PLAYER_BUFF_FIRE_RESISTANCE = 5;
		PLAYER_BUFF_HAMMERHANDS = 6;
		PLAYER_BUFF_HASTE = 7;
		PLAYER_BUFF_HEROISM = 8;
		PLAYER_BUFF_MIND_RESISTANCE = 9;
		PLAYER_BUFF_PAIN_REFLECTION = 10;
		PLAYER_BUFF_PRESERVATION = 11;
		PLAYER_BUFF_REGENERATION = 12;
		PLAYER_BUFF_SHIELD = 13;
		PLAYER_BUFF_STONESKIN = 14;
		PLAYER_BUFF_TEMP_ACCURACY = 15;
		PLAYER_BUFF_TEMP_ENDURANCE = 16;
		PLAYER_BUFF_TEMP_INTELLECT = 17;
		PLAYER_BUFF_TEMP_LUCK = 18;
		PLAYER_BUFF_TEMP_MIGHT = 19;
		PLAYER_BUFF_TEMP_PERSONALITY = 20;
		PLAYER_BUFF_TEMP_SPEED = 21;
		PLAYER_BUFF_WATER_RESISTANCE = 22;
		PLAYER_BUFF_WATER_BREATHING = 23;

		PLAYER_BUFF_ALL = { PLAYER_BUFF_AIR_RESISTANCE, PLAYER_BUFF_BLESS, PLAYER_BUFF_BODY_RESISTANCE, PLAYER_BUFF_EARTH_RESISTANCE, PLAYER_BUFF_FATE, PLAYER_BUFF_FIRE_RESISTANCE, PLAYER_BUFF_HAMMERHANDS, PLAYER_BUFF_HASTE, PLAYER_BUFF_HEROISM, PLAYER_BUFF_MIND_RESISTANCE, PLAYER_BUFF_PAIN_REFLECTION, PLAYER_BUFF_PRESERVATION, PLAYER_BUFF_REGENERATION, PLAYER_BUFF_SHIELD, PLAYER_BUFF_STONESKIN, PLAYER_BUFF_TEMP_ACCURACY, PLAYER_BUFF_TEMP_ENDURANCE, PLAYER_BUFF_TEMP_INTELLECT, PLAYER_BUFF_TEMP_LUCK, PLAYER_BUFF_TEMP_MIGHT, PLAYER_BUFF_TEMP_PERSONALITY, PLAYER_BUFF_TEMP_SPEED, PLAYER_BUFF_WATER_RESISTANCE, PLAYER_BUFF_WATER_BREATHING };

		ENUM_TO_STRING_PLAYER_BUFF = { {PLAYER_BUFF_AIR_RESISTANCE, "Air resistance"}, {PLAYER_BUFF_BLESS, "Bless"}, {PLAYER_BUFF_BODY_RESISTANCE, "Body resistance"}, {PLAYER_BUFF_EARTH_RESISTANCE, "Earth resistance"}, {PLAYER_BUFF_FATE, "Fate"}, {PLAYER_BUFF_FIRE_RESISTANCE, "Fire resistance"}, {PLAYER_BUFF_HAMMERHANDS, "Hammerhands"}, {PLAYER_BUFF_HASTE, "Haste"}, {PLAYER_BUFF_HEROISM, "Heroism"}, {PLAYER_BUFF_MIND_RESISTANCE, "Mind resistance"}, {PLAYER_BUFF_PAIN_REFLECTION, "Pain reflection"}, {PLAYER_BUFF_PRESERVATION, "Preservation"}, {PLAYER_BUFF_REGENERATION, "Regeneration"}, {PLAYER_BUFF_SHIELD, "Shield"}, {PLAYER_BUFF_STONESKIN, "Stoneskin"}, {PLAYER_BUFF_TEMP_ACCURACY, "Temp accuracy"}, {PLAYER_BUFF_TEMP_ENDURANCE, "Temp endurance"}, {PLAYER_BUFF_TEMP_INTELLECT, "Temp intellect"}, {PLAYER_BUFF_TEMP_LUCK, "Temp luck"}, {PLAYER_BUFF_TEMP_MIGHT, "Temp might"}, {PLAYER_BUFF_TEMP_PERSONALITY, "Temp personality"}, {PLAYER_BUFF_TEMP_SPEED, "Temp speed"}, {PLAYER_BUFF_WATER_RESISTANCE, "Water resistance"}, {PLAYER_BUFF_WATER_BREATHING, "Water breathing"} };

		STRING_TO_ENUM_PLAYER_BUFF = invertMap(ENUM_TO_STRING_PLAYER_BUFF);

		detail::callbackPlayerBuffInitialize();

	}

	void makeEnumPlayerBuff_8()
	{
		PLAYER_BUFF_AIR_RESISTANCE = 0;
		PLAYER_BUFF_BLESS = 1;
		PLAYER_BUFF_BODY_RESISTANCE = 2;
		PLAYER_BUFF_EARTH_RESISTANCE = 3;
		PLAYER_BUFF_FATE = 4;
		PLAYER_BUFF_FIRE_RESISTANCE = 5;
		PLAYER_BUFF_HAMMERHANDS = 6;
		PLAYER_BUFF_HASTE = 7;
		PLAYER_BUFF_HEROISM = 8;
		PLAYER_BUFF_MIND_RESISTANCE = 9;
		PLAYER_BUFF_PAIN_REFLECTION = 10;
		PLAYER_BUFF_PRESERVATION = 11;
		PLAYER_BUFF_REGENERATION = 12;
		PLAYER_BUFF_SHIELD = 13;
		PLAYER_BUFF_STONESKIN = 14;
		PLAYER_BUFF_TEMP_ACCURACY = 15;
		PLAYER_BUFF_TEMP_ENDURANCE = 16;
		PLAYER_BUFF_TEMP_INTELLECT = 17;
		PLAYER_BUFF_TEMP_LUCK = 18;
		PLAYER_BUFF_TEMP_MIGHT = 19;
		PLAYER_BUFF_TEMP_PERSONALITY = 20;
		PLAYER_BUFF_TEMP_SPEED = 21;
		PLAYER_BUFF_WATER_RESISTANCE = 22;
		PLAYER_BUFF_WATER_BREATHING = 23;
		PLAYER_BUFF_GLAMOUR = 24;
		PLAYER_BUFF_LEVITATE = 25;
		PLAYER_BUFF_MISFORM = 26;

		PLAYER_BUFF_ALL = { PLAYER_BUFF_AIR_RESISTANCE, PLAYER_BUFF_BLESS, PLAYER_BUFF_BODY_RESISTANCE, PLAYER_BUFF_EARTH_RESISTANCE, PLAYER_BUFF_FATE, PLAYER_BUFF_FIRE_RESISTANCE, PLAYER_BUFF_HAMMERHANDS, PLAYER_BUFF_HASTE, PLAYER_BUFF_HEROISM, PLAYER_BUFF_MIND_RESISTANCE, PLAYER_BUFF_PAIN_REFLECTION, PLAYER_BUFF_PRESERVATION, PLAYER_BUFF_REGENERATION, PLAYER_BUFF_SHIELD, PLAYER_BUFF_STONESKIN, PLAYER_BUFF_TEMP_ACCURACY, PLAYER_BUFF_TEMP_ENDURANCE, PLAYER_BUFF_TEMP_INTELLECT, PLAYER_BUFF_TEMP_LUCK, PLAYER_BUFF_TEMP_MIGHT, PLAYER_BUFF_TEMP_PERSONALITY, PLAYER_BUFF_TEMP_SPEED, PLAYER_BUFF_WATER_RESISTANCE, PLAYER_BUFF_WATER_BREATHING, PLAYER_BUFF_GLAMOUR, PLAYER_BUFF_LEVITATE, PLAYER_BUFF_MISFORM };

		ENUM_TO_STRING_PLAYER_BUFF = { {PLAYER_BUFF_AIR_RESISTANCE, "Air resistance"}, {PLAYER_BUFF_BLESS, "Bless"}, {PLAYER_BUFF_BODY_RESISTANCE, "Body resistance"}, {PLAYER_BUFF_EARTH_RESISTANCE, "Earth resistance"}, {PLAYER_BUFF_FATE, "Fate"}, {PLAYER_BUFF_FIRE_RESISTANCE, "Fire resistance"}, {PLAYER_BUFF_HAMMERHANDS, "Hammerhands"}, {PLAYER_BUFF_HASTE, "Haste"}, {PLAYER_BUFF_HEROISM, "Heroism"}, {PLAYER_BUFF_MIND_RESISTANCE, "Mind resistance"}, {PLAYER_BUFF_PAIN_REFLECTION, "Pain reflection"}, {PLAYER_BUFF_PRESERVATION, "Preservation"}, {PLAYER_BUFF_REGENERATION, "Regeneration"}, {PLAYER_BUFF_SHIELD, "Shield"}, {PLAYER_BUFF_STONESKIN, "Stoneskin"}, {PLAYER_BUFF_TEMP_ACCURACY, "Temp accuracy"}, {PLAYER_BUFF_TEMP_ENDURANCE, "Temp endurance"}, {PLAYER_BUFF_TEMP_INTELLECT, "Temp intellect"}, {PLAYER_BUFF_TEMP_LUCK, "Temp luck"}, {PLAYER_BUFF_TEMP_MIGHT, "Temp might"}, {PLAYER_BUFF_TEMP_PERSONALITY, "Temp personality"}, {PLAYER_BUFF_TEMP_SPEED, "Temp speed"}, {PLAYER_BUFF_WATER_RESISTANCE, "Water resistance"}, {PLAYER_BUFF_WATER_BREATHING, "Water breathing"}, {PLAYER_BUFF_GLAMOUR, "Glamour"}, {PLAYER_BUFF_LEVITATE, "Levitate"}, {PLAYER_BUFF_MISFORM, "Misform"} };

		STRING_TO_ENUM_PLAYER_BUFF = invertMap(ENUM_TO_STRING_PLAYER_BUFF);

		detail::callbackPlayerBuffInitialize();

	}

bool checkPlayerBuffValidity(int64_t value)
{
	return detail::checkValidValue(PLAYER_BUFF_ALL, value, detail::callbackCheckPlayerBuffValidity);
}


	// PartyBuff //

	int64_t 
		PARTY_BUFF_FIRE_RESISTANCE = INVALID_ID,
		PARTY_BUFF_COLD_RESISTANCE = INVALID_ID,
		PARTY_BUFF_ELEC_RESISTANCE = INVALID_ID,
		PARTY_BUFF_MAGIC_RESISTANCE = INVALID_ID,
		PARTY_BUFF_POISON_RESISTANCE = INVALID_ID,
		PARTY_BUFF_FEATHER_FALL = INVALID_ID,
		PARTY_BUFF_WATER_WALK = INVALID_ID,
		PARTY_BUFF_FLY = INVALID_ID,
		PARTY_BUFF_GUARDIAN_ANGEL = INVALID_ID,
		PARTY_BUFF_WIZARD_EYE = INVALID_ID,
		PARTY_BUFF_TORCH_LIGHT = INVALID_ID,
		PARTY_BUFF_AIR_RESISTANCE = INVALID_ID,
		PARTY_BUFF_BODY_RESISTANCE = INVALID_ID,
		PARTY_BUFF_DAY_OF_GODS = INVALID_ID,
		PARTY_BUFF_DETECT_LIFE = INVALID_ID,
		PARTY_BUFF_EARTH_RESISTANCE = INVALID_ID,
		PARTY_BUFF_HASTE = INVALID_ID,
		PARTY_BUFF_HEROISM = INVALID_ID,
		PARTY_BUFF_IMMOLATION = INVALID_ID,
		PARTY_BUFF_INVISIBILITY = INVALID_ID,
		PARTY_BUFF_MIND_RESISTANCE = INVALID_ID,
		PARTY_BUFF_PROTECTION_FROM_MAGIC = INVALID_ID,
		PARTY_BUFF_SHIELD = INVALID_ID,
		PARTY_BUFF_STONESKIN = INVALID_ID,
		PARTY_BUFF_WATER_RESISTANCE = INVALID_ID;

	std::vector<int64_t> PARTY_BUFF_ALL;
	std::map<int64_t, std::string> ENUM_TO_STRING_PARTY_BUFF;
	std::map<std::string, int64_t> STRING_TO_ENUM_PARTY_BUFF;

	void makeEnumPartyBuff_6()
	{
		PARTY_BUFF_FIRE_RESISTANCE = 0;
		PARTY_BUFF_COLD_RESISTANCE = 1;
		PARTY_BUFF_ELEC_RESISTANCE = 2;
		PARTY_BUFF_MAGIC_RESISTANCE = 3;
		PARTY_BUFF_POISON_RESISTANCE = 4;
		PARTY_BUFF_FEATHER_FALL = 5;
		PARTY_BUFF_WATER_WALK = 6;
		PARTY_BUFF_FLY = 7;
		PARTY_BUFF_GUARDIAN_ANGEL = 8;
		PARTY_BUFF_WIZARD_EYE = 10;
		PARTY_BUFF_TORCH_LIGHT = 11;

		PARTY_BUFF_ALL = { PARTY_BUFF_FIRE_RESISTANCE, PARTY_BUFF_COLD_RESISTANCE, PARTY_BUFF_ELEC_RESISTANCE, PARTY_BUFF_MAGIC_RESISTANCE, PARTY_BUFF_POISON_RESISTANCE, PARTY_BUFF_FEATHER_FALL, PARTY_BUFF_WATER_WALK, PARTY_BUFF_FLY, PARTY_BUFF_GUARDIAN_ANGEL, PARTY_BUFF_WIZARD_EYE, PARTY_BUFF_TORCH_LIGHT };

		ENUM_TO_STRING_PARTY_BUFF = { {PARTY_BUFF_FIRE_RESISTANCE, "Fire resistance"}, {PARTY_BUFF_COLD_RESISTANCE, "Cold resistance"}, {PARTY_BUFF_ELEC_RESISTANCE, "Elec resistance"}, {PARTY_BUFF_MAGIC_RESISTANCE, "Magic resistance"}, {PARTY_BUFF_POISON_RESISTANCE, "Poison resistance"}, {PARTY_BUFF_FEATHER_FALL, "Feather fall"}, {PARTY_BUFF_WATER_WALK, "Water walk"}, {PARTY_BUFF_FLY, "Fly"}, {PARTY_BUFF_GUARDIAN_ANGEL, "Guardian angel"}, {PARTY_BUFF_WIZARD_EYE, "Wizard eye"}, {PARTY_BUFF_TORCH_LIGHT, "Torch light"} };

		STRING_TO_ENUM_PARTY_BUFF = invertMap(ENUM_TO_STRING_PARTY_BUFF);

		detail::callbackPartyBuffInitialize();

	}

	void makeEnumPartyBuff_7()
	{
		PARTY_BUFF_AIR_RESISTANCE = 0;
		PARTY_BUFF_BODY_RESISTANCE = 1;
		PARTY_BUFF_DAY_OF_GODS = 2;
		PARTY_BUFF_DETECT_LIFE = 3;
		PARTY_BUFF_EARTH_RESISTANCE = 4;
		PARTY_BUFF_FEATHER_FALL = 5;
		PARTY_BUFF_FIRE_RESISTANCE = 6;
		PARTY_BUFF_FLY = 7;
		PARTY_BUFF_HASTE = 8;
		PARTY_BUFF_HEROISM = 9;
		PARTY_BUFF_IMMOLATION = 10;
		PARTY_BUFF_INVISIBILITY = 11;
		PARTY_BUFF_MIND_RESISTANCE = 12;
		PARTY_BUFF_PROTECTION_FROM_MAGIC = 13;
		PARTY_BUFF_SHIELD = 14;
		PARTY_BUFF_STONESKIN = 15;
		PARTY_BUFF_TORCH_LIGHT = 16;
		PARTY_BUFF_WATER_RESISTANCE = 17;
		PARTY_BUFF_WATER_WALK = 18;
		PARTY_BUFF_WIZARD_EYE = 19;

		PARTY_BUFF_ALL = { PARTY_BUFF_AIR_RESISTANCE, PARTY_BUFF_BODY_RESISTANCE, PARTY_BUFF_DAY_OF_GODS, PARTY_BUFF_DETECT_LIFE, PARTY_BUFF_EARTH_RESISTANCE, PARTY_BUFF_FEATHER_FALL, PARTY_BUFF_FIRE_RESISTANCE, PARTY_BUFF_FLY, PARTY_BUFF_HASTE, PARTY_BUFF_HEROISM, PARTY_BUFF_IMMOLATION, PARTY_BUFF_INVISIBILITY, PARTY_BUFF_MIND_RESISTANCE, PARTY_BUFF_PROTECTION_FROM_MAGIC, PARTY_BUFF_SHIELD, PARTY_BUFF_STONESKIN, PARTY_BUFF_TORCH_LIGHT, PARTY_BUFF_WATER_RESISTANCE, PARTY_BUFF_WATER_WALK, PARTY_BUFF_WIZARD_EYE };

		ENUM_TO_STRING_PARTY_BUFF = { {PARTY_BUFF_AIR_RESISTANCE, "Air resistance"}, {PARTY_BUFF_BODY_RESISTANCE, "Body resistance"}, {PARTY_BUFF_DAY_OF_GODS, "Day of gods"}, {PARTY_BUFF_DETECT_LIFE, "Detect life"}, {PARTY_BUFF_EARTH_RESISTANCE, "Earth resistance"}, {PARTY_BUFF_FEATHER_FALL, "Feather fall"}, {PARTY_BUFF_FIRE_RESISTANCE, "Fire resistance"}, {PARTY_BUFF_FLY, "Fly"}, {PARTY_BUFF_HASTE, "Haste"}, {PARTY_BUFF_HEROISM, "Heroism"}, {PARTY_BUFF_IMMOLATION, "Immolation"}, {PARTY_BUFF_INVISIBILITY, "Invisibility"}, {PARTY_BUFF_MIND_RESISTANCE, "Mind resistance"}, {PARTY_BUFF_PROTECTION_FROM_MAGIC, "Protection from magic"}, {PARTY_BUFF_SHIELD, "Shield"}, {PARTY_BUFF_STONESKIN, "Stoneskin"}, {PARTY_BUFF_TORCH_LIGHT, "Torch light"}, {PARTY_BUFF_WATER_RESISTANCE, "Water resistance"}, {PARTY_BUFF_WATER_WALK, "Water walk"}, {PARTY_BUFF_WIZARD_EYE, "Wizard eye"} };

		STRING_TO_ENUM_PARTY_BUFF = invertMap(ENUM_TO_STRING_PARTY_BUFF);

		detail::callbackPartyBuffInitialize();

	}

	void makeEnumPartyBuff_8()
	{
		PARTY_BUFF_AIR_RESISTANCE = 0;
		PARTY_BUFF_BODY_RESISTANCE = 1;
		PARTY_BUFF_DAY_OF_GODS = 2;
		PARTY_BUFF_DETECT_LIFE = 3;
		PARTY_BUFF_EARTH_RESISTANCE = 4;
		PARTY_BUFF_FEATHER_FALL = 5;
		PARTY_BUFF_FIRE_RESISTANCE = 6;
		PARTY_BUFF_FLY = 7;
		PARTY_BUFF_HASTE = 8;
		PARTY_BUFF_HEROISM = 9;
		PARTY_BUFF_IMMOLATION = 10;
		PARTY_BUFF_INVISIBILITY = 11;
		PARTY_BUFF_MIND_RESISTANCE = 12;
		PARTY_BUFF_PROTECTION_FROM_MAGIC = 13;
		PARTY_BUFF_SHIELD = 14;
		PARTY_BUFF_STONESKIN = 15;
		PARTY_BUFF_TORCH_LIGHT = 16;
		PARTY_BUFF_WATER_RESISTANCE = 17;
		PARTY_BUFF_WATER_WALK = 18;
		PARTY_BUFF_WIZARD_EYE = 19;

		PARTY_BUFF_ALL = { PARTY_BUFF_AIR_RESISTANCE, PARTY_BUFF_BODY_RESISTANCE, PARTY_BUFF_DAY_OF_GODS, PARTY_BUFF_DETECT_LIFE, PARTY_BUFF_EARTH_RESISTANCE, PARTY_BUFF_FEATHER_FALL, PARTY_BUFF_FIRE_RESISTANCE, PARTY_BUFF_FLY, PARTY_BUFF_HASTE, PARTY_BUFF_HEROISM, PARTY_BUFF_IMMOLATION, PARTY_BUFF_INVISIBILITY, PARTY_BUFF_MIND_RESISTANCE, PARTY_BUFF_PROTECTION_FROM_MAGIC, PARTY_BUFF_SHIELD, PARTY_BUFF_STONESKIN, PARTY_BUFF_TORCH_LIGHT, PARTY_BUFF_WATER_RESISTANCE, PARTY_BUFF_WATER_WALK, PARTY_BUFF_WIZARD_EYE };

		ENUM_TO_STRING_PARTY_BUFF = { {PARTY_BUFF_AIR_RESISTANCE, "Air resistance"}, {PARTY_BUFF_BODY_RESISTANCE, "Body resistance"}, {PARTY_BUFF_DAY_OF_GODS, "Day of gods"}, {PARTY_BUFF_DETECT_LIFE, "Detect life"}, {PARTY_BUFF_EARTH_RESISTANCE, "Earth resistance"}, {PARTY_BUFF_FEATHER_FALL, "Feather fall"}, {PARTY_BUFF_FIRE_RESISTANCE, "Fire resistance"}, {PARTY_BUFF_FLY, "Fly"}, {PARTY_BUFF_HASTE, "Haste"}, {PARTY_BUFF_HEROISM, "Heroism"}, {PARTY_BUFF_IMMOLATION, "Immolation"}, {PARTY_BUFF_INVISIBILITY, "Invisibility"}, {PARTY_BUFF_MIND_RESISTANCE, "Mind resistance"}, {PARTY_BUFF_PROTECTION_FROM_MAGIC, "Protection from magic"}, {PARTY_BUFF_SHIELD, "Shield"}, {PARTY_BUFF_STONESKIN, "Stoneskin"}, {PARTY_BUFF_TORCH_LIGHT, "Torch light"}, {PARTY_BUFF_WATER_RESISTANCE, "Water resistance"}, {PARTY_BUFF_WATER_WALK, "Water walk"}, {PARTY_BUFF_WIZARD_EYE, "Wizard eye"} };

		STRING_TO_ENUM_PARTY_BUFF = invertMap(ENUM_TO_STRING_PARTY_BUFF);

		detail::callbackPartyBuffInitialize();

	}

bool checkPartyBuffValidity(int64_t value)
{
	return detail::checkValidValue(PARTY_BUFF_ALL, value, detail::callbackCheckPartyBuffValidity);
}


	// MonsterBits //

	int64_t 
		MON_BIT_ACTIVE = INVALID_ID,
		MON_BIT_SHOW_ON_MAP = INVALID_ID,
		MON_BIT_INVISIBLE = INVALID_ID,
		MON_BIT_NO_FLEE = INVALID_ID,
		MON_BIT_HOSTILE = INVALID_ID,
		MON_BIT_ON_ALERT_MAP = INVALID_ID,
		MON_BIT_TREASURE_GENERATED = INVALID_ID,
		MON_BIT_SHOW_AS_HOSTILE = INVALID_ID,
		MON_BIT_IS_OBELISK_CHEST = INVALID_ID;

	std::vector<int64_t> MONSTER_BITS_ALL;
	std::map<int64_t, std::string> ENUM_TO_STRING_MONSTER_BITS;
	std::map<std::string, int64_t> STRING_TO_ENUM_MONSTER_BITS;

	void makeEnumMonsterBits_6()
	{
		MON_BIT_ACTIVE = 1024;
		MON_BIT_SHOW_ON_MAP = 32768;
		MON_BIT_INVISIBLE = 65536;
		MON_BIT_NO_FLEE = 131072;
		MON_BIT_HOSTILE = 524288;
		MON_BIT_ON_ALERT_MAP = 1048576;
		MON_BIT_TREASURE_GENERATED = 8388608;
		MON_BIT_SHOW_AS_HOSTILE = 16777216;

		MONSTER_BITS_ALL = { MON_BIT_ACTIVE, MON_BIT_SHOW_ON_MAP, MON_BIT_INVISIBLE, MON_BIT_NO_FLEE, MON_BIT_HOSTILE, MON_BIT_ON_ALERT_MAP, MON_BIT_TREASURE_GENERATED, MON_BIT_SHOW_AS_HOSTILE };

		ENUM_TO_STRING_MONSTER_BITS = { {MON_BIT_ACTIVE, "Active"}, {MON_BIT_SHOW_ON_MAP, "Show on map"}, {MON_BIT_INVISIBLE, "Invisible"}, {MON_BIT_NO_FLEE, "No flee"}, {MON_BIT_HOSTILE, "Hostile"}, {MON_BIT_ON_ALERT_MAP, "On alert map"}, {MON_BIT_TREASURE_GENERATED, "Treasure generated"}, {MON_BIT_SHOW_AS_HOSTILE, "Show as hostile"} };

		STRING_TO_ENUM_MONSTER_BITS = invertMap(ENUM_TO_STRING_MONSTER_BITS);

		detail::callbackMonsterBitsInitialize();

	}

	void makeEnumMonsterBits_7()
	{
		MON_BIT_ACTIVE = 1024;
		MON_BIT_SHOW_ON_MAP = 32768;
		MON_BIT_INVISIBLE = 65536;
		MON_BIT_NO_FLEE = 131072;
		MON_BIT_HOSTILE = 524288;
		MON_BIT_ON_ALERT_MAP = 1048576;
		MON_BIT_TREASURE_GENERATED = 8388608;
		MON_BIT_SHOW_AS_HOSTILE = 16777216;

		MONSTER_BITS_ALL = { MON_BIT_ACTIVE, MON_BIT_SHOW_ON_MAP, MON_BIT_INVISIBLE, MON_BIT_NO_FLEE, MON_BIT_HOSTILE, MON_BIT_ON_ALERT_MAP, MON_BIT_TREASURE_GENERATED, MON_BIT_SHOW_AS_HOSTILE };

		ENUM_TO_STRING_MONSTER_BITS = { {MON_BIT_ACTIVE, "Active"}, {MON_BIT_SHOW_ON_MAP, "Show on map"}, {MON_BIT_INVISIBLE, "Invisible"}, {MON_BIT_NO_FLEE, "No flee"}, {MON_BIT_HOSTILE, "Hostile"}, {MON_BIT_ON_ALERT_MAP, "On alert map"}, {MON_BIT_TREASURE_GENERATED, "Treasure generated"}, {MON_BIT_SHOW_AS_HOSTILE, "Show as hostile"} };

		STRING_TO_ENUM_MONSTER_BITS = invertMap(ENUM_TO_STRING_MONSTER_BITS);

		detail::callbackMonsterBitsInitialize();

	}

	void makeEnumMonsterBits_8()
	{
		MON_BIT_ACTIVE = 1024;
		MON_BIT_SHOW_ON_MAP = 32768;
		MON_BIT_INVISIBLE = 65536;
		MON_BIT_NO_FLEE = 131072;
		MON_BIT_HOSTILE = 524288;
		MON_BIT_ON_ALERT_MAP = 1048576;
		MON_BIT_TREASURE_GENERATED = 8388608;
		MON_BIT_SHOW_AS_HOSTILE = 16777216;
		MON_BIT_IS_OBELISK_CHEST = 33554432;

		MONSTER_BITS_ALL = { MON_BIT_ACTIVE, MON_BIT_SHOW_ON_MAP, MON_BIT_INVISIBLE, MON_BIT_NO_FLEE, MON_BIT_HOSTILE, MON_BIT_ON_ALERT_MAP, MON_BIT_TREASURE_GENERATED, MON_BIT_SHOW_AS_HOSTILE, MON_BIT_IS_OBELISK_CHEST };

		ENUM_TO_STRING_MONSTER_BITS = { {MON_BIT_ACTIVE, "Active"}, {MON_BIT_SHOW_ON_MAP, "Show on map"}, {MON_BIT_INVISIBLE, "Invisible"}, {MON_BIT_NO_FLEE, "No flee"}, {MON_BIT_HOSTILE, "Hostile"}, {MON_BIT_ON_ALERT_MAP, "On alert map"}, {MON_BIT_TREASURE_GENERATED, "Treasure generated"}, {MON_BIT_SHOW_AS_HOSTILE, "Show as hostile"}, {MON_BIT_IS_OBELISK_CHEST, "Is obelisk chest"} };

		STRING_TO_ENUM_MONSTER_BITS = invertMap(ENUM_TO_STRING_MONSTER_BITS);

		detail::callbackMonsterBitsInitialize();

	}

bool checkMonsterBitsValidity(int64_t value)
{
	return detail::checkValidValue(MONSTER_BITS_ALL, value, detail::callbackCheckMonsterBitsValidity);
}


	// MonsterBuff //

	int64_t 
		MON_BUFF_NULL = INVALID_ID,
		MON_BUFF_CHARM = INVALID_ID,
		MON_BUFF_CURSE = INVALID_ID,
		MON_BUFF_SHRINKING_RAY = INVALID_ID,
		MON_BUFF_FEAR = INVALID_ID,
		MON_BUFF_STONED = INVALID_ID,
		MON_BUFF_PARALYZE = INVALID_ID,
		MON_BUFF_SLOW = INVALID_ID,
		MON_BUFF_FEEBLEMIND = INVALID_ID,
		MON_BUFF_SUMMONED = INVALID_ID,
		MON_BUFF_ARMOR_HALVED = INVALID_ID,
		MON_BUFF_BERSERK = INVALID_ID,
		MON_BUFF_MASS_DISTORTION = INVALID_ID,
		MON_BUFF_FATE = INVALID_ID,
		MON_BUFF_ENSLAVE = INVALID_ID,
		MON_BUFF_DAY_OF_PROTECTION = INVALID_ID,
		MON_BUFF_HOUR_OF_POWER = INVALID_ID,
		MON_BUFF_SHIELD = INVALID_ID,
		MON_BUFF_STONE_SKIN = INVALID_ID,
		MON_BUFF_BLESS = INVALID_ID,
		MON_BUFF_HEROISM = INVALID_ID,
		MON_BUFF_HASTE = INVALID_ID,
		MON_BUFF_PAIN_REFLECTION = INVALID_ID,
		MON_BUFF_HAMMERHANDS = INVALID_ID,
		MON_BUFF_MELEE_ONLY = INVALID_ID,
		MON_BUFF_DAMAGE_HALVED = INVALID_ID,
		MON_BUFF_WANDER = INVALID_ID,
		MON_BUFF_MISTFORM = INVALID_ID;

	std::vector<int64_t> MONSTER_BUFF_ALL;
	std::map<int64_t, std::string> ENUM_TO_STRING_MONSTER_BUFF;
	std::map<std::string, int64_t> STRING_TO_ENUM_MONSTER_BUFF;

	void makeEnumMonsterBuff_6()
	{
		MON_BUFF_NULL = 0;
		MON_BUFF_CHARM = 1;
		MON_BUFF_CURSE = 2;
		MON_BUFF_SHRINKING_RAY = 3;
		MON_BUFF_FEAR = 4;
		MON_BUFF_STONED = 5;
		MON_BUFF_PARALYZE = 6;
		MON_BUFF_SLOW = 7;
		MON_BUFF_FEEBLEMIND = 8;

		MONSTER_BUFF_ALL = { MON_BUFF_NULL, MON_BUFF_CHARM, MON_BUFF_CURSE, MON_BUFF_SHRINKING_RAY, MON_BUFF_FEAR, MON_BUFF_STONED, MON_BUFF_PARALYZE, MON_BUFF_SLOW, MON_BUFF_FEEBLEMIND };

		ENUM_TO_STRING_MONSTER_BUFF = { {MON_BUFF_NULL, "Null"}, {MON_BUFF_CHARM, "Charm"}, {MON_BUFF_CURSE, "Curse"}, {MON_BUFF_SHRINKING_RAY, "Shrinking ray"}, {MON_BUFF_FEAR, "Fear"}, {MON_BUFF_STONED, "Stoned"}, {MON_BUFF_PARALYZE, "Paralyze"}, {MON_BUFF_SLOW, "Slow"}, {MON_BUFF_FEEBLEMIND, "Feeblemind"} };

		STRING_TO_ENUM_MONSTER_BUFF = invertMap(ENUM_TO_STRING_MONSTER_BUFF);

		detail::callbackMonsterBuffInitialize();

	}

	void makeEnumMonsterBuff_7()
	{
		MON_BUFF_NULL = 0;
		MON_BUFF_CHARM = 1;
		MON_BUFF_SUMMONED = 2;
		MON_BUFF_SHRINKING_RAY = 3;
		MON_BUFF_FEAR = 4;
		MON_BUFF_STONED = 5;
		MON_BUFF_PARALYZE = 6;
		MON_BUFF_SLOW = 7;
		MON_BUFF_ARMOR_HALVED = 8;
		MON_BUFF_BERSERK = 9;
		MON_BUFF_MASS_DISTORTION = 10;
		MON_BUFF_FATE = 11;
		MON_BUFF_ENSLAVE = 12;
		MON_BUFF_DAY_OF_PROTECTION = 13;
		MON_BUFF_HOUR_OF_POWER = 14;
		MON_BUFF_SHIELD = 15;
		MON_BUFF_STONE_SKIN = 16;
		MON_BUFF_BLESS = 17;
		MON_BUFF_HEROISM = 18;
		MON_BUFF_HASTE = 19;
		MON_BUFF_PAIN_REFLECTION = 20;
		MON_BUFF_HAMMERHANDS = 21;

		MONSTER_BUFF_ALL = { MON_BUFF_NULL, MON_BUFF_CHARM, MON_BUFF_SUMMONED, MON_BUFF_SHRINKING_RAY, MON_BUFF_FEAR, MON_BUFF_STONED, MON_BUFF_PARALYZE, MON_BUFF_SLOW, MON_BUFF_ARMOR_HALVED, MON_BUFF_BERSERK, MON_BUFF_MASS_DISTORTION, MON_BUFF_FATE, MON_BUFF_ENSLAVE, MON_BUFF_DAY_OF_PROTECTION, MON_BUFF_HOUR_OF_POWER, MON_BUFF_SHIELD, MON_BUFF_STONE_SKIN, MON_BUFF_BLESS, MON_BUFF_HEROISM, MON_BUFF_HASTE, MON_BUFF_PAIN_REFLECTION, MON_BUFF_HAMMERHANDS };

		ENUM_TO_STRING_MONSTER_BUFF = { {MON_BUFF_NULL, "Null"}, {MON_BUFF_CHARM, "Charm"}, {MON_BUFF_SUMMONED, "Summoned"}, {MON_BUFF_SHRINKING_RAY, "Shrinking ray"}, {MON_BUFF_FEAR, "Fear"}, {MON_BUFF_STONED, "Stoned"}, {MON_BUFF_PARALYZE, "Paralyze"}, {MON_BUFF_SLOW, "Slow"}, {MON_BUFF_ARMOR_HALVED, "Armor halved"}, {MON_BUFF_BERSERK, "Berserk"}, {MON_BUFF_MASS_DISTORTION, "Mass distortion"}, {MON_BUFF_FATE, "Fate"}, {MON_BUFF_ENSLAVE, "Enslave"}, {MON_BUFF_DAY_OF_PROTECTION, "Day of protection"}, {MON_BUFF_HOUR_OF_POWER, "Hour of power"}, {MON_BUFF_SHIELD, "Shield"}, {MON_BUFF_STONE_SKIN, "Stone skin"}, {MON_BUFF_BLESS, "Bless"}, {MON_BUFF_HEROISM, "Heroism"}, {MON_BUFF_HASTE, "Haste"}, {MON_BUFF_PAIN_REFLECTION, "Pain reflection"}, {MON_BUFF_HAMMERHANDS, "Hammerhands"} };

		STRING_TO_ENUM_MONSTER_BUFF = invertMap(ENUM_TO_STRING_MONSTER_BUFF);

		detail::callbackMonsterBuffInitialize();

	}

	void makeEnumMonsterBuff_8()
	{
		MON_BUFF_NULL = 0;
		MON_BUFF_CHARM = 1;
		MON_BUFF_SUMMONED = 2;
		MON_BUFF_SHRINKING_RAY = 3;
		MON_BUFF_FEAR = 4;
		MON_BUFF_STONED = 5;
		MON_BUFF_PARALYZE = 6;
		MON_BUFF_SLOW = 7;
		MON_BUFF_BERSERK = 8;
		MON_BUFF_MASS_DISTORTION = 9;
		MON_BUFF_FATE = 10;
		MON_BUFF_ENSLAVE = 11;
		MON_BUFF_DAY_OF_PROTECTION = 12;
		MON_BUFF_HOUR_OF_POWER = 13;
		MON_BUFF_SHIELD = 14;
		MON_BUFF_STONE_SKIN = 15;
		MON_BUFF_BLESS = 16;
		MON_BUFF_HEROISM = 17;
		MON_BUFF_HASTE = 18;
		MON_BUFF_PAIN_REFLECTION = 19;
		MON_BUFF_HAMMERHANDS = 20;
		MON_BUFF_ARMOR_HALVED = 21;
		MON_BUFF_MELEE_ONLY = 22;
		MON_BUFF_DAMAGE_HALVED = 23;
		MON_BUFF_WANDER = 24;
		MON_BUFF_MISTFORM = 25;

		MONSTER_BUFF_ALL = { MON_BUFF_NULL, MON_BUFF_CHARM, MON_BUFF_SUMMONED, MON_BUFF_SHRINKING_RAY, MON_BUFF_FEAR, MON_BUFF_STONED, MON_BUFF_PARALYZE, MON_BUFF_SLOW, MON_BUFF_BERSERK, MON_BUFF_MASS_DISTORTION, MON_BUFF_FATE, MON_BUFF_ENSLAVE, MON_BUFF_DAY_OF_PROTECTION, MON_BUFF_HOUR_OF_POWER, MON_BUFF_SHIELD, MON_BUFF_STONE_SKIN, MON_BUFF_BLESS, MON_BUFF_HEROISM, MON_BUFF_HASTE, MON_BUFF_PAIN_REFLECTION, MON_BUFF_HAMMERHANDS, MON_BUFF_ARMOR_HALVED, MON_BUFF_MELEE_ONLY, MON_BUFF_DAMAGE_HALVED, MON_BUFF_WANDER, MON_BUFF_MISTFORM };

		ENUM_TO_STRING_MONSTER_BUFF = { {MON_BUFF_NULL, "Null"}, {MON_BUFF_CHARM, "Charm"}, {MON_BUFF_SUMMONED, "Summoned"}, {MON_BUFF_SHRINKING_RAY, "Shrinking ray"}, {MON_BUFF_FEAR, "Fear"}, {MON_BUFF_STONED, "Stoned"}, {MON_BUFF_PARALYZE, "Paralyze"}, {MON_BUFF_SLOW, "Slow"}, {MON_BUFF_BERSERK, "Berserk"}, {MON_BUFF_MASS_DISTORTION, "Mass distortion"}, {MON_BUFF_FATE, "Fate"}, {MON_BUFF_ENSLAVE, "Enslave"}, {MON_BUFF_DAY_OF_PROTECTION, "Day of protection"}, {MON_BUFF_HOUR_OF_POWER, "Hour of power"}, {MON_BUFF_SHIELD, "Shield"}, {MON_BUFF_STONE_SKIN, "Stone skin"}, {MON_BUFF_BLESS, "Bless"}, {MON_BUFF_HEROISM, "Heroism"}, {MON_BUFF_HASTE, "Haste"}, {MON_BUFF_PAIN_REFLECTION, "Pain reflection"}, {MON_BUFF_HAMMERHANDS, "Hammerhands"}, {MON_BUFF_ARMOR_HALVED, "Armor halved"}, {MON_BUFF_MELEE_ONLY, "Melee only"}, {MON_BUFF_DAMAGE_HALVED, "Damage halved"}, {MON_BUFF_WANDER, "Wander"}, {MON_BUFF_MISTFORM, "Mistform"} };

		STRING_TO_ENUM_MONSTER_BUFF = invertMap(ENUM_TO_STRING_MONSTER_BUFF);

		detail::callbackMonsterBuffInitialize();

	}

bool checkMonsterBuffValidity(int64_t value)
{
	return detail::checkValidValue(MONSTER_BUFF_ALL, value, detail::callbackCheckMonsterBuffValidity);
}


	// MonsterBonus //

	int64_t 
		MON_BONUS_CURSE = INVALID_ID,
		MON_BONUS_WEAK = INVALID_ID,
		MON_BONUS_ASLEEP = INVALID_ID,
		MON_BONUS_DRUNK = INVALID_ID,
		MON_BONUS_INSANE = INVALID_ID,
		MON_BONUS_POISON_1 = INVALID_ID,
		MON_BONUS_POISON_2 = INVALID_ID,
		MON_BONUS_POISON_3 = INVALID_ID,
		MON_BONUS_DISEASE_1 = INVALID_ID,
		MON_BONUS_DISEASE_2 = INVALID_ID,
		MON_BONUS_DISEASE_3 = INVALID_ID,
		MON_BONUS_PARALYZE = INVALID_ID,
		MON_BONUS_UNCON = INVALID_ID,
		MON_BONUS_DEAD = INVALID_ID,
		MON_BONUS_STONE = INVALID_ID,
		MON_BONUS_ERRAD = INVALID_ID,
		MON_BONUS_BRKITEM = INVALID_ID,
		MON_BONUS_BRKARMOR = INVALID_ID,
		MON_BONUS_BRKWEAPON = INVALID_ID,
		MON_BONUS_STEAL = INVALID_ID,
		MON_BONUS_AGE = INVALID_ID,
		MON_BONUS_DRAINSP = INVALID_ID,
		MON_BONUS_AFRAID = INVALID_ID;

	std::vector<int64_t> MONSTER_BONUS_ALL;
	std::map<int64_t, std::string> ENUM_TO_STRING_MONSTER_BONUS;
	std::map<std::string, int64_t> STRING_TO_ENUM_MONSTER_BONUS;

	void makeEnumMonsterBonus_6()
	{
		MON_BONUS_CURSE = 1;
		MON_BONUS_WEAK = 2;
		MON_BONUS_ASLEEP = 3;
		MON_BONUS_DRUNK = 4;
		MON_BONUS_INSANE = 5;
		MON_BONUS_POISON_1 = 6;
		MON_BONUS_POISON_2 = 7;
		MON_BONUS_POISON_3 = 8;
		MON_BONUS_DISEASE_1 = 9;
		MON_BONUS_DISEASE_2 = 10;
		MON_BONUS_DISEASE_3 = 11;
		MON_BONUS_PARALYZE = 12;
		MON_BONUS_UNCON = 13;
		MON_BONUS_DEAD = 14;
		MON_BONUS_STONE = 15;
		MON_BONUS_ERRAD = 16;
		MON_BONUS_BRKITEM = 17;
		MON_BONUS_BRKARMOR = 18;
		MON_BONUS_BRKWEAPON = 19;
		MON_BONUS_STEAL = 20;
		MON_BONUS_AGE = 21;
		MON_BONUS_DRAINSP = 22;
		MON_BONUS_AFRAID = 23;

		MONSTER_BONUS_ALL = { MON_BONUS_CURSE, MON_BONUS_WEAK, MON_BONUS_ASLEEP, MON_BONUS_DRUNK, MON_BONUS_INSANE, MON_BONUS_POISON_1, MON_BONUS_POISON_2, MON_BONUS_POISON_3, MON_BONUS_DISEASE_1, MON_BONUS_DISEASE_2, MON_BONUS_DISEASE_3, MON_BONUS_PARALYZE, MON_BONUS_UNCON, MON_BONUS_DEAD, MON_BONUS_STONE, MON_BONUS_ERRAD, MON_BONUS_BRKITEM, MON_BONUS_BRKARMOR, MON_BONUS_BRKWEAPON, MON_BONUS_STEAL, MON_BONUS_AGE, MON_BONUS_DRAINSP, MON_BONUS_AFRAID };

		ENUM_TO_STRING_MONSTER_BONUS = { {MON_BONUS_CURSE, "Curse"}, {MON_BONUS_WEAK, "Weak"}, {MON_BONUS_ASLEEP, "Asleep"}, {MON_BONUS_DRUNK, "Drunk"}, {MON_BONUS_INSANE, "Insane"}, {MON_BONUS_POISON_1, "Poison 1"}, {MON_BONUS_POISON_2, "Poison 2"}, {MON_BONUS_POISON_3, "Poison 3"}, {MON_BONUS_DISEASE_1, "Disease 1"}, {MON_BONUS_DISEASE_2, "Disease 2"}, {MON_BONUS_DISEASE_3, "Disease 3"}, {MON_BONUS_PARALYZE, "Paralyze"}, {MON_BONUS_UNCON, "Uncon"}, {MON_BONUS_DEAD, "Dead"}, {MON_BONUS_STONE, "Stone"}, {MON_BONUS_ERRAD, "Errad"}, {MON_BONUS_BRKITEM, "Brkitem"}, {MON_BONUS_BRKARMOR, "Brkarmor"}, {MON_BONUS_BRKWEAPON, "Brkweapon"}, {MON_BONUS_STEAL, "Steal"}, {MON_BONUS_AGE, "Age"}, {MON_BONUS_DRAINSP, "Drainsp"}, {MON_BONUS_AFRAID, "Afraid"} };

		STRING_TO_ENUM_MONSTER_BONUS = invertMap(ENUM_TO_STRING_MONSTER_BONUS);

		detail::callbackMonsterBonusInitialize();

	}

	void makeEnumMonsterBonus_7()
	{
		MON_BONUS_CURSE = 1;
		MON_BONUS_WEAK = 2;
		MON_BONUS_ASLEEP = 3;
		MON_BONUS_DRUNK = 4;
		MON_BONUS_INSANE = 5;
		MON_BONUS_POISON_1 = 6;
		MON_BONUS_POISON_2 = 7;
		MON_BONUS_POISON_3 = 8;
		MON_BONUS_DISEASE_1 = 9;
		MON_BONUS_DISEASE_2 = 10;
		MON_BONUS_DISEASE_3 = 11;
		MON_BONUS_PARALYZE = 12;
		MON_BONUS_UNCON = 13;
		MON_BONUS_DEAD = 14;
		MON_BONUS_STONE = 15;
		MON_BONUS_ERRAD = 16;
		MON_BONUS_BRKITEM = 17;
		MON_BONUS_BRKARMOR = 18;
		MON_BONUS_BRKWEAPON = 19;
		MON_BONUS_STEAL = 20;
		MON_BONUS_AGE = 21;
		MON_BONUS_DRAINSP = 22;
		MON_BONUS_AFRAID = 23;

		MONSTER_BONUS_ALL = { MON_BONUS_CURSE, MON_BONUS_WEAK, MON_BONUS_ASLEEP, MON_BONUS_DRUNK, MON_BONUS_INSANE, MON_BONUS_POISON_1, MON_BONUS_POISON_2, MON_BONUS_POISON_3, MON_BONUS_DISEASE_1, MON_BONUS_DISEASE_2, MON_BONUS_DISEASE_3, MON_BONUS_PARALYZE, MON_BONUS_UNCON, MON_BONUS_DEAD, MON_BONUS_STONE, MON_BONUS_ERRAD, MON_BONUS_BRKITEM, MON_BONUS_BRKARMOR, MON_BONUS_BRKWEAPON, MON_BONUS_STEAL, MON_BONUS_AGE, MON_BONUS_DRAINSP, MON_BONUS_AFRAID };

		ENUM_TO_STRING_MONSTER_BONUS = { {MON_BONUS_CURSE, "Curse"}, {MON_BONUS_WEAK, "Weak"}, {MON_BONUS_ASLEEP, "Asleep"}, {MON_BONUS_DRUNK, "Drunk"}, {MON_BONUS_INSANE, "Insane"}, {MON_BONUS_POISON_1, "Poison 1"}, {MON_BONUS_POISON_2, "Poison 2"}, {MON_BONUS_POISON_3, "Poison 3"}, {MON_BONUS_DISEASE_1, "Disease 1"}, {MON_BONUS_DISEASE_2, "Disease 2"}, {MON_BONUS_DISEASE_3, "Disease 3"}, {MON_BONUS_PARALYZE, "Paralyze"}, {MON_BONUS_UNCON, "Uncon"}, {MON_BONUS_DEAD, "Dead"}, {MON_BONUS_STONE, "Stone"}, {MON_BONUS_ERRAD, "Errad"}, {MON_BONUS_BRKITEM, "Brkitem"}, {MON_BONUS_BRKARMOR, "Brkarmor"}, {MON_BONUS_BRKWEAPON, "Brkweapon"}, {MON_BONUS_STEAL, "Steal"}, {MON_BONUS_AGE, "Age"}, {MON_BONUS_DRAINSP, "Drainsp"}, {MON_BONUS_AFRAID, "Afraid"} };

		STRING_TO_ENUM_MONSTER_BONUS = invertMap(ENUM_TO_STRING_MONSTER_BONUS);

		detail::callbackMonsterBonusInitialize();

	}

	void makeEnumMonsterBonus_8()
	{
		MON_BONUS_CURSE = 1;
		MON_BONUS_WEAK = 2;
		MON_BONUS_ASLEEP = 3;
		MON_BONUS_DRUNK = 4;
		MON_BONUS_INSANE = 5;
		MON_BONUS_POISON_1 = 6;
		MON_BONUS_POISON_2 = 7;
		MON_BONUS_POISON_3 = 8;
		MON_BONUS_DISEASE_1 = 9;
		MON_BONUS_DISEASE_2 = 10;
		MON_BONUS_DISEASE_3 = 11;
		MON_BONUS_PARALYZE = 12;
		MON_BONUS_UNCON = 13;
		MON_BONUS_DEAD = 14;
		MON_BONUS_STONE = 15;
		MON_BONUS_ERRAD = 16;
		MON_BONUS_BRKITEM = 17;
		MON_BONUS_BRKARMOR = 18;
		MON_BONUS_BRKWEAPON = 19;
		MON_BONUS_STEAL = 20;
		MON_BONUS_AGE = 21;
		MON_BONUS_DRAINSP = 22;
		MON_BONUS_AFRAID = 23;

		MONSTER_BONUS_ALL = { MON_BONUS_CURSE, MON_BONUS_WEAK, MON_BONUS_ASLEEP, MON_BONUS_DRUNK, MON_BONUS_INSANE, MON_BONUS_POISON_1, MON_BONUS_POISON_2, MON_BONUS_POISON_3, MON_BONUS_DISEASE_1, MON_BONUS_DISEASE_2, MON_BONUS_DISEASE_3, MON_BONUS_PARALYZE, MON_BONUS_UNCON, MON_BONUS_DEAD, MON_BONUS_STONE, MON_BONUS_ERRAD, MON_BONUS_BRKITEM, MON_BONUS_BRKARMOR, MON_BONUS_BRKWEAPON, MON_BONUS_STEAL, MON_BONUS_AGE, MON_BONUS_DRAINSP, MON_BONUS_AFRAID };

		ENUM_TO_STRING_MONSTER_BONUS = { {MON_BONUS_CURSE, "Curse"}, {MON_BONUS_WEAK, "Weak"}, {MON_BONUS_ASLEEP, "Asleep"}, {MON_BONUS_DRUNK, "Drunk"}, {MON_BONUS_INSANE, "Insane"}, {MON_BONUS_POISON_1, "Poison 1"}, {MON_BONUS_POISON_2, "Poison 2"}, {MON_BONUS_POISON_3, "Poison 3"}, {MON_BONUS_DISEASE_1, "Disease 1"}, {MON_BONUS_DISEASE_2, "Disease 2"}, {MON_BONUS_DISEASE_3, "Disease 3"}, {MON_BONUS_PARALYZE, "Paralyze"}, {MON_BONUS_UNCON, "Uncon"}, {MON_BONUS_DEAD, "Dead"}, {MON_BONUS_STONE, "Stone"}, {MON_BONUS_ERRAD, "Errad"}, {MON_BONUS_BRKITEM, "Brkitem"}, {MON_BONUS_BRKARMOR, "Brkarmor"}, {MON_BONUS_BRKWEAPON, "Brkweapon"}, {MON_BONUS_STEAL, "Steal"}, {MON_BONUS_AGE, "Age"}, {MON_BONUS_DRAINSP, "Drainsp"}, {MON_BONUS_AFRAID, "Afraid"} };

		STRING_TO_ENUM_MONSTER_BONUS = invertMap(ENUM_TO_STRING_MONSTER_BONUS);

		detail::callbackMonsterBonusInitialize();

	}

bool checkMonsterBonusValidity(int64_t value)
{
	return detail::checkValidValue(MONSTER_BONUS_ALL, value, detail::callbackCheckMonsterBonusValidity);
}


	// MonsterKind //

	int64_t 
		MON_KIND_UNDEAD = INVALID_ID,
		MON_KIND_DEMON = INVALID_ID,
		MON_KIND_DRAGON = INVALID_ID,
		MON_KIND_ELF = INVALID_ID,
		MON_KIND_SWIMMER = INVALID_ID,
		MON_KIND_IMMOBILE = INVALID_ID,
		MON_KIND_TITAN = INVALID_ID,
		MON_KIND_NO_ARENA = INVALID_ID,
		MON_KIND_PEASANT = INVALID_ID,
		MON_KIND_OGRE = INVALID_ID,
		MON_KIND_ELEMENTAL = INVALID_ID;

	std::vector<int64_t> MONSTER_KIND_ALL;
	std::map<int64_t, std::string> ENUM_TO_STRING_MONSTER_KIND;
	std::map<std::string, int64_t> STRING_TO_ENUM_MONSTER_KIND;

	void makeEnumMonsterKind_6()
	{

		MONSTER_KIND_ALL = {  };

		ENUM_TO_STRING_MONSTER_KIND = {  };

		STRING_TO_ENUM_MONSTER_KIND = invertMap(ENUM_TO_STRING_MONSTER_KIND);

		detail::callbackMonsterKindInitialize();

	}

	void makeEnumMonsterKind_7()
	{
		MON_KIND_UNDEAD = 1;
		MON_KIND_DEMON = 2;
		MON_KIND_DRAGON = 3;
		MON_KIND_ELF = 4;
		MON_KIND_SWIMMER = 5;
		MON_KIND_IMMOBILE = 6;
		MON_KIND_TITAN = 7;
		MON_KIND_NO_ARENA = 8;

		MONSTER_KIND_ALL = { MON_KIND_UNDEAD, MON_KIND_DEMON, MON_KIND_DRAGON, MON_KIND_ELF, MON_KIND_SWIMMER, MON_KIND_IMMOBILE, MON_KIND_TITAN, MON_KIND_NO_ARENA };

		ENUM_TO_STRING_MONSTER_KIND = { {MON_KIND_UNDEAD, "Undead"}, {MON_KIND_DEMON, "Demon"}, {MON_KIND_DRAGON, "Dragon"}, {MON_KIND_ELF, "Elf"}, {MON_KIND_SWIMMER, "Swimmer"}, {MON_KIND_IMMOBILE, "Immobile"}, {MON_KIND_TITAN, "Titan"}, {MON_KIND_NO_ARENA, "No arena"} };

		STRING_TO_ENUM_MONSTER_KIND = invertMap(ENUM_TO_STRING_MONSTER_KIND);

		detail::callbackMonsterKindInitialize();

	}

	void makeEnumMonsterKind_8()
	{
		MON_KIND_UNDEAD = 1;
		MON_KIND_DRAGON = 2;
		MON_KIND_SWIMMER = 3;
		MON_KIND_IMMOBILE = 4;
		MON_KIND_PEASANT = 5;
		MON_KIND_NO_ARENA = 6;
		MON_KIND_OGRE = 7;
		MON_KIND_ELEMENTAL = 8;

		MONSTER_KIND_ALL = { MON_KIND_UNDEAD, MON_KIND_DRAGON, MON_KIND_SWIMMER, MON_KIND_IMMOBILE, MON_KIND_PEASANT, MON_KIND_NO_ARENA, MON_KIND_OGRE, MON_KIND_ELEMENTAL };

		ENUM_TO_STRING_MONSTER_KIND = { {MON_KIND_UNDEAD, "Undead"}, {MON_KIND_DRAGON, "Dragon"}, {MON_KIND_SWIMMER, "Swimmer"}, {MON_KIND_IMMOBILE, "Immobile"}, {MON_KIND_PEASANT, "Peasant"}, {MON_KIND_NO_ARENA, "No arena"}, {MON_KIND_OGRE, "Ogre"}, {MON_KIND_ELEMENTAL, "Elemental"} };

		STRING_TO_ENUM_MONSTER_KIND = invertMap(ENUM_TO_STRING_MONSTER_KIND);

		detail::callbackMonsterKindInitialize();

	}

bool checkMonsterKindValidity(int64_t value)
{
	return detail::checkValidValue(MONSTER_KIND_ALL, value, detail::callbackCheckMonsterKindValidity);
}


	// HouseType //

	int64_t 
		HOUSE_TYPE_WEAPON_SHOP = INVALID_ID,
		HOUSE_TYPE_ARMOR_SHOP = INVALID_ID,
		HOUSE_TYPE_MAGIC_SHOP = INVALID_ID,
		HOUSE_TYPE_GENERAL_STORE = INVALID_ID,
		HOUSE_TYPE_FIRE_GUILD = INVALID_ID,
		HOUSE_TYPE_AIR_GUILD = INVALID_ID,
		HOUSE_TYPE_WATER_GUILD = INVALID_ID,
		HOUSE_TYPE_EARTH_GUILD = INVALID_ID,
		HOUSE_TYPE_SPIRIT_GUILD = INVALID_ID,
		HOUSE_TYPE_MIND_GUILD = INVALID_ID,
		HOUSE_TYPE_BODY_GUILD = INVALID_ID,
		HOUSE_TYPE_LIGHT_GUILD = INVALID_ID,
		HOUSE_TYPE_DARK_GUILD = INVALID_ID,
		HOUSE_TYPE_ELEMENTAL_GUILD = INVALID_ID,
		HOUSE_TYPE_SELF_GUILD = INVALID_ID,
		HOUSE_TYPE_THIEVES_GUILD = INVALID_ID,
		HOUSE_TYPE_MERC_GUILD = INVALID_ID,
		HOUSE_TYPE_TOWN_HALL = INVALID_ID,
		HOUSE_TYPE_THRONE = INVALID_ID,
		HOUSE_TYPE_TAVERN = INVALID_ID,
		HOUSE_TYPE_BANK = INVALID_ID,
		HOUSE_TYPE_TEMPLE = INVALID_ID,
		HOUSE_TYPE_CASTLE_ENTRANCE = INVALID_ID,
		HOUSE_TYPE_DUNGEON_ENTRANCE = INVALID_ID,
		HOUSE_TYPE_SEER_EVIL = INVALID_ID,
		HOUSE_TYPE_STABLES = INVALID_ID,
		HOUSE_TYPE_BOATS = INVALID_ID,
		HOUSE_TYPE_HOUSE = INVALID_ID,
		HOUSE_TYPE_TRAINING = INVALID_ID,
		HOUSE_TYPE_JAIL = INVALID_ID,
		HOUSE_TYPE_CIRCUS = INVALID_ID,
		HOUSE_TYPE_THE_ADVENTURERS_INN = INVALID_ID,
		HOUSE_TYPE_ALCHEMIST = INVALID_ID;

	std::vector<int64_t> HOUSE_TYPE_ALL;
	std::map<int64_t, std::string> ENUM_TO_STRING_HOUSE_TYPE;
	std::map<std::string, int64_t> STRING_TO_ENUM_HOUSE_TYPE;

	void makeEnumHouseType_6()
	{
		HOUSE_TYPE_WEAPON_SHOP = 1;
		HOUSE_TYPE_ARMOR_SHOP = 2;
		HOUSE_TYPE_MAGIC_SHOP = 3;
		HOUSE_TYPE_GENERAL_STORE = 4;
		HOUSE_TYPE_FIRE_GUILD = 5;
		HOUSE_TYPE_AIR_GUILD = 6;
		HOUSE_TYPE_WATER_GUILD = 7;
		HOUSE_TYPE_EARTH_GUILD = 8;
		HOUSE_TYPE_SPIRIT_GUILD = 9;
		HOUSE_TYPE_MIND_GUILD = 10;
		HOUSE_TYPE_BODY_GUILD = 11;
		HOUSE_TYPE_LIGHT_GUILD = 12;
		HOUSE_TYPE_DARK_GUILD = 13;
		HOUSE_TYPE_ELEMENTAL_GUILD = 14;
		HOUSE_TYPE_SELF_GUILD = 15;
		HOUSE_TYPE_THIEVES_GUILD = 17;
		HOUSE_TYPE_MERC_GUILD = 18;
		HOUSE_TYPE_TOWN_HALL = 19;
		HOUSE_TYPE_THRONE = 20;
		HOUSE_TYPE_TAVERN = 21;
		HOUSE_TYPE_BANK = 22;
		HOUSE_TYPE_TEMPLE = 23;
		HOUSE_TYPE_CASTLE_ENTRANCE = 24;
		HOUSE_TYPE_DUNGEON_ENTRANCE = 25;
		HOUSE_TYPE_SEER_EVIL = 26;
		HOUSE_TYPE_STABLES = 27;
		HOUSE_TYPE_BOATS = 28;
		HOUSE_TYPE_HOUSE = 29;
		HOUSE_TYPE_TRAINING = 30;
		HOUSE_TYPE_JAIL = 31;
		HOUSE_TYPE_CIRCUS = 32;
		HOUSE_TYPE_THE_ADVENTURERS_INN = 35;

		HOUSE_TYPE_ALL = { HOUSE_TYPE_WEAPON_SHOP, HOUSE_TYPE_ARMOR_SHOP, HOUSE_TYPE_MAGIC_SHOP, HOUSE_TYPE_GENERAL_STORE, HOUSE_TYPE_FIRE_GUILD, HOUSE_TYPE_AIR_GUILD, HOUSE_TYPE_WATER_GUILD, HOUSE_TYPE_EARTH_GUILD, HOUSE_TYPE_SPIRIT_GUILD, HOUSE_TYPE_MIND_GUILD, HOUSE_TYPE_BODY_GUILD, HOUSE_TYPE_LIGHT_GUILD, HOUSE_TYPE_DARK_GUILD, HOUSE_TYPE_ELEMENTAL_GUILD, HOUSE_TYPE_SELF_GUILD, HOUSE_TYPE_THIEVES_GUILD, HOUSE_TYPE_MERC_GUILD, HOUSE_TYPE_TOWN_HALL, HOUSE_TYPE_THRONE, HOUSE_TYPE_TAVERN, HOUSE_TYPE_BANK, HOUSE_TYPE_TEMPLE, HOUSE_TYPE_CASTLE_ENTRANCE, HOUSE_TYPE_DUNGEON_ENTRANCE, HOUSE_TYPE_SEER_EVIL, HOUSE_TYPE_STABLES, HOUSE_TYPE_BOATS, HOUSE_TYPE_HOUSE, HOUSE_TYPE_TRAINING, HOUSE_TYPE_JAIL, HOUSE_TYPE_CIRCUS, HOUSE_TYPE_THE_ADVENTURERS_INN };

		ENUM_TO_STRING_HOUSE_TYPE = { {HOUSE_TYPE_WEAPON_SHOP, "Weapon Shop"}, {HOUSE_TYPE_ARMOR_SHOP, "Armor Shop"}, {HOUSE_TYPE_MAGIC_SHOP, "Magic Shop"}, {HOUSE_TYPE_GENERAL_STORE, "General Store"}, {HOUSE_TYPE_FIRE_GUILD, "Fire Guild"}, {HOUSE_TYPE_AIR_GUILD, "Air Guild"}, {HOUSE_TYPE_WATER_GUILD, "Water Guild"}, {HOUSE_TYPE_EARTH_GUILD, "Earth Guild"}, {HOUSE_TYPE_SPIRIT_GUILD, "Spirit Guild"}, {HOUSE_TYPE_MIND_GUILD, "Mind Guild"}, {HOUSE_TYPE_BODY_GUILD, "Body Guild"}, {HOUSE_TYPE_LIGHT_GUILD, "Light Guild"}, {HOUSE_TYPE_DARK_GUILD, "Dark Guild"}, {HOUSE_TYPE_ELEMENTAL_GUILD, "Elemental Guild"}, {HOUSE_TYPE_SELF_GUILD, "Self Guild"}, {HOUSE_TYPE_THIEVES_GUILD, "Thieves Guild"}, {HOUSE_TYPE_MERC_GUILD, "Merc Guild"}, {HOUSE_TYPE_TOWN_HALL, "Town Hall"}, {HOUSE_TYPE_THRONE, "Throne"}, {HOUSE_TYPE_TAVERN, "Tavern"}, {HOUSE_TYPE_BANK, "Bank"}, {HOUSE_TYPE_TEMPLE, "Temple"}, {HOUSE_TYPE_CASTLE_ENTRANCE, "Castle Entrance"}, {HOUSE_TYPE_DUNGEON_ENTRANCE, "Dungeon Entrance"}, {HOUSE_TYPE_SEER_EVIL, "Seer Evil"}, {HOUSE_TYPE_STABLES, "Stables"}, {HOUSE_TYPE_BOATS, "Boats"}, {HOUSE_TYPE_HOUSE, "House"}, {HOUSE_TYPE_TRAINING, "Training"}, {HOUSE_TYPE_JAIL, "Jail"}, {HOUSE_TYPE_CIRCUS, "Circus"}, {HOUSE_TYPE_THE_ADVENTURERS_INN, "The Adventurer's Inn"} };

		STRING_TO_ENUM_HOUSE_TYPE = invertMap(ENUM_TO_STRING_HOUSE_TYPE);

		detail::callbackHouseTypeInitialize();

	}

	void makeEnumHouseType_7()
	{
		HOUSE_TYPE_WEAPON_SHOP = 1;
		HOUSE_TYPE_ARMOR_SHOP = 2;
		HOUSE_TYPE_MAGIC_SHOP = 3;
		HOUSE_TYPE_ALCHEMIST = 4;
		HOUSE_TYPE_FIRE_GUILD = 5;
		HOUSE_TYPE_AIR_GUILD = 6;
		HOUSE_TYPE_WATER_GUILD = 7;
		HOUSE_TYPE_EARTH_GUILD = 8;
		HOUSE_TYPE_SPIRIT_GUILD = 9;
		HOUSE_TYPE_MIND_GUILD = 10;
		HOUSE_TYPE_BODY_GUILD = 11;
		HOUSE_TYPE_LIGHT_GUILD = 12;
		HOUSE_TYPE_DARK_GUILD = 13;
		HOUSE_TYPE_ELEMENTAL_GUILD = 14;
		HOUSE_TYPE_SELF_GUILD = 15;
		HOUSE_TYPE_TOWN_HALL = 17;
		HOUSE_TYPE_MERC_GUILD = 18;
		HOUSE_TYPE_THRONE = 20;
		HOUSE_TYPE_TAVERN = 21;
		HOUSE_TYPE_BANK = 22;
		HOUSE_TYPE_TEMPLE = 23;
		HOUSE_TYPE_CASTLE_ENTRANCE = 24;
		HOUSE_TYPE_DUNGEON_ENTRANCE = 25;
		HOUSE_TYPE_SEER_EVIL = 26;
		HOUSE_TYPE_STABLES = 27;
		HOUSE_TYPE_BOATS = 28;
		HOUSE_TYPE_HOUSE = 29;
		HOUSE_TYPE_TRAINING = 30;
		HOUSE_TYPE_JAIL = 31;
		HOUSE_TYPE_CIRCUS = 32;
		HOUSE_TYPE_THE_ADVENTURERS_INN = 35;

		HOUSE_TYPE_ALL = { HOUSE_TYPE_WEAPON_SHOP, HOUSE_TYPE_ARMOR_SHOP, HOUSE_TYPE_MAGIC_SHOP, HOUSE_TYPE_ALCHEMIST, HOUSE_TYPE_FIRE_GUILD, HOUSE_TYPE_AIR_GUILD, HOUSE_TYPE_WATER_GUILD, HOUSE_TYPE_EARTH_GUILD, HOUSE_TYPE_SPIRIT_GUILD, HOUSE_TYPE_MIND_GUILD, HOUSE_TYPE_BODY_GUILD, HOUSE_TYPE_LIGHT_GUILD, HOUSE_TYPE_DARK_GUILD, HOUSE_TYPE_ELEMENTAL_GUILD, HOUSE_TYPE_SELF_GUILD, HOUSE_TYPE_TOWN_HALL, HOUSE_TYPE_MERC_GUILD, HOUSE_TYPE_THRONE, HOUSE_TYPE_TAVERN, HOUSE_TYPE_BANK, HOUSE_TYPE_TEMPLE, HOUSE_TYPE_CASTLE_ENTRANCE, HOUSE_TYPE_DUNGEON_ENTRANCE, HOUSE_TYPE_SEER_EVIL, HOUSE_TYPE_STABLES, HOUSE_TYPE_BOATS, HOUSE_TYPE_HOUSE, HOUSE_TYPE_TRAINING, HOUSE_TYPE_JAIL, HOUSE_TYPE_CIRCUS, HOUSE_TYPE_THE_ADVENTURERS_INN };

		ENUM_TO_STRING_HOUSE_TYPE = { {HOUSE_TYPE_WEAPON_SHOP, "Weapon Shop"}, {HOUSE_TYPE_ARMOR_SHOP, "Armor Shop"}, {HOUSE_TYPE_MAGIC_SHOP, "Magic Shop"}, {HOUSE_TYPE_ALCHEMIST, "Alchemist"}, {HOUSE_TYPE_FIRE_GUILD, "Fire Guild"}, {HOUSE_TYPE_AIR_GUILD, "Air Guild"}, {HOUSE_TYPE_WATER_GUILD, "Water Guild"}, {HOUSE_TYPE_EARTH_GUILD, "Earth Guild"}, {HOUSE_TYPE_SPIRIT_GUILD, "Spirit Guild"}, {HOUSE_TYPE_MIND_GUILD, "Mind Guild"}, {HOUSE_TYPE_BODY_GUILD, "Body Guild"}, {HOUSE_TYPE_LIGHT_GUILD, "Light Guild"}, {HOUSE_TYPE_DARK_GUILD, "Dark Guild"}, {HOUSE_TYPE_ELEMENTAL_GUILD, "Elemental Guild"}, {HOUSE_TYPE_SELF_GUILD, "Self Guild"}, {HOUSE_TYPE_TOWN_HALL, "Town Hall"}, {HOUSE_TYPE_MERC_GUILD, "Merc Guild"}, {HOUSE_TYPE_THRONE, "Throne"}, {HOUSE_TYPE_TAVERN, "Tavern"}, {HOUSE_TYPE_BANK, "Bank"}, {HOUSE_TYPE_TEMPLE, "Temple"}, {HOUSE_TYPE_CASTLE_ENTRANCE, "Castle Entrance"}, {HOUSE_TYPE_DUNGEON_ENTRANCE, "Dungeon Entrance"}, {HOUSE_TYPE_SEER_EVIL, "Seer Evil"}, {HOUSE_TYPE_STABLES, "Stables"}, {HOUSE_TYPE_BOATS, "Boats"}, {HOUSE_TYPE_HOUSE, "House"}, {HOUSE_TYPE_TRAINING, "Training"}, {HOUSE_TYPE_JAIL, "Jail"}, {HOUSE_TYPE_CIRCUS, "Circus"}, {HOUSE_TYPE_THE_ADVENTURERS_INN, "The Adventurer's Inn"} };

		STRING_TO_ENUM_HOUSE_TYPE = invertMap(ENUM_TO_STRING_HOUSE_TYPE);

		detail::callbackHouseTypeInitialize();

	}

	void makeEnumHouseType_8()
	{
		HOUSE_TYPE_WEAPON_SHOP = 1;
		HOUSE_TYPE_ARMOR_SHOP = 2;
		HOUSE_TYPE_MAGIC_SHOP = 3;
		HOUSE_TYPE_ALCHEMIST = 4;
		HOUSE_TYPE_FIRE_GUILD = 5;
		HOUSE_TYPE_AIR_GUILD = 6;
		HOUSE_TYPE_WATER_GUILD = 7;
		HOUSE_TYPE_EARTH_GUILD = 8;
		HOUSE_TYPE_SPIRIT_GUILD = 9;
		HOUSE_TYPE_MIND_GUILD = 10;
		HOUSE_TYPE_BODY_GUILD = 11;
		HOUSE_TYPE_LIGHT_GUILD = 12;
		HOUSE_TYPE_DARK_GUILD = 13;
		HOUSE_TYPE_ELEMENTAL_GUILD = 14;
		HOUSE_TYPE_SELF_GUILD = 15;
		HOUSE_TYPE_TOWN_HALL = 17;
		HOUSE_TYPE_MERC_GUILD = 18;
		HOUSE_TYPE_THRONE = 20;
		HOUSE_TYPE_TAVERN = 21;
		HOUSE_TYPE_BANK = 22;
		HOUSE_TYPE_TEMPLE = 23;
		HOUSE_TYPE_CASTLE_ENTRANCE = 24;
		HOUSE_TYPE_DUNGEON_ENTRANCE = 25;
		HOUSE_TYPE_SEER_EVIL = 26;
		HOUSE_TYPE_STABLES = 27;
		HOUSE_TYPE_BOATS = 28;
		HOUSE_TYPE_HOUSE = 29;
		HOUSE_TYPE_TRAINING = 30;
		HOUSE_TYPE_JAIL = 31;
		HOUSE_TYPE_CIRCUS = 32;
		HOUSE_TYPE_THE_ADVENTURERS_INN = 35;

		HOUSE_TYPE_ALL = { HOUSE_TYPE_WEAPON_SHOP, HOUSE_TYPE_ARMOR_SHOP, HOUSE_TYPE_MAGIC_SHOP, HOUSE_TYPE_ALCHEMIST, HOUSE_TYPE_FIRE_GUILD, HOUSE_TYPE_AIR_GUILD, HOUSE_TYPE_WATER_GUILD, HOUSE_TYPE_EARTH_GUILD, HOUSE_TYPE_SPIRIT_GUILD, HOUSE_TYPE_MIND_GUILD, HOUSE_TYPE_BODY_GUILD, HOUSE_TYPE_LIGHT_GUILD, HOUSE_TYPE_DARK_GUILD, HOUSE_TYPE_ELEMENTAL_GUILD, HOUSE_TYPE_SELF_GUILD, HOUSE_TYPE_TOWN_HALL, HOUSE_TYPE_MERC_GUILD, HOUSE_TYPE_THRONE, HOUSE_TYPE_TAVERN, HOUSE_TYPE_BANK, HOUSE_TYPE_TEMPLE, HOUSE_TYPE_CASTLE_ENTRANCE, HOUSE_TYPE_DUNGEON_ENTRANCE, HOUSE_TYPE_SEER_EVIL, HOUSE_TYPE_STABLES, HOUSE_TYPE_BOATS, HOUSE_TYPE_HOUSE, HOUSE_TYPE_TRAINING, HOUSE_TYPE_JAIL, HOUSE_TYPE_CIRCUS, HOUSE_TYPE_THE_ADVENTURERS_INN };

		ENUM_TO_STRING_HOUSE_TYPE = { {HOUSE_TYPE_WEAPON_SHOP, "Weapon Shop"}, {HOUSE_TYPE_ARMOR_SHOP, "Armor Shop"}, {HOUSE_TYPE_MAGIC_SHOP, "Magic Shop"}, {HOUSE_TYPE_ALCHEMIST, "Alchemist"}, {HOUSE_TYPE_FIRE_GUILD, "Fire Guild"}, {HOUSE_TYPE_AIR_GUILD, "Air Guild"}, {HOUSE_TYPE_WATER_GUILD, "Water Guild"}, {HOUSE_TYPE_EARTH_GUILD, "Earth Guild"}, {HOUSE_TYPE_SPIRIT_GUILD, "Spirit Guild"}, {HOUSE_TYPE_MIND_GUILD, "Mind Guild"}, {HOUSE_TYPE_BODY_GUILD, "Body Guild"}, {HOUSE_TYPE_LIGHT_GUILD, "Light Guild"}, {HOUSE_TYPE_DARK_GUILD, "Dark Guild"}, {HOUSE_TYPE_ELEMENTAL_GUILD, "Elemental Guild"}, {HOUSE_TYPE_SELF_GUILD, "Self Guild"}, {HOUSE_TYPE_TOWN_HALL, "Town Hall"}, {HOUSE_TYPE_MERC_GUILD, "Merc Guild"}, {HOUSE_TYPE_THRONE, "Throne"}, {HOUSE_TYPE_TAVERN, "Tavern"}, {HOUSE_TYPE_BANK, "Bank"}, {HOUSE_TYPE_TEMPLE, "Temple"}, {HOUSE_TYPE_CASTLE_ENTRANCE, "Castle Entrance"}, {HOUSE_TYPE_DUNGEON_ENTRANCE, "Dungeon Entrance"}, {HOUSE_TYPE_SEER_EVIL, "Seer Evil"}, {HOUSE_TYPE_STABLES, "Stables"}, {HOUSE_TYPE_BOATS, "Boats"}, {HOUSE_TYPE_HOUSE, "House"}, {HOUSE_TYPE_TRAINING, "Training"}, {HOUSE_TYPE_JAIL, "Jail"}, {HOUSE_TYPE_CIRCUS, "Circus"}, {HOUSE_TYPE_THE_ADVENTURERS_INN, "The Adventurer's Inn"} };

		STRING_TO_ENUM_HOUSE_TYPE = invertMap(ENUM_TO_STRING_HOUSE_TYPE);

		detail::callbackHouseTypeInitialize();

	}

bool checkHouseTypeValidity(int64_t value)
{
	return detail::checkValidValue(HOUSE_TYPE_ALL, value, detail::callbackCheckHouseTypeValidity);
}


	// HouseScreens //

	int64_t 
		HOUSE_SCREENS_TEACHER = INVALID_ID,
		HOUSE_SCREENS_CHOOSE_PERSON = INVALID_ID,
		HOUSE_SCREENS_MAIN = INVALID_ID,
		HOUSE_SCREENS_BUY_STANDARD = INVALID_ID,
		HOUSE_SCREENS_SELL = INVALID_ID,
		HOUSE_SCREENS_IDENTIFY = INVALID_ID,
		HOUSE_SCREENS_BUY_SPECIAL = INVALID_ID,
		HOUSE_SCREENS_BANK_DEPOSIT = INVALID_ID,
		HOUSE_SCREENS_BANK_WITHDRAW = INVALID_ID,
		HOUSE_SCREENS_HEAL = INVALID_ID,
		HOUSE_SCREENS_DONATE = INVALID_ID,
		HOUSE_SCREENS_PROF_NEWS = INVALID_ID,
		HOUSE_SCREENS_JOIN_MENU = INVALID_ID,
		HOUSE_SCREENS_NEWS = INVALID_ID,
		HOUSE_SCREENS_TAVERN_SLEEP = INVALID_ID,
		HOUSE_SCREENS_TAVERN_FOOD = INVALID_ID,
		HOUSE_SCREENS_TRAIN = INVALID_ID,
		HOUSE_SCREENS_BUY_SPELLS = INVALID_ID,
		HOUSE_SCREENS_A = INVALID_ID,
		HOUSE_SCREENS_B = INVALID_ID,
		HOUSE_SCREENS_C = INVALID_ID,
		HOUSE_SCREENS_SEER_HINT = INVALID_ID,
		HOUSE_SCREENS_THREAT = INVALID_ID,
		HOUSE_SCREENS_BRIBE = INVALID_ID,
		HOUSE_SCREENS_TAVERN_DRINK = INVALID_ID,
		HOUSE_SCREENS_TAVERN_TIP = INVALID_ID,
		HOUSE_SCREENS_STAFF = INVALID_ID,
		HOUSE_SCREENS_SWORD = INVALID_ID,
		HOUSE_SCREENS_DAGGER = INVALID_ID,
		HOUSE_SCREENS_AXE = INVALID_ID,
		HOUSE_SCREENS_SPEAR = INVALID_ID,
		HOUSE_SCREENS_BOW = INVALID_ID,
		HOUSE_SCREENS_MACE = INVALID_ID,
		HOUSE_SCREENS_BLASTER = INVALID_ID,
		HOUSE_SCREENS_SHIELD = INVALID_ID,
		HOUSE_SCREENS_LEATHER = INVALID_ID,
		HOUSE_SCREENS_CHAIN = INVALID_ID,
		HOUSE_SCREENS_PLATE = INVALID_ID,
		HOUSE_SCREENS_FIRE = INVALID_ID,
		HOUSE_SCREENS_AIR = INVALID_ID,
		HOUSE_SCREENS_WATER = INVALID_ID,
		HOUSE_SCREENS_EARTH = INVALID_ID,
		HOUSE_SCREENS_SPIRIT = INVALID_ID,
		HOUSE_SCREENS_MIND = INVALID_ID,
		HOUSE_SCREENS_BODY = INVALID_ID,
		HOUSE_SCREENS_LIGHT = INVALID_ID,
		HOUSE_SCREENS_DARK = INVALID_ID,
		HOUSE_SCREENS_IDENTIFY_ITEM = INVALID_ID,
		HOUSE_SCREENS_MERCHANT = INVALID_ID,
		HOUSE_SCREENS_REPAIR = INVALID_ID,
		HOUSE_SCREENS_BODYBUILDING = INVALID_ID,
		HOUSE_SCREENS_MEDITATION = INVALID_ID,
		HOUSE_SCREENS_PERCEPTION = INVALID_ID,
		HOUSE_SCREENS_DIPLOMACY = INVALID_ID,
		HOUSE_SCREENS_THIEVERY = INVALID_ID,
		HOUSE_SCREENS_DISARM_TRAPS = INVALID_ID,
		HOUSE_SCREENS_LEARNING = INVALID_ID,
		HOUSE_SCREENS_TRAVEL_1 = INVALID_ID,
		HOUSE_SCREENS_TRAVEL_2 = INVALID_ID,
		HOUSE_SCREENS_TRAVEL_3 = INVALID_ID,
		HOUSE_SCREENS_HIRE_OR_DISMISS = INVALID_ID,
		HOUSE_SCREENS_MORE_INFORMATION = INVALID_ID,
		HOUSE_SCREENS_TEACH_SKILL = INVALID_ID,
		HOUSE_SCREENS_DO_TEACH_SKILL = INVALID_ID,
		HOUSE_SCREENS_JOIN_GUILD = INVALID_ID,
		HOUSE_SCREENS_DO_JOIN_GUILD = INVALID_ID,
		HOUSE_SCREENS_BOUNTY_HUNT_NPC = INVALID_ID,
		HOUSE_SCREENS_SEER_ILOST_IT = INVALID_ID,
		HOUSE_SCREENS_ARENA_PAGE = INVALID_ID,
		HOUSE_SCREENS_ARENA_SQUIRE = INVALID_ID,
		HOUSE_SCREENS_ARENA_KIGHT = INVALID_ID,
		HOUSE_SCREENS_ARENA_LORD = INVALID_ID,
		HOUSE_SCREENS_ARENA_MENU = INVALID_ID,
		HOUSE_SCREENS_ARENA_GO_BACK = INVALID_ID,
		HOUSE_SCREENS_ARENA_WIN = INVALID_ID,
		HOUSE_SCREENS_ARENA_ALREADY_WON = INVALID_ID,
		HOUSE_SCREENS_SEER_PILGRIMAGE = INVALID_ID,
		HOUSE_SCREENS_STREET_NPC = INVALID_ID,
		HOUSE_SCREENS_LACK_FAME = INVALID_ID,
		HOUSE_SCREENS_BEG_THREAT_BRIBE = INVALID_ID,
		HOUSE_SCREENS_THREAT_BRIBE = INVALID_ID,
		HOUSE_SCREENS_BUY_SPECIAL_MM6 = INVALID_ID,
		HOUSE_SCREENS_D = INVALID_ID,
		HOUSE_SCREENS_E = INVALID_ID,
		HOUSE_SCREENS_F = INVALID_ID,
		HOUSE_SCREENS_DODGING = INVALID_ID,
		HOUSE_SCREENS_UNARMED = INVALID_ID,
		HOUSE_SCREENS_IDENTIFY_MONSTER = INVALID_ID,
		HOUSE_SCREENS_ARMSMASTER = INVALID_ID,
		HOUSE_SCREENS_STEALING = INVALID_ID,
		HOUSE_SCREENS_ALCHEMY = INVALID_ID,
		HOUSE_SCREENS_DISPLAY_INVENTORY = INVALID_ID,
		HOUSE_SCREENS_LEARN_SKILLS = INVALID_ID,
		HOUSE_SCREENS_BOUNTY_HUNT = INVALID_ID,
		HOUSE_SCREENS_PAY_FINE = INVALID_ID,
		HOUSE_SCREENS_ARCOMAGE_MENU = INVALID_ID,
		HOUSE_SCREENS_ARCOMAGE_RULES = INVALID_ID,
		HOUSE_SCREENS_ARCOMAGE_CONDITIONS = INVALID_ID,
		HOUSE_SCREENS_ARCOMAGE_PLAY = INVALID_ID,
		HOUSE_SCREENS_TRAVEL_4 = INVALID_ID,
		HOUSE_SCREENS_DARK_ELF_ABILITY = INVALID_ID,
		HOUSE_SCREENS_VAMPIRE_ABILITY = INVALID_ID,
		HOUSE_SCREENS_DRAGON_ABILITY = INVALID_ID,
		HOUSE_SCREENS_REGENERATION = INVALID_ID,
		HOUSE_SCREENS_BUY_SPELLS_FIRE = INVALID_ID,
		HOUSE_SCREENS_BUY_SPELLS_AIR = INVALID_ID,
		HOUSE_SCREENS_BUY_SPELLS_WATER = INVALID_ID,
		HOUSE_SCREENS_BUY_SPELLS_EARTH = INVALID_ID,
		HOUSE_SCREENS_BUY_SPELLS_SPIRIT = INVALID_ID,
		HOUSE_SCREENS_BUY_SPELLS_MIND = INVALID_ID,
		HOUSE_SCREENS_BUY_SPELLS_BODY = INVALID_ID,
		HOUSE_SCREENS_BUY_SPELLS_LIGHT = INVALID_ID,
		HOUSE_SCREENS_BUY_SPELLS_DARK = INVALID_ID,
		HOUSE_SCREENS_JOIN_ROSTER = INVALID_ID,
		HOUSE_SCREENS_JOIN_ROSTER_NO = INVALID_ID;

	std::vector<int64_t> HOUSE_SCREENS_ALL;
	std::map<int64_t, std::string> ENUM_TO_STRING_HOUSE_SCREENS;
	std::map<std::string, int64_t> STRING_TO_ENUM_HOUSE_SCREENS;

	void makeEnumHouseScreens_6()
	{
		HOUSE_SCREENS_TEACHER = -1;
		HOUSE_SCREENS_CHOOSE_PERSON = 0;
		HOUSE_SCREENS_MAIN = 1;
		HOUSE_SCREENS_BUY_STANDARD = 2;
		HOUSE_SCREENS_SELL = 3;
		HOUSE_SCREENS_IDENTIFY = 4;
		HOUSE_SCREENS_BUY_SPECIAL = 6;
		HOUSE_SCREENS_BANK_DEPOSIT = 7;
		HOUSE_SCREENS_BANK_WITHDRAW = 8;
		HOUSE_SCREENS_HEAL = 10;
		HOUSE_SCREENS_DONATE = 11;
		HOUSE_SCREENS_PROF_NEWS = 12;
		HOUSE_SCREENS_JOIN_MENU = 13;
		HOUSE_SCREENS_NEWS = 14;
		HOUSE_SCREENS_TAVERN_SLEEP = 15;
		HOUSE_SCREENS_TAVERN_FOOD = 16;
		HOUSE_SCREENS_TRAIN = 17;
		HOUSE_SCREENS_BUY_SPELLS = 18;
		HOUSE_SCREENS_A = 19;
		HOUSE_SCREENS_B = 20;
		HOUSE_SCREENS_C = 21;
		HOUSE_SCREENS_SEER_HINT = 22;
		HOUSE_SCREENS_THREAT = 23;
		HOUSE_SCREENS_BRIBE = 24;
		HOUSE_SCREENS_TAVERN_DRINK = 25;
		HOUSE_SCREENS_TAVERN_TIP = 26;
		HOUSE_SCREENS_STAFF = 36;
		HOUSE_SCREENS_SWORD = 37;
		HOUSE_SCREENS_DAGGER = 38;
		HOUSE_SCREENS_AXE = 39;
		HOUSE_SCREENS_SPEAR = 40;
		HOUSE_SCREENS_BOW = 41;
		HOUSE_SCREENS_MACE = 42;
		HOUSE_SCREENS_BLASTER = 43;
		HOUSE_SCREENS_SHIELD = 44;
		HOUSE_SCREENS_LEATHER = 45;
		HOUSE_SCREENS_CHAIN = 46;
		HOUSE_SCREENS_PLATE = 47;
		HOUSE_SCREENS_FIRE = 48;
		HOUSE_SCREENS_AIR = 49;
		HOUSE_SCREENS_WATER = 50;
		HOUSE_SCREENS_EARTH = 51;
		HOUSE_SCREENS_SPIRIT = 52;
		HOUSE_SCREENS_MIND = 53;
		HOUSE_SCREENS_BODY = 54;
		HOUSE_SCREENS_LIGHT = 55;
		HOUSE_SCREENS_DARK = 56;
		HOUSE_SCREENS_IDENTIFY_ITEM = 57;
		HOUSE_SCREENS_MERCHANT = 58;
		HOUSE_SCREENS_REPAIR = 59;
		HOUSE_SCREENS_BODYBUILDING = 60;
		HOUSE_SCREENS_MEDITATION = 61;
		HOUSE_SCREENS_PERCEPTION = 62;
		HOUSE_SCREENS_DIPLOMACY = 63;
		HOUSE_SCREENS_THIEVERY = 64;
		HOUSE_SCREENS_DISARM_TRAPS = 65;
		HOUSE_SCREENS_LEARNING = 66;
		HOUSE_SCREENS_TRAVEL_1 = 67;
		HOUSE_SCREENS_TRAVEL_2 = 68;
		HOUSE_SCREENS_TRAVEL_3 = 69;
		HOUSE_SCREENS_HIRE_OR_DISMISS = 70;
		HOUSE_SCREENS_MORE_INFORMATION = 71;
		HOUSE_SCREENS_TEACH_SKILL = 72;
		HOUSE_SCREENS_DO_TEACH_SKILL = 73;
		HOUSE_SCREENS_JOIN_GUILD = 75;
		HOUSE_SCREENS_DO_JOIN_GUILD = 76;
		HOUSE_SCREENS_BOUNTY_HUNT_NPC = 77;
		HOUSE_SCREENS_SEER_ILOST_IT = 78;
		HOUSE_SCREENS_ARENA_PAGE = 80;
		HOUSE_SCREENS_ARENA_SQUIRE = 81;
		HOUSE_SCREENS_ARENA_KIGHT = 82;
		HOUSE_SCREENS_ARENA_LORD = 83;
		HOUSE_SCREENS_ARENA_MENU = 84;
		HOUSE_SCREENS_ARENA_GO_BACK = 85;
		HOUSE_SCREENS_ARENA_WIN = 86;
		HOUSE_SCREENS_ARENA_ALREADY_WON = 87;
		HOUSE_SCREENS_SEER_PILGRIMAGE = 88;
		HOUSE_SCREENS_STREET_NPC = 200;
		HOUSE_SCREENS_LACK_FAME = 201;
		HOUSE_SCREENS_BEG_THREAT_BRIBE = 202;
		HOUSE_SCREENS_THREAT_BRIBE = 203;

		HOUSE_SCREENS_ALL = { HOUSE_SCREENS_TEACHER, HOUSE_SCREENS_CHOOSE_PERSON, HOUSE_SCREENS_MAIN, HOUSE_SCREENS_BUY_STANDARD, HOUSE_SCREENS_SELL, HOUSE_SCREENS_IDENTIFY, HOUSE_SCREENS_BUY_SPECIAL, HOUSE_SCREENS_BANK_DEPOSIT, HOUSE_SCREENS_BANK_WITHDRAW, HOUSE_SCREENS_HEAL, HOUSE_SCREENS_DONATE, HOUSE_SCREENS_PROF_NEWS, HOUSE_SCREENS_JOIN_MENU, HOUSE_SCREENS_NEWS, HOUSE_SCREENS_TAVERN_SLEEP, HOUSE_SCREENS_TAVERN_FOOD, HOUSE_SCREENS_TRAIN, HOUSE_SCREENS_BUY_SPELLS, HOUSE_SCREENS_A, HOUSE_SCREENS_B, HOUSE_SCREENS_C, HOUSE_SCREENS_SEER_HINT, HOUSE_SCREENS_THREAT, HOUSE_SCREENS_BRIBE, HOUSE_SCREENS_TAVERN_DRINK, HOUSE_SCREENS_TAVERN_TIP, HOUSE_SCREENS_STAFF, HOUSE_SCREENS_SWORD, HOUSE_SCREENS_DAGGER, HOUSE_SCREENS_AXE, HOUSE_SCREENS_SPEAR, HOUSE_SCREENS_BOW, HOUSE_SCREENS_MACE, HOUSE_SCREENS_BLASTER, HOUSE_SCREENS_SHIELD, HOUSE_SCREENS_LEATHER, HOUSE_SCREENS_CHAIN, HOUSE_SCREENS_PLATE, HOUSE_SCREENS_FIRE, HOUSE_SCREENS_AIR, HOUSE_SCREENS_WATER, HOUSE_SCREENS_EARTH, HOUSE_SCREENS_SPIRIT, HOUSE_SCREENS_MIND, HOUSE_SCREENS_BODY, HOUSE_SCREENS_LIGHT, HOUSE_SCREENS_DARK, HOUSE_SCREENS_IDENTIFY_ITEM, HOUSE_SCREENS_MERCHANT, HOUSE_SCREENS_REPAIR, HOUSE_SCREENS_BODYBUILDING, HOUSE_SCREENS_MEDITATION, HOUSE_SCREENS_PERCEPTION, HOUSE_SCREENS_DIPLOMACY, HOUSE_SCREENS_THIEVERY, HOUSE_SCREENS_DISARM_TRAPS, HOUSE_SCREENS_LEARNING, HOUSE_SCREENS_TRAVEL_1, HOUSE_SCREENS_TRAVEL_2, HOUSE_SCREENS_TRAVEL_3, HOUSE_SCREENS_HIRE_OR_DISMISS, HOUSE_SCREENS_MORE_INFORMATION, HOUSE_SCREENS_TEACH_SKILL, HOUSE_SCREENS_DO_TEACH_SKILL, HOUSE_SCREENS_JOIN_GUILD, HOUSE_SCREENS_DO_JOIN_GUILD, HOUSE_SCREENS_BOUNTY_HUNT_NPC, HOUSE_SCREENS_SEER_ILOST_IT, HOUSE_SCREENS_ARENA_PAGE, HOUSE_SCREENS_ARENA_SQUIRE, HOUSE_SCREENS_ARENA_KIGHT, HOUSE_SCREENS_ARENA_LORD, HOUSE_SCREENS_ARENA_MENU, HOUSE_SCREENS_ARENA_GO_BACK, HOUSE_SCREENS_ARENA_WIN, HOUSE_SCREENS_ARENA_ALREADY_WON, HOUSE_SCREENS_SEER_PILGRIMAGE, HOUSE_SCREENS_STREET_NPC, HOUSE_SCREENS_LACK_FAME, HOUSE_SCREENS_BEG_THREAT_BRIBE, HOUSE_SCREENS_THREAT_BRIBE };

		ENUM_TO_STRING_HOUSE_SCREENS = { {HOUSE_SCREENS_TEACHER, "Teacher"}, {HOUSE_SCREENS_CHOOSE_PERSON, "Choose person"}, {HOUSE_SCREENS_MAIN, "Main"}, {HOUSE_SCREENS_BUY_STANDARD, "Buy standard"}, {HOUSE_SCREENS_SELL, "Sell"}, {HOUSE_SCREENS_IDENTIFY, "Identify"}, {HOUSE_SCREENS_BUY_SPECIAL, "Buy special"}, {HOUSE_SCREENS_BANK_DEPOSIT, "Bank deposit"}, {HOUSE_SCREENS_BANK_WITHDRAW, "Bank withdraw"}, {HOUSE_SCREENS_HEAL, "Heal"}, {HOUSE_SCREENS_DONATE, "Donate"}, {HOUSE_SCREENS_PROF_NEWS, "Prof news"}, {HOUSE_SCREENS_JOIN_MENU, "Join menu"}, {HOUSE_SCREENS_NEWS, "News"}, {HOUSE_SCREENS_TAVERN_SLEEP, "Tavern sleep"}, {HOUSE_SCREENS_TAVERN_FOOD, "Tavern food"}, {HOUSE_SCREENS_TRAIN, "Train"}, {HOUSE_SCREENS_BUY_SPELLS, "Buy spells"}, {HOUSE_SCREENS_A, "A"}, {HOUSE_SCREENS_B, "B"}, {HOUSE_SCREENS_C, "C"}, {HOUSE_SCREENS_SEER_HINT, "Seer hint"}, {HOUSE_SCREENS_THREAT, "Threat"}, {HOUSE_SCREENS_BRIBE, "Bribe"}, {HOUSE_SCREENS_TAVERN_DRINK, "Tavern drink"}, {HOUSE_SCREENS_TAVERN_TIP, "Tavern tip"}, {HOUSE_SCREENS_STAFF, "Staff"}, {HOUSE_SCREENS_SWORD, "Sword"}, {HOUSE_SCREENS_DAGGER, "Dagger"}, {HOUSE_SCREENS_AXE, "Axe"}, {HOUSE_SCREENS_SPEAR, "Spear"}, {HOUSE_SCREENS_BOW, "Bow"}, {HOUSE_SCREENS_MACE, "Mace"}, {HOUSE_SCREENS_BLASTER, "Blaster"}, {HOUSE_SCREENS_SHIELD, "Shield"}, {HOUSE_SCREENS_LEATHER, "Leather"}, {HOUSE_SCREENS_CHAIN, "Chain"}, {HOUSE_SCREENS_PLATE, "Plate"}, {HOUSE_SCREENS_FIRE, "Fire"}, {HOUSE_SCREENS_AIR, "Air"}, {HOUSE_SCREENS_WATER, "Water"}, {HOUSE_SCREENS_EARTH, "Earth"}, {HOUSE_SCREENS_SPIRIT, "Spirit"}, {HOUSE_SCREENS_MIND, "Mind"}, {HOUSE_SCREENS_BODY, "Body"}, {HOUSE_SCREENS_LIGHT, "Light"}, {HOUSE_SCREENS_DARK, "Dark"}, {HOUSE_SCREENS_IDENTIFY_ITEM, "Identify item"}, {HOUSE_SCREENS_MERCHANT, "Merchant"}, {HOUSE_SCREENS_REPAIR, "Repair"}, {HOUSE_SCREENS_BODYBUILDING, "Bodybuilding"}, {HOUSE_SCREENS_MEDITATION, "Meditation"}, {HOUSE_SCREENS_PERCEPTION, "Perception"}, {HOUSE_SCREENS_DIPLOMACY, "Diplomacy"}, {HOUSE_SCREENS_THIEVERY, "Thievery"}, {HOUSE_SCREENS_DISARM_TRAPS, "Disarm traps"}, {HOUSE_SCREENS_LEARNING, "Learning"}, {HOUSE_SCREENS_TRAVEL_1, "Travel 1"}, {HOUSE_SCREENS_TRAVEL_2, "Travel 2"}, {HOUSE_SCREENS_TRAVEL_3, "Travel 3"}, {HOUSE_SCREENS_HIRE_OR_DISMISS, "Hire or dismiss"}, {HOUSE_SCREENS_MORE_INFORMATION, "More information"}, {HOUSE_SCREENS_TEACH_SKILL, "Teach skill"}, {HOUSE_SCREENS_DO_TEACH_SKILL, "Do teach skill"}, {HOUSE_SCREENS_JOIN_GUILD, "Join guild"}, {HOUSE_SCREENS_DO_JOIN_GUILD, "Do join guild"}, {HOUSE_SCREENS_BOUNTY_HUNT_NPC, "Bounty hunt nPC"}, {HOUSE_SCREENS_SEER_ILOST_IT, "Seer iLost it"}, {HOUSE_SCREENS_ARENA_PAGE, "Arena page"}, {HOUSE_SCREENS_ARENA_SQUIRE, "Arena squire"}, {HOUSE_SCREENS_ARENA_KIGHT, "Arena kight"}, {HOUSE_SCREENS_ARENA_LORD, "Arena lord"}, {HOUSE_SCREENS_ARENA_MENU, "Arena menu"}, {HOUSE_SCREENS_ARENA_GO_BACK, "Arena go back"}, {HOUSE_SCREENS_ARENA_WIN, "Arena win"}, {HOUSE_SCREENS_ARENA_ALREADY_WON, "Arena already won"}, {HOUSE_SCREENS_SEER_PILGRIMAGE, "Seer pilgrimage"}, {HOUSE_SCREENS_STREET_NPC, "Street nPC"}, {HOUSE_SCREENS_LACK_FAME, "Lack fame"}, {HOUSE_SCREENS_BEG_THREAT_BRIBE, "Beg threat bribe"}, {HOUSE_SCREENS_THREAT_BRIBE, "Threat bribe"} };

		STRING_TO_ENUM_HOUSE_SCREENS = invertMap(ENUM_TO_STRING_HOUSE_SCREENS);

		detail::callbackHouseScreensInitialize();

	}

	void makeEnumHouseScreens_7()
	{
		HOUSE_SCREENS_TEACHER = -1;
		HOUSE_SCREENS_CHOOSE_PERSON = 0;
		HOUSE_SCREENS_MAIN = 1;
		HOUSE_SCREENS_BUY_STANDARD = 2;
		HOUSE_SCREENS_SELL = 3;
		HOUSE_SCREENS_IDENTIFY = 4;
		HOUSE_SCREENS_BUY_SPECIAL_MM6 = 6;
		HOUSE_SCREENS_BANK_DEPOSIT = 7;
		HOUSE_SCREENS_BANK_WITHDRAW = 8;
		HOUSE_SCREENS_HEAL = 10;
		HOUSE_SCREENS_DONATE = 11;
		HOUSE_SCREENS_PROF_NEWS = 12;
		HOUSE_SCREENS_JOIN_MENU = 13;
		HOUSE_SCREENS_NEWS = 14;
		HOUSE_SCREENS_TAVERN_SLEEP = 15;
		HOUSE_SCREENS_TAVERN_FOOD = 16;
		HOUSE_SCREENS_TRAIN = 17;
		HOUSE_SCREENS_BUY_SPELLS = 18;
		HOUSE_SCREENS_A = 19;
		HOUSE_SCREENS_B = 20;
		HOUSE_SCREENS_C = 21;
		HOUSE_SCREENS_D = 22;
		HOUSE_SCREENS_E = 23;
		HOUSE_SCREENS_F = 24;
		HOUSE_SCREENS_TAVERN_DRINK = 25;
		HOUSE_SCREENS_TAVERN_TIP = 26;
		HOUSE_SCREENS_STAFF = 36;
		HOUSE_SCREENS_SWORD = 37;
		HOUSE_SCREENS_DAGGER = 38;
		HOUSE_SCREENS_AXE = 39;
		HOUSE_SCREENS_SPEAR = 40;
		HOUSE_SCREENS_BOW = 41;
		HOUSE_SCREENS_MACE = 42;
		HOUSE_SCREENS_BLASTER = 43;
		HOUSE_SCREENS_SHIELD = 44;
		HOUSE_SCREENS_LEATHER = 45;
		HOUSE_SCREENS_CHAIN = 46;
		HOUSE_SCREENS_PLATE = 47;
		HOUSE_SCREENS_FIRE = 48;
		HOUSE_SCREENS_AIR = 49;
		HOUSE_SCREENS_WATER = 50;
		HOUSE_SCREENS_EARTH = 51;
		HOUSE_SCREENS_SPIRIT = 52;
		HOUSE_SCREENS_MIND = 53;
		HOUSE_SCREENS_BODY = 54;
		HOUSE_SCREENS_LIGHT = 55;
		HOUSE_SCREENS_DARK = 56;
		HOUSE_SCREENS_IDENTIFY_ITEM = 57;
		HOUSE_SCREENS_MERCHANT = 58;
		HOUSE_SCREENS_REPAIR = 59;
		HOUSE_SCREENS_BODYBUILDING = 60;
		HOUSE_SCREENS_MEDITATION = 61;
		HOUSE_SCREENS_PERCEPTION = 62;
		HOUSE_SCREENS_DIPLOMACY = 63;
		HOUSE_SCREENS_THIEVERY = 64;
		HOUSE_SCREENS_DISARM_TRAPS = 65;
		HOUSE_SCREENS_DODGING = 66;
		HOUSE_SCREENS_UNARMED = 67;
		HOUSE_SCREENS_IDENTIFY_MONSTER = 68;
		HOUSE_SCREENS_ARMSMASTER = 69;
		HOUSE_SCREENS_STEALING = 70;
		HOUSE_SCREENS_ALCHEMY = 71;
		HOUSE_SCREENS_LEARNING = 72;
		HOUSE_SCREENS_HIRE_OR_DISMISS = 76;
		HOUSE_SCREENS_MORE_INFORMATION = 77;
		HOUSE_SCREENS_TEACH_SKILL = 78;
		HOUSE_SCREENS_DO_TEACH_SKILL = 79;
		HOUSE_SCREENS_JOIN_GUILD = 81;
		HOUSE_SCREENS_DO_JOIN_GUILD = 82;
		HOUSE_SCREENS_BOUNTY_HUNT_NPC = 83;
		HOUSE_SCREENS_SEER_ILOST_IT = 84;
		HOUSE_SCREENS_ARENA_PAGE = 85;
		HOUSE_SCREENS_ARENA_SQUIRE = 86;
		HOUSE_SCREENS_ARENA_KIGHT = 87;
		HOUSE_SCREENS_ARENA_LORD = 88;
		HOUSE_SCREENS_ARENA_MENU = 89;
		HOUSE_SCREENS_ARENA_GO_BACK = 90;
		HOUSE_SCREENS_ARENA_WIN = 91;
		HOUSE_SCREENS_ARENA_ALREADY_WON = 92;
		HOUSE_SCREENS_DISPLAY_INVENTORY = 94;
		HOUSE_SCREENS_BUY_SPECIAL = 95;
		HOUSE_SCREENS_LEARN_SKILLS = 96;
		HOUSE_SCREENS_BOUNTY_HUNT = 99;
		HOUSE_SCREENS_PAY_FINE = 100;
		HOUSE_SCREENS_ARCOMAGE_MENU = 101;
		HOUSE_SCREENS_ARCOMAGE_RULES = 102;
		HOUSE_SCREENS_ARCOMAGE_CONDITIONS = 103;
		HOUSE_SCREENS_ARCOMAGE_PLAY = 104;
		HOUSE_SCREENS_TRAVEL_1 = 106;
		HOUSE_SCREENS_TRAVEL_2 = 107;
		HOUSE_SCREENS_TRAVEL_3 = 108;
		HOUSE_SCREENS_TRAVEL_4 = 109;
		HOUSE_SCREENS_STREET_NPC = 200;
		HOUSE_SCREENS_LACK_FAME = 201;
		HOUSE_SCREENS_BEG_THREAT_BRIBE = 202;
		HOUSE_SCREENS_THREAT_BRIBE = 203;

		HOUSE_SCREENS_ALL = { HOUSE_SCREENS_TEACHER, HOUSE_SCREENS_CHOOSE_PERSON, HOUSE_SCREENS_MAIN, HOUSE_SCREENS_BUY_STANDARD, HOUSE_SCREENS_SELL, HOUSE_SCREENS_IDENTIFY, HOUSE_SCREENS_BUY_SPECIAL_MM6, HOUSE_SCREENS_BANK_DEPOSIT, HOUSE_SCREENS_BANK_WITHDRAW, HOUSE_SCREENS_HEAL, HOUSE_SCREENS_DONATE, HOUSE_SCREENS_PROF_NEWS, HOUSE_SCREENS_JOIN_MENU, HOUSE_SCREENS_NEWS, HOUSE_SCREENS_TAVERN_SLEEP, HOUSE_SCREENS_TAVERN_FOOD, HOUSE_SCREENS_TRAIN, HOUSE_SCREENS_BUY_SPELLS, HOUSE_SCREENS_A, HOUSE_SCREENS_B, HOUSE_SCREENS_C, HOUSE_SCREENS_D, HOUSE_SCREENS_E, HOUSE_SCREENS_F, HOUSE_SCREENS_TAVERN_DRINK, HOUSE_SCREENS_TAVERN_TIP, HOUSE_SCREENS_STAFF, HOUSE_SCREENS_SWORD, HOUSE_SCREENS_DAGGER, HOUSE_SCREENS_AXE, HOUSE_SCREENS_SPEAR, HOUSE_SCREENS_BOW, HOUSE_SCREENS_MACE, HOUSE_SCREENS_BLASTER, HOUSE_SCREENS_SHIELD, HOUSE_SCREENS_LEATHER, HOUSE_SCREENS_CHAIN, HOUSE_SCREENS_PLATE, HOUSE_SCREENS_FIRE, HOUSE_SCREENS_AIR, HOUSE_SCREENS_WATER, HOUSE_SCREENS_EARTH, HOUSE_SCREENS_SPIRIT, HOUSE_SCREENS_MIND, HOUSE_SCREENS_BODY, HOUSE_SCREENS_LIGHT, HOUSE_SCREENS_DARK, HOUSE_SCREENS_IDENTIFY_ITEM, HOUSE_SCREENS_MERCHANT, HOUSE_SCREENS_REPAIR, HOUSE_SCREENS_BODYBUILDING, HOUSE_SCREENS_MEDITATION, HOUSE_SCREENS_PERCEPTION, HOUSE_SCREENS_DIPLOMACY, HOUSE_SCREENS_THIEVERY, HOUSE_SCREENS_DISARM_TRAPS, HOUSE_SCREENS_DODGING, HOUSE_SCREENS_UNARMED, HOUSE_SCREENS_IDENTIFY_MONSTER, HOUSE_SCREENS_ARMSMASTER, HOUSE_SCREENS_STEALING, HOUSE_SCREENS_ALCHEMY, HOUSE_SCREENS_LEARNING, HOUSE_SCREENS_HIRE_OR_DISMISS, HOUSE_SCREENS_MORE_INFORMATION, HOUSE_SCREENS_TEACH_SKILL, HOUSE_SCREENS_DO_TEACH_SKILL, HOUSE_SCREENS_JOIN_GUILD, HOUSE_SCREENS_DO_JOIN_GUILD, HOUSE_SCREENS_BOUNTY_HUNT_NPC, HOUSE_SCREENS_SEER_ILOST_IT, HOUSE_SCREENS_ARENA_PAGE, HOUSE_SCREENS_ARENA_SQUIRE, HOUSE_SCREENS_ARENA_KIGHT, HOUSE_SCREENS_ARENA_LORD, HOUSE_SCREENS_ARENA_MENU, HOUSE_SCREENS_ARENA_GO_BACK, HOUSE_SCREENS_ARENA_WIN, HOUSE_SCREENS_ARENA_ALREADY_WON, HOUSE_SCREENS_DISPLAY_INVENTORY, HOUSE_SCREENS_BUY_SPECIAL, HOUSE_SCREENS_LEARN_SKILLS, HOUSE_SCREENS_BOUNTY_HUNT, HOUSE_SCREENS_PAY_FINE, HOUSE_SCREENS_ARCOMAGE_MENU, HOUSE_SCREENS_ARCOMAGE_RULES, HOUSE_SCREENS_ARCOMAGE_CONDITIONS, HOUSE_SCREENS_ARCOMAGE_PLAY, HOUSE_SCREENS_TRAVEL_1, HOUSE_SCREENS_TRAVEL_2, HOUSE_SCREENS_TRAVEL_3, HOUSE_SCREENS_TRAVEL_4, HOUSE_SCREENS_STREET_NPC, HOUSE_SCREENS_LACK_FAME, HOUSE_SCREENS_BEG_THREAT_BRIBE, HOUSE_SCREENS_THREAT_BRIBE };

		ENUM_TO_STRING_HOUSE_SCREENS = { {HOUSE_SCREENS_TEACHER, "Teacher"}, {HOUSE_SCREENS_CHOOSE_PERSON, "Choose person"}, {HOUSE_SCREENS_MAIN, "Main"}, {HOUSE_SCREENS_BUY_STANDARD, "Buy standard"}, {HOUSE_SCREENS_SELL, "Sell"}, {HOUSE_SCREENS_IDENTIFY, "Identify"}, {HOUSE_SCREENS_BUY_SPECIAL_MM6, "Buy special mM6"}, {HOUSE_SCREENS_BANK_DEPOSIT, "Bank deposit"}, {HOUSE_SCREENS_BANK_WITHDRAW, "Bank withdraw"}, {HOUSE_SCREENS_HEAL, "Heal"}, {HOUSE_SCREENS_DONATE, "Donate"}, {HOUSE_SCREENS_PROF_NEWS, "Prof news"}, {HOUSE_SCREENS_JOIN_MENU, "Join menu"}, {HOUSE_SCREENS_NEWS, "News"}, {HOUSE_SCREENS_TAVERN_SLEEP, "Tavern sleep"}, {HOUSE_SCREENS_TAVERN_FOOD, "Tavern food"}, {HOUSE_SCREENS_TRAIN, "Train"}, {HOUSE_SCREENS_BUY_SPELLS, "Buy spells"}, {HOUSE_SCREENS_A, "A"}, {HOUSE_SCREENS_B, "B"}, {HOUSE_SCREENS_C, "C"}, {HOUSE_SCREENS_D, "D"}, {HOUSE_SCREENS_E, "E"}, {HOUSE_SCREENS_F, "F"}, {HOUSE_SCREENS_TAVERN_DRINK, "Tavern drink"}, {HOUSE_SCREENS_TAVERN_TIP, "Tavern tip"}, {HOUSE_SCREENS_STAFF, "Staff"}, {HOUSE_SCREENS_SWORD, "Sword"}, {HOUSE_SCREENS_DAGGER, "Dagger"}, {HOUSE_SCREENS_AXE, "Axe"}, {HOUSE_SCREENS_SPEAR, "Spear"}, {HOUSE_SCREENS_BOW, "Bow"}, {HOUSE_SCREENS_MACE, "Mace"}, {HOUSE_SCREENS_BLASTER, "Blaster"}, {HOUSE_SCREENS_SHIELD, "Shield"}, {HOUSE_SCREENS_LEATHER, "Leather"}, {HOUSE_SCREENS_CHAIN, "Chain"}, {HOUSE_SCREENS_PLATE, "Plate"}, {HOUSE_SCREENS_FIRE, "Fire"}, {HOUSE_SCREENS_AIR, "Air"}, {HOUSE_SCREENS_WATER, "Water"}, {HOUSE_SCREENS_EARTH, "Earth"}, {HOUSE_SCREENS_SPIRIT, "Spirit"}, {HOUSE_SCREENS_MIND, "Mind"}, {HOUSE_SCREENS_BODY, "Body"}, {HOUSE_SCREENS_LIGHT, "Light"}, {HOUSE_SCREENS_DARK, "Dark"}, {HOUSE_SCREENS_IDENTIFY_ITEM, "Identify item"}, {HOUSE_SCREENS_MERCHANT, "Merchant"}, {HOUSE_SCREENS_REPAIR, "Repair"}, {HOUSE_SCREENS_BODYBUILDING, "Bodybuilding"}, {HOUSE_SCREENS_MEDITATION, "Meditation"}, {HOUSE_SCREENS_PERCEPTION, "Perception"}, {HOUSE_SCREENS_DIPLOMACY, "Diplomacy"}, {HOUSE_SCREENS_THIEVERY, "Thievery"}, {HOUSE_SCREENS_DISARM_TRAPS, "Disarm traps"}, {HOUSE_SCREENS_DODGING, "Dodging"}, {HOUSE_SCREENS_UNARMED, "Unarmed"}, {HOUSE_SCREENS_IDENTIFY_MONSTER, "Identify monster"}, {HOUSE_SCREENS_ARMSMASTER, "Armsmaster"}, {HOUSE_SCREENS_STEALING, "Stealing"}, {HOUSE_SCREENS_ALCHEMY, "Alchemy"}, {HOUSE_SCREENS_LEARNING, "Learning"}, {HOUSE_SCREENS_HIRE_OR_DISMISS, "Hire or dismiss"}, {HOUSE_SCREENS_MORE_INFORMATION, "More information"}, {HOUSE_SCREENS_TEACH_SKILL, "Teach skill"}, {HOUSE_SCREENS_DO_TEACH_SKILL, "Do teach skill"}, {HOUSE_SCREENS_JOIN_GUILD, "Join guild"}, {HOUSE_SCREENS_DO_JOIN_GUILD, "Do join guild"}, {HOUSE_SCREENS_BOUNTY_HUNT_NPC, "Bounty hunt nPC"}, {HOUSE_SCREENS_SEER_ILOST_IT, "Seer iLost it"}, {HOUSE_SCREENS_ARENA_PAGE, "Arena page"}, {HOUSE_SCREENS_ARENA_SQUIRE, "Arena squire"}, {HOUSE_SCREENS_ARENA_KIGHT, "Arena kight"}, {HOUSE_SCREENS_ARENA_LORD, "Arena lord"}, {HOUSE_SCREENS_ARENA_MENU, "Arena menu"}, {HOUSE_SCREENS_ARENA_GO_BACK, "Arena go back"}, {HOUSE_SCREENS_ARENA_WIN, "Arena win"}, {HOUSE_SCREENS_ARENA_ALREADY_WON, "Arena already won"}, {HOUSE_SCREENS_DISPLAY_INVENTORY, "Display inventory"}, {HOUSE_SCREENS_BUY_SPECIAL, "Buy special"}, {HOUSE_SCREENS_LEARN_SKILLS, "Learn skills"}, {HOUSE_SCREENS_BOUNTY_HUNT, "Bounty hunt"}, {HOUSE_SCREENS_PAY_FINE, "Pay fine"}, {HOUSE_SCREENS_ARCOMAGE_MENU, "Arcomage menu"}, {HOUSE_SCREENS_ARCOMAGE_RULES, "Arcomage rules"}, {HOUSE_SCREENS_ARCOMAGE_CONDITIONS, "Arcomage conditions"}, {HOUSE_SCREENS_ARCOMAGE_PLAY, "Arcomage play"}, {HOUSE_SCREENS_TRAVEL_1, "Travel 1"}, {HOUSE_SCREENS_TRAVEL_2, "Travel 2"}, {HOUSE_SCREENS_TRAVEL_3, "Travel 3"}, {HOUSE_SCREENS_TRAVEL_4, "Travel 4"}, {HOUSE_SCREENS_STREET_NPC, "Street nPC"}, {HOUSE_SCREENS_LACK_FAME, "Lack fame"}, {HOUSE_SCREENS_BEG_THREAT_BRIBE, "Beg threat bribe"}, {HOUSE_SCREENS_THREAT_BRIBE, "Threat bribe"} };

		STRING_TO_ENUM_HOUSE_SCREENS = invertMap(ENUM_TO_STRING_HOUSE_SCREENS);

		detail::callbackHouseScreensInitialize();

	}

	void makeEnumHouseScreens_8()
	{
		HOUSE_SCREENS_TEACHER = -1;
		HOUSE_SCREENS_CHOOSE_PERSON = 0;
		HOUSE_SCREENS_MAIN = 1;
		HOUSE_SCREENS_BUY_STANDARD = 2;
		HOUSE_SCREENS_SELL = 3;
		HOUSE_SCREENS_IDENTIFY = 4;
		HOUSE_SCREENS_BUY_SPECIAL_MM6 = 6;
		HOUSE_SCREENS_BANK_DEPOSIT = 7;
		HOUSE_SCREENS_BANK_WITHDRAW = 8;
		HOUSE_SCREENS_HEAL = 10;
		HOUSE_SCREENS_DONATE = 11;
		HOUSE_SCREENS_PROF_NEWS = 12;
		HOUSE_SCREENS_JOIN_MENU = 13;
		HOUSE_SCREENS_NEWS = 14;
		HOUSE_SCREENS_TAVERN_SLEEP = 15;
		HOUSE_SCREENS_TAVERN_FOOD = 16;
		HOUSE_SCREENS_TRAIN = 17;
		HOUSE_SCREENS_BUY_SPELLS = 18;
		HOUSE_SCREENS_A = 19;
		HOUSE_SCREENS_B = 20;
		HOUSE_SCREENS_C = 21;
		HOUSE_SCREENS_D = 22;
		HOUSE_SCREENS_E = 23;
		HOUSE_SCREENS_F = 24;
		HOUSE_SCREENS_TAVERN_DRINK = 25;
		HOUSE_SCREENS_TAVERN_TIP = 26;
		HOUSE_SCREENS_STAFF = 36;
		HOUSE_SCREENS_SWORD = 37;
		HOUSE_SCREENS_DAGGER = 38;
		HOUSE_SCREENS_AXE = 39;
		HOUSE_SCREENS_SPEAR = 40;
		HOUSE_SCREENS_BOW = 41;
		HOUSE_SCREENS_MACE = 42;
		HOUSE_SCREENS_BLASTER = 43;
		HOUSE_SCREENS_SHIELD = 44;
		HOUSE_SCREENS_LEATHER = 45;
		HOUSE_SCREENS_CHAIN = 46;
		HOUSE_SCREENS_PLATE = 47;
		HOUSE_SCREENS_FIRE = 48;
		HOUSE_SCREENS_AIR = 49;
		HOUSE_SCREENS_WATER = 50;
		HOUSE_SCREENS_EARTH = 51;
		HOUSE_SCREENS_SPIRIT = 52;
		HOUSE_SCREENS_MIND = 53;
		HOUSE_SCREENS_BODY = 54;
		HOUSE_SCREENS_LIGHT = 55;
		HOUSE_SCREENS_DARK = 56;
		HOUSE_SCREENS_DARK_ELF_ABILITY = 57;
		HOUSE_SCREENS_VAMPIRE_ABILITY = 58;
		HOUSE_SCREENS_DRAGON_ABILITY = 59;
		HOUSE_SCREENS_IDENTIFY_ITEM = 60;
		HOUSE_SCREENS_MERCHANT = 61;
		HOUSE_SCREENS_REPAIR = 62;
		HOUSE_SCREENS_BODYBUILDING = 63;
		HOUSE_SCREENS_MEDITATION = 64;
		HOUSE_SCREENS_PERCEPTION = 65;
		HOUSE_SCREENS_REGENERATION = 66;
		HOUSE_SCREENS_DISARM_TRAPS = 67;
		HOUSE_SCREENS_DODGING = 68;
		HOUSE_SCREENS_UNARMED = 69;
		HOUSE_SCREENS_IDENTIFY_MONSTER = 70;
		HOUSE_SCREENS_ARMSMASTER = 71;
		HOUSE_SCREENS_STEALING = 72;
		HOUSE_SCREENS_ALCHEMY = 73;
		HOUSE_SCREENS_LEARNING = 74;
		HOUSE_SCREENS_HIRE_OR_DISMISS = 76;
		HOUSE_SCREENS_MORE_INFORMATION = 77;
		HOUSE_SCREENS_TEACH_SKILL = 78;
		HOUSE_SCREENS_DO_TEACH_SKILL = 79;
		HOUSE_SCREENS_JOIN_GUILD = 81;
		HOUSE_SCREENS_DO_JOIN_GUILD = 82;
		HOUSE_SCREENS_BOUNTY_HUNT_NPC = 83;
		HOUSE_SCREENS_SEER_ILOST_IT = 84;
		HOUSE_SCREENS_ARENA_PAGE = 85;
		HOUSE_SCREENS_ARENA_SQUIRE = 86;
		HOUSE_SCREENS_ARENA_KIGHT = 87;
		HOUSE_SCREENS_ARENA_LORD = 88;
		HOUSE_SCREENS_ARENA_MENU = 89;
		HOUSE_SCREENS_ARENA_GO_BACK = 90;
		HOUSE_SCREENS_ARENA_WIN = 91;
		HOUSE_SCREENS_ARENA_ALREADY_WON = 92;
		HOUSE_SCREENS_DISPLAY_INVENTORY = 94;
		HOUSE_SCREENS_BUY_SPECIAL = 95;
		HOUSE_SCREENS_LEARN_SKILLS = 96;
		HOUSE_SCREENS_BOUNTY_HUNT = 99;
		HOUSE_SCREENS_PAY_FINE = 100;
		HOUSE_SCREENS_ARCOMAGE_MENU = 101;
		HOUSE_SCREENS_ARCOMAGE_RULES = 102;
		HOUSE_SCREENS_ARCOMAGE_CONDITIONS = 103;
		HOUSE_SCREENS_ARCOMAGE_PLAY = 104;
		HOUSE_SCREENS_TRAVEL_1 = 106;
		HOUSE_SCREENS_TRAVEL_2 = 107;
		HOUSE_SCREENS_TRAVEL_3 = 108;
		HOUSE_SCREENS_TRAVEL_4 = 109;
		HOUSE_SCREENS_BUY_SPELLS_FIRE = 110;
		HOUSE_SCREENS_BUY_SPELLS_AIR = 111;
		HOUSE_SCREENS_BUY_SPELLS_WATER = 112;
		HOUSE_SCREENS_BUY_SPELLS_EARTH = 113;
		HOUSE_SCREENS_BUY_SPELLS_SPIRIT = 114;
		HOUSE_SCREENS_BUY_SPELLS_MIND = 115;
		HOUSE_SCREENS_BUY_SPELLS_BODY = 116;
		HOUSE_SCREENS_BUY_SPELLS_LIGHT = 117;
		HOUSE_SCREENS_BUY_SPELLS_DARK = 118;
		HOUSE_SCREENS_JOIN_ROSTER = 119;
		HOUSE_SCREENS_JOIN_ROSTER_NO = 120;
		HOUSE_SCREENS_STREET_NPC = 200;
		HOUSE_SCREENS_LACK_FAME = 201;
		HOUSE_SCREENS_BEG_THREAT_BRIBE = 202;
		HOUSE_SCREENS_THREAT_BRIBE = 203;

		HOUSE_SCREENS_ALL = { HOUSE_SCREENS_TEACHER, HOUSE_SCREENS_CHOOSE_PERSON, HOUSE_SCREENS_MAIN, HOUSE_SCREENS_BUY_STANDARD, HOUSE_SCREENS_SELL, HOUSE_SCREENS_IDENTIFY, HOUSE_SCREENS_BUY_SPECIAL_MM6, HOUSE_SCREENS_BANK_DEPOSIT, HOUSE_SCREENS_BANK_WITHDRAW, HOUSE_SCREENS_HEAL, HOUSE_SCREENS_DONATE, HOUSE_SCREENS_PROF_NEWS, HOUSE_SCREENS_JOIN_MENU, HOUSE_SCREENS_NEWS, HOUSE_SCREENS_TAVERN_SLEEP, HOUSE_SCREENS_TAVERN_FOOD, HOUSE_SCREENS_TRAIN, HOUSE_SCREENS_BUY_SPELLS, HOUSE_SCREENS_A, HOUSE_SCREENS_B, HOUSE_SCREENS_C, HOUSE_SCREENS_D, HOUSE_SCREENS_E, HOUSE_SCREENS_F, HOUSE_SCREENS_TAVERN_DRINK, HOUSE_SCREENS_TAVERN_TIP, HOUSE_SCREENS_STAFF, HOUSE_SCREENS_SWORD, HOUSE_SCREENS_DAGGER, HOUSE_SCREENS_AXE, HOUSE_SCREENS_SPEAR, HOUSE_SCREENS_BOW, HOUSE_SCREENS_MACE, HOUSE_SCREENS_BLASTER, HOUSE_SCREENS_SHIELD, HOUSE_SCREENS_LEATHER, HOUSE_SCREENS_CHAIN, HOUSE_SCREENS_PLATE, HOUSE_SCREENS_FIRE, HOUSE_SCREENS_AIR, HOUSE_SCREENS_WATER, HOUSE_SCREENS_EARTH, HOUSE_SCREENS_SPIRIT, HOUSE_SCREENS_MIND, HOUSE_SCREENS_BODY, HOUSE_SCREENS_LIGHT, HOUSE_SCREENS_DARK, HOUSE_SCREENS_DARK_ELF_ABILITY, HOUSE_SCREENS_VAMPIRE_ABILITY, HOUSE_SCREENS_DRAGON_ABILITY, HOUSE_SCREENS_IDENTIFY_ITEM, HOUSE_SCREENS_MERCHANT, HOUSE_SCREENS_REPAIR, HOUSE_SCREENS_BODYBUILDING, HOUSE_SCREENS_MEDITATION, HOUSE_SCREENS_PERCEPTION, HOUSE_SCREENS_REGENERATION, HOUSE_SCREENS_DISARM_TRAPS, HOUSE_SCREENS_DODGING, HOUSE_SCREENS_UNARMED, HOUSE_SCREENS_IDENTIFY_MONSTER, HOUSE_SCREENS_ARMSMASTER, HOUSE_SCREENS_STEALING, HOUSE_SCREENS_ALCHEMY, HOUSE_SCREENS_LEARNING, HOUSE_SCREENS_HIRE_OR_DISMISS, HOUSE_SCREENS_MORE_INFORMATION, HOUSE_SCREENS_TEACH_SKILL, HOUSE_SCREENS_DO_TEACH_SKILL, HOUSE_SCREENS_JOIN_GUILD, HOUSE_SCREENS_DO_JOIN_GUILD, HOUSE_SCREENS_BOUNTY_HUNT_NPC, HOUSE_SCREENS_SEER_ILOST_IT, HOUSE_SCREENS_ARENA_PAGE, HOUSE_SCREENS_ARENA_SQUIRE, HOUSE_SCREENS_ARENA_KIGHT, HOUSE_SCREENS_ARENA_LORD, HOUSE_SCREENS_ARENA_MENU, HOUSE_SCREENS_ARENA_GO_BACK, HOUSE_SCREENS_ARENA_WIN, HOUSE_SCREENS_ARENA_ALREADY_WON, HOUSE_SCREENS_DISPLAY_INVENTORY, HOUSE_SCREENS_BUY_SPECIAL, HOUSE_SCREENS_LEARN_SKILLS, HOUSE_SCREENS_BOUNTY_HUNT, HOUSE_SCREENS_PAY_FINE, HOUSE_SCREENS_ARCOMAGE_MENU, HOUSE_SCREENS_ARCOMAGE_RULES, HOUSE_SCREENS_ARCOMAGE_CONDITIONS, HOUSE_SCREENS_ARCOMAGE_PLAY, HOUSE_SCREENS_TRAVEL_1, HOUSE_SCREENS_TRAVEL_2, HOUSE_SCREENS_TRAVEL_3, HOUSE_SCREENS_TRAVEL_4, HOUSE_SCREENS_BUY_SPELLS_FIRE, HOUSE_SCREENS_BUY_SPELLS_AIR, HOUSE_SCREENS_BUY_SPELLS_WATER, HOUSE_SCREENS_BUY_SPELLS_EARTH, HOUSE_SCREENS_BUY_SPELLS_SPIRIT, HOUSE_SCREENS_BUY_SPELLS_MIND, HOUSE_SCREENS_BUY_SPELLS_BODY, HOUSE_SCREENS_BUY_SPELLS_LIGHT, HOUSE_SCREENS_BUY_SPELLS_DARK, HOUSE_SCREENS_JOIN_ROSTER, HOUSE_SCREENS_JOIN_ROSTER_NO, HOUSE_SCREENS_STREET_NPC, HOUSE_SCREENS_LACK_FAME, HOUSE_SCREENS_BEG_THREAT_BRIBE, HOUSE_SCREENS_THREAT_BRIBE };

		ENUM_TO_STRING_HOUSE_SCREENS = { {HOUSE_SCREENS_TEACHER, "Teacher"}, {HOUSE_SCREENS_CHOOSE_PERSON, "Choose person"}, {HOUSE_SCREENS_MAIN, "Main"}, {HOUSE_SCREENS_BUY_STANDARD, "Buy standard"}, {HOUSE_SCREENS_SELL, "Sell"}, {HOUSE_SCREENS_IDENTIFY, "Identify"}, {HOUSE_SCREENS_BUY_SPECIAL_MM6, "Buy special mM6"}, {HOUSE_SCREENS_BANK_DEPOSIT, "Bank deposit"}, {HOUSE_SCREENS_BANK_WITHDRAW, "Bank withdraw"}, {HOUSE_SCREENS_HEAL, "Heal"}, {HOUSE_SCREENS_DONATE, "Donate"}, {HOUSE_SCREENS_PROF_NEWS, "Prof news"}, {HOUSE_SCREENS_JOIN_MENU, "Join menu"}, {HOUSE_SCREENS_NEWS, "News"}, {HOUSE_SCREENS_TAVERN_SLEEP, "Tavern sleep"}, {HOUSE_SCREENS_TAVERN_FOOD, "Tavern food"}, {HOUSE_SCREENS_TRAIN, "Train"}, {HOUSE_SCREENS_BUY_SPELLS, "Buy spells"}, {HOUSE_SCREENS_A, "A"}, {HOUSE_SCREENS_B, "B"}, {HOUSE_SCREENS_C, "C"}, {HOUSE_SCREENS_D, "D"}, {HOUSE_SCREENS_E, "E"}, {HOUSE_SCREENS_F, "F"}, {HOUSE_SCREENS_TAVERN_DRINK, "Tavern drink"}, {HOUSE_SCREENS_TAVERN_TIP, "Tavern tip"}, {HOUSE_SCREENS_STAFF, "Staff"}, {HOUSE_SCREENS_SWORD, "Sword"}, {HOUSE_SCREENS_DAGGER, "Dagger"}, {HOUSE_SCREENS_AXE, "Axe"}, {HOUSE_SCREENS_SPEAR, "Spear"}, {HOUSE_SCREENS_BOW, "Bow"}, {HOUSE_SCREENS_MACE, "Mace"}, {HOUSE_SCREENS_BLASTER, "Blaster"}, {HOUSE_SCREENS_SHIELD, "Shield"}, {HOUSE_SCREENS_LEATHER, "Leather"}, {HOUSE_SCREENS_CHAIN, "Chain"}, {HOUSE_SCREENS_PLATE, "Plate"}, {HOUSE_SCREENS_FIRE, "Fire"}, {HOUSE_SCREENS_AIR, "Air"}, {HOUSE_SCREENS_WATER, "Water"}, {HOUSE_SCREENS_EARTH, "Earth"}, {HOUSE_SCREENS_SPIRIT, "Spirit"}, {HOUSE_SCREENS_MIND, "Mind"}, {HOUSE_SCREENS_BODY, "Body"}, {HOUSE_SCREENS_LIGHT, "Light"}, {HOUSE_SCREENS_DARK, "Dark"}, {HOUSE_SCREENS_DARK_ELF_ABILITY, "Dark elf ability"}, {HOUSE_SCREENS_VAMPIRE_ABILITY, "Vampire ability"}, {HOUSE_SCREENS_DRAGON_ABILITY, "Dragon ability"}, {HOUSE_SCREENS_IDENTIFY_ITEM, "Identify item"}, {HOUSE_SCREENS_MERCHANT, "Merchant"}, {HOUSE_SCREENS_REPAIR, "Repair"}, {HOUSE_SCREENS_BODYBUILDING, "Bodybuilding"}, {HOUSE_SCREENS_MEDITATION, "Meditation"}, {HOUSE_SCREENS_PERCEPTION, "Perception"}, {HOUSE_SCREENS_REGENERATION, "Regeneration"}, {HOUSE_SCREENS_DISARM_TRAPS, "Disarm traps"}, {HOUSE_SCREENS_DODGING, "Dodging"}, {HOUSE_SCREENS_UNARMED, "Unarmed"}, {HOUSE_SCREENS_IDENTIFY_MONSTER, "Identify monster"}, {HOUSE_SCREENS_ARMSMASTER, "Armsmaster"}, {HOUSE_SCREENS_STEALING, "Stealing"}, {HOUSE_SCREENS_ALCHEMY, "Alchemy"}, {HOUSE_SCREENS_LEARNING, "Learning"}, {HOUSE_SCREENS_HIRE_OR_DISMISS, "Hire or dismiss"}, {HOUSE_SCREENS_MORE_INFORMATION, "More information"}, {HOUSE_SCREENS_TEACH_SKILL, "Teach skill"}, {HOUSE_SCREENS_DO_TEACH_SKILL, "Do teach skill"}, {HOUSE_SCREENS_JOIN_GUILD, "Join guild"}, {HOUSE_SCREENS_DO_JOIN_GUILD, "Do join guild"}, {HOUSE_SCREENS_BOUNTY_HUNT_NPC, "Bounty hunt nPC"}, {HOUSE_SCREENS_SEER_ILOST_IT, "Seer iLost it"}, {HOUSE_SCREENS_ARENA_PAGE, "Arena page"}, {HOUSE_SCREENS_ARENA_SQUIRE, "Arena squire"}, {HOUSE_SCREENS_ARENA_KIGHT, "Arena kight"}, {HOUSE_SCREENS_ARENA_LORD, "Arena lord"}, {HOUSE_SCREENS_ARENA_MENU, "Arena menu"}, {HOUSE_SCREENS_ARENA_GO_BACK, "Arena go back"}, {HOUSE_SCREENS_ARENA_WIN, "Arena win"}, {HOUSE_SCREENS_ARENA_ALREADY_WON, "Arena already won"}, {HOUSE_SCREENS_DISPLAY_INVENTORY, "Display inventory"}, {HOUSE_SCREENS_BUY_SPECIAL, "Buy special"}, {HOUSE_SCREENS_LEARN_SKILLS, "Learn skills"}, {HOUSE_SCREENS_BOUNTY_HUNT, "Bounty hunt"}, {HOUSE_SCREENS_PAY_FINE, "Pay fine"}, {HOUSE_SCREENS_ARCOMAGE_MENU, "Arcomage menu"}, {HOUSE_SCREENS_ARCOMAGE_RULES, "Arcomage rules"}, {HOUSE_SCREENS_ARCOMAGE_CONDITIONS, "Arcomage conditions"}, {HOUSE_SCREENS_ARCOMAGE_PLAY, "Arcomage play"}, {HOUSE_SCREENS_TRAVEL_1, "Travel 1"}, {HOUSE_SCREENS_TRAVEL_2, "Travel 2"}, {HOUSE_SCREENS_TRAVEL_3, "Travel 3"}, {HOUSE_SCREENS_TRAVEL_4, "Travel 4"}, {HOUSE_SCREENS_BUY_SPELLS_FIRE, "Buy spells fire"}, {HOUSE_SCREENS_BUY_SPELLS_AIR, "Buy spells air"}, {HOUSE_SCREENS_BUY_SPELLS_WATER, "Buy spells water"}, {HOUSE_SCREENS_BUY_SPELLS_EARTH, "Buy spells earth"}, {HOUSE_SCREENS_BUY_SPELLS_SPIRIT, "Buy spells spirit"}, {HOUSE_SCREENS_BUY_SPELLS_MIND, "Buy spells mind"}, {HOUSE_SCREENS_BUY_SPELLS_BODY, "Buy spells body"}, {HOUSE_SCREENS_BUY_SPELLS_LIGHT, "Buy spells light"}, {HOUSE_SCREENS_BUY_SPELLS_DARK, "Buy spells dark"}, {HOUSE_SCREENS_JOIN_ROSTER, "Join roster"}, {HOUSE_SCREENS_JOIN_ROSTER_NO, "Join roster no"}, {HOUSE_SCREENS_STREET_NPC, "Street nPC"}, {HOUSE_SCREENS_LACK_FAME, "Lack fame"}, {HOUSE_SCREENS_BEG_THREAT_BRIBE, "Beg threat bribe"}, {HOUSE_SCREENS_THREAT_BRIBE, "Threat bribe"} };

		STRING_TO_ENUM_HOUSE_SCREENS = invertMap(ENUM_TO_STRING_HOUSE_SCREENS);

		detail::callbackHouseScreensInitialize();

	}

bool checkHouseScreensValidity(int64_t value)
{
	return detail::checkValidValue(HOUSE_SCREENS_ALL, value, detail::callbackCheckHouseScreensValidity);
}


	// Screens //

	int64_t 
		SCREEN_GAME = INVALID_ID,
		SCREEN_MENU = INVALID_ID,
		SCREEN_CONTROLS = INVALID_ID,
		SCREEN_INFO = INVALID_ID,
		SCREEN_NPC = INVALID_ID,
		SCREEN_REST = INVALID_ID,
		SCREEN_QUERY = INVALID_ID,
		SCREEN_INVENTORY = INVALID_ID,
		SCREEN_SPELL_BOOK = INVALID_ID,
		SCREEN_NEW_GAME_BRIEFING = INVALID_ID,
		SCREEN_CHEST = INVALID_ID,
		SCREEN_SAVE_GAME = INVALID_ID,
		SCREEN_LOAD_GAME = INVALID_ID,
		SCREEN_HOUSE = INVALID_ID,
		SCREEN_INVENTORY_IN_SHOP = INVALID_ID,
		SCREEN_INVENTORY_IN_CHEST = INVALID_ID,
		SCREEN_MOVIE = INVALID_ID,
		SCREEN_WALK_TO_MAP = INVALID_ID,
		SCREEN_MAP_ENTRANCE = INVALID_ID,
		SCREEN_SIMPLE_MESSAGE = INVALID_ID,
		SCREEN_SELECT_TARGET = INVALID_ID,
		SCREEN_CREATE_PARTY = INVALID_ID,
		SCREEN_ESC_MESSAGE = INVALID_ID,
		SCREEN_ITEM_SPELL = INVALID_ID,
		SCREEN_KEY_CONFIG = INVALID_ID,
		SCREEN_VIDEO_OPTIONS = INVALID_ID,
		SCREEN_ADVENTURERS_INN = INVALID_ID,
		SCREEN_ITEM_SPELL_MM6 = INVALID_ID,
		SCREEN_QUICK_REFERENCE = INVALID_ID;

	std::vector<int64_t> SCREENS_ALL;
	std::map<int64_t, std::string> ENUM_TO_STRING_SCREENS;
	std::map<std::string, int64_t> STRING_TO_ENUM_SCREENS;

	void makeEnumScreens_6()
	{
		SCREEN_GAME = 0;
		SCREEN_MENU = 1;
		SCREEN_CONTROLS = 2;
		SCREEN_INFO = 3;
		SCREEN_NPC = 4;
		SCREEN_REST = 5;
		SCREEN_QUERY = 6;
		SCREEN_INVENTORY = 7;
		SCREEN_SPELL_BOOK = 8;
		SCREEN_NEW_GAME_BRIEFING = 9;
		SCREEN_CHEST = 10;
		SCREEN_SAVE_GAME = 11;
		SCREEN_LOAD_GAME = 12;
		SCREEN_HOUSE = 13;
		SCREEN_INVENTORY_IN_SHOP = 14;
		SCREEN_INVENTORY_IN_CHEST = 15;
		SCREEN_MOVIE = 16;
		SCREEN_WALK_TO_MAP = 17;
		SCREEN_MAP_ENTRANCE = 18;
		SCREEN_SIMPLE_MESSAGE = 19;
		SCREEN_SELECT_TARGET = 20;
		SCREEN_CREATE_PARTY = 21;
		SCREEN_ESC_MESSAGE = 22;
		SCREEN_ITEM_SPELL = 23;
		SCREEN_KEY_CONFIG = 26;
		SCREEN_VIDEO_OPTIONS = 28;
		SCREEN_ADVENTURERS_INN = 29;
		SCREEN_ITEM_SPELL_MM6 = 103;
		SCREEN_QUICK_REFERENCE = 104;

		SCREENS_ALL = { SCREEN_GAME, SCREEN_MENU, SCREEN_CONTROLS, SCREEN_INFO, SCREEN_NPC, SCREEN_REST, SCREEN_QUERY, SCREEN_INVENTORY, SCREEN_SPELL_BOOK, SCREEN_NEW_GAME_BRIEFING, SCREEN_CHEST, SCREEN_SAVE_GAME, SCREEN_LOAD_GAME, SCREEN_HOUSE, SCREEN_INVENTORY_IN_SHOP, SCREEN_INVENTORY_IN_CHEST, SCREEN_MOVIE, SCREEN_WALK_TO_MAP, SCREEN_MAP_ENTRANCE, SCREEN_SIMPLE_MESSAGE, SCREEN_SELECT_TARGET, SCREEN_CREATE_PARTY, SCREEN_ESC_MESSAGE, SCREEN_ITEM_SPELL, SCREEN_KEY_CONFIG, SCREEN_VIDEO_OPTIONS, SCREEN_ADVENTURERS_INN, SCREEN_ITEM_SPELL_MM6, SCREEN_QUICK_REFERENCE };

		ENUM_TO_STRING_SCREENS = { {SCREEN_GAME, "Game"}, {SCREEN_MENU, "Menu"}, {SCREEN_CONTROLS, "Controls"}, {SCREEN_INFO, "Info"}, {SCREEN_NPC, "NPC"}, {SCREEN_REST, "Rest"}, {SCREEN_QUERY, "Query"}, {SCREEN_INVENTORY, "Inventory"}, {SCREEN_SPELL_BOOK, "Spell book"}, {SCREEN_NEW_GAME_BRIEFING, "New game briefing"}, {SCREEN_CHEST, "Chest"}, {SCREEN_SAVE_GAME, "Save game"}, {SCREEN_LOAD_GAME, "Load game"}, {SCREEN_HOUSE, "House"}, {SCREEN_INVENTORY_IN_SHOP, "Inventory in shop"}, {SCREEN_INVENTORY_IN_CHEST, "Inventory in chest"}, {SCREEN_MOVIE, "Movie"}, {SCREEN_WALK_TO_MAP, "Walk to map"}, {SCREEN_MAP_ENTRANCE, "Map entrance"}, {SCREEN_SIMPLE_MESSAGE, "Simple message"}, {SCREEN_SELECT_TARGET, "Select target"}, {SCREEN_CREATE_PARTY, "Create party"}, {SCREEN_ESC_MESSAGE, "Esc message"}, {SCREEN_ITEM_SPELL, "Item spell"}, {SCREEN_KEY_CONFIG, "Key config"}, {SCREEN_VIDEO_OPTIONS, "Video options"}, {SCREEN_ADVENTURERS_INN, "Adventurers inn"}, {SCREEN_ITEM_SPELL_MM6, "Item spell mM6"}, {SCREEN_QUICK_REFERENCE, "Quick reference"} };

		STRING_TO_ENUM_SCREENS = invertMap(ENUM_TO_STRING_SCREENS);

		detail::callbackScreensInitialize();

	}

	void makeEnumScreens_7()
	{
		SCREEN_GAME = 0;
		SCREEN_MENU = 1;
		SCREEN_CONTROLS = 2;
		SCREEN_INFO = 3;
		SCREEN_NPC = 4;
		SCREEN_REST = 5;
		SCREEN_QUERY = 6;
		SCREEN_INVENTORY = 7;
		SCREEN_SPELL_BOOK = 8;
		SCREEN_NEW_GAME_BRIEFING = 9;
		SCREEN_CHEST = 10;
		SCREEN_SAVE_GAME = 11;
		SCREEN_LOAD_GAME = 12;
		SCREEN_HOUSE = 13;
		SCREEN_INVENTORY_IN_SHOP = 14;
		SCREEN_INVENTORY_IN_CHEST = 15;
		SCREEN_MOVIE = 16;
		SCREEN_WALK_TO_MAP = 17;
		SCREEN_MAP_ENTRANCE = 18;
		SCREEN_SIMPLE_MESSAGE = 19;
		SCREEN_SELECT_TARGET = 20;
		SCREEN_CREATE_PARTY = 21;
		SCREEN_ESC_MESSAGE = 22;
		SCREEN_ITEM_SPELL = 23;
		SCREEN_KEY_CONFIG = 26;
		SCREEN_VIDEO_OPTIONS = 28;
		SCREEN_ADVENTURERS_INN = 29;
		SCREEN_ITEM_SPELL_MM6 = 103;
		SCREEN_QUICK_REFERENCE = 104;

		SCREENS_ALL = { SCREEN_GAME, SCREEN_MENU, SCREEN_CONTROLS, SCREEN_INFO, SCREEN_NPC, SCREEN_REST, SCREEN_QUERY, SCREEN_INVENTORY, SCREEN_SPELL_BOOK, SCREEN_NEW_GAME_BRIEFING, SCREEN_CHEST, SCREEN_SAVE_GAME, SCREEN_LOAD_GAME, SCREEN_HOUSE, SCREEN_INVENTORY_IN_SHOP, SCREEN_INVENTORY_IN_CHEST, SCREEN_MOVIE, SCREEN_WALK_TO_MAP, SCREEN_MAP_ENTRANCE, SCREEN_SIMPLE_MESSAGE, SCREEN_SELECT_TARGET, SCREEN_CREATE_PARTY, SCREEN_ESC_MESSAGE, SCREEN_ITEM_SPELL, SCREEN_KEY_CONFIG, SCREEN_VIDEO_OPTIONS, SCREEN_ADVENTURERS_INN, SCREEN_ITEM_SPELL_MM6, SCREEN_QUICK_REFERENCE };

		ENUM_TO_STRING_SCREENS = { {SCREEN_GAME, "Game"}, {SCREEN_MENU, "Menu"}, {SCREEN_CONTROLS, "Controls"}, {SCREEN_INFO, "Info"}, {SCREEN_NPC, "NPC"}, {SCREEN_REST, "Rest"}, {SCREEN_QUERY, "Query"}, {SCREEN_INVENTORY, "Inventory"}, {SCREEN_SPELL_BOOK, "Spell book"}, {SCREEN_NEW_GAME_BRIEFING, "New game briefing"}, {SCREEN_CHEST, "Chest"}, {SCREEN_SAVE_GAME, "Save game"}, {SCREEN_LOAD_GAME, "Load game"}, {SCREEN_HOUSE, "House"}, {SCREEN_INVENTORY_IN_SHOP, "Inventory in shop"}, {SCREEN_INVENTORY_IN_CHEST, "Inventory in chest"}, {SCREEN_MOVIE, "Movie"}, {SCREEN_WALK_TO_MAP, "Walk to map"}, {SCREEN_MAP_ENTRANCE, "Map entrance"}, {SCREEN_SIMPLE_MESSAGE, "Simple message"}, {SCREEN_SELECT_TARGET, "Select target"}, {SCREEN_CREATE_PARTY, "Create party"}, {SCREEN_ESC_MESSAGE, "Esc message"}, {SCREEN_ITEM_SPELL, "Item spell"}, {SCREEN_KEY_CONFIG, "Key config"}, {SCREEN_VIDEO_OPTIONS, "Video options"}, {SCREEN_ADVENTURERS_INN, "Adventurers inn"}, {SCREEN_ITEM_SPELL_MM6, "Item spell mM6"}, {SCREEN_QUICK_REFERENCE, "Quick reference"} };

		STRING_TO_ENUM_SCREENS = invertMap(ENUM_TO_STRING_SCREENS);

		detail::callbackScreensInitialize();

	}

	void makeEnumScreens_8()
	{
		SCREEN_GAME = 0;
		SCREEN_MENU = 1;
		SCREEN_CONTROLS = 2;
		SCREEN_INFO = 3;
		SCREEN_NPC = 4;
		SCREEN_REST = 5;
		SCREEN_QUERY = 6;
		SCREEN_INVENTORY = 7;
		SCREEN_SPELL_BOOK = 8;
		SCREEN_NEW_GAME_BRIEFING = 9;
		SCREEN_CHEST = 10;
		SCREEN_SAVE_GAME = 11;
		SCREEN_LOAD_GAME = 12;
		SCREEN_HOUSE = 13;
		SCREEN_INVENTORY_IN_SHOP = 14;
		SCREEN_INVENTORY_IN_CHEST = 15;
		SCREEN_MOVIE = 16;
		SCREEN_WALK_TO_MAP = 17;
		SCREEN_MAP_ENTRANCE = 18;
		SCREEN_SIMPLE_MESSAGE = 19;
		SCREEN_SELECT_TARGET = 20;
		SCREEN_CREATE_PARTY = 21;
		SCREEN_ESC_MESSAGE = 22;
		SCREEN_ITEM_SPELL = 23;
		SCREEN_KEY_CONFIG = 26;
		SCREEN_VIDEO_OPTIONS = 28;
		SCREEN_ADVENTURERS_INN = 29;
		SCREEN_ITEM_SPELL_MM6 = 103;
		SCREEN_QUICK_REFERENCE = 104;

		SCREENS_ALL = { SCREEN_GAME, SCREEN_MENU, SCREEN_CONTROLS, SCREEN_INFO, SCREEN_NPC, SCREEN_REST, SCREEN_QUERY, SCREEN_INVENTORY, SCREEN_SPELL_BOOK, SCREEN_NEW_GAME_BRIEFING, SCREEN_CHEST, SCREEN_SAVE_GAME, SCREEN_LOAD_GAME, SCREEN_HOUSE, SCREEN_INVENTORY_IN_SHOP, SCREEN_INVENTORY_IN_CHEST, SCREEN_MOVIE, SCREEN_WALK_TO_MAP, SCREEN_MAP_ENTRANCE, SCREEN_SIMPLE_MESSAGE, SCREEN_SELECT_TARGET, SCREEN_CREATE_PARTY, SCREEN_ESC_MESSAGE, SCREEN_ITEM_SPELL, SCREEN_KEY_CONFIG, SCREEN_VIDEO_OPTIONS, SCREEN_ADVENTURERS_INN, SCREEN_ITEM_SPELL_MM6, SCREEN_QUICK_REFERENCE };

		ENUM_TO_STRING_SCREENS = { {SCREEN_GAME, "Game"}, {SCREEN_MENU, "Menu"}, {SCREEN_CONTROLS, "Controls"}, {SCREEN_INFO, "Info"}, {SCREEN_NPC, "NPC"}, {SCREEN_REST, "Rest"}, {SCREEN_QUERY, "Query"}, {SCREEN_INVENTORY, "Inventory"}, {SCREEN_SPELL_BOOK, "Spell book"}, {SCREEN_NEW_GAME_BRIEFING, "New game briefing"}, {SCREEN_CHEST, "Chest"}, {SCREEN_SAVE_GAME, "Save game"}, {SCREEN_LOAD_GAME, "Load game"}, {SCREEN_HOUSE, "House"}, {SCREEN_INVENTORY_IN_SHOP, "Inventory in shop"}, {SCREEN_INVENTORY_IN_CHEST, "Inventory in chest"}, {SCREEN_MOVIE, "Movie"}, {SCREEN_WALK_TO_MAP, "Walk to map"}, {SCREEN_MAP_ENTRANCE, "Map entrance"}, {SCREEN_SIMPLE_MESSAGE, "Simple message"}, {SCREEN_SELECT_TARGET, "Select target"}, {SCREEN_CREATE_PARTY, "Create party"}, {SCREEN_ESC_MESSAGE, "Esc message"}, {SCREEN_ITEM_SPELL, "Item spell"}, {SCREEN_KEY_CONFIG, "Key config"}, {SCREEN_VIDEO_OPTIONS, "Video options"}, {SCREEN_ADVENTURERS_INN, "Adventurers inn"}, {SCREEN_ITEM_SPELL_MM6, "Item spell mM6"}, {SCREEN_QUICK_REFERENCE, "Quick reference"} };

		STRING_TO_ENUM_SCREENS = invertMap(ENUM_TO_STRING_SCREENS);

		detail::callbackScreensInitialize();

	}

bool checkScreensValidity(int64_t value)
{
	return detail::checkValidValue(SCREENS_ALL, value, detail::callbackCheckScreensValidity);
}


	// FacetBits //

	int64_t 
		FACET_BIT_IS_PORTAL = INVALID_ID,
		FACET_BIT_IS_WATER = INVALID_ID,
		FACET_BIT_PROJECT_TO_XY = INVALID_ID,
		FACET_BIT_PROJECT_TO_XZ = INVALID_ID,
		FACET_BIT_PROJECT_TO_YZ = INVALID_ID,
		FACET_BIT_INVISIBLE = INVALID_ID,
		FACET_BIT_ANIMATED_TFT = INVALID_ID,
		FACET_BIT_MOVE_BY_DOOR = INVALID_ID,
		FACET_BIT_IS_EVENT_JUST_HINT = INVALID_ID,
		FACET_BIT_ALTERNATIVE_SOUND = INVALID_ID,
		FACET_BIT_IS_SKY = INVALID_ID,
		FACET_BIT_FLIP_U = INVALID_ID,
		FACET_BIT_FLIP_V = INVALID_ID,
		FACET_BIT_TRIGGER_BY_CLICK = INVALID_ID,
		FACET_BIT_TRIGGER_BY_STEP = INVALID_ID,
		FACET_BIT_TRIGGER_BY_MONSTER = INVALID_ID,
		FACET_BIT_TRIGGER_BY_OBJECT = INVALID_ID,
		FACET_BIT_UNTOUCHABLE = INVALID_ID,
		FACET_BIT_IS_LAVA = INVALID_ID,
		FACET_BIT_HAS_DATA = INVALID_ID,
		FACET_BIT_IS_SECRET = INVALID_ID,
		FACET_BIT_SCROLL_DOWN = INVALID_ID,
		FACET_BIT_ALIGN_TOP = INVALID_ID,
		FACET_BIT_SCROLL_UP = INVALID_ID,
		FACET_BIT_SCROLL_LEFT = INVALID_ID,
		FACET_BIT_SCROLL_RIGHT = INVALID_ID,
		FACET_BIT_ALIGN_LEFT = INVALID_ID,
		FACET_BIT_ALIGN_RIGHT = INVALID_ID,
		FACET_BIT_ALIGN_BOTTOM = INVALID_ID,
		FACET_BIT_DISABLE_EVENT_BY_CTRL_CLICK = INVALID_ID,
		FACET_BIT_EVENT_DISABLED_BY_CTRL_CLICK = INVALID_ID;

	std::vector<int64_t> FACET_BITS_ALL;
	std::map<int64_t, std::string> ENUM_TO_STRING_FACET_BITS;
	std::map<std::string, int64_t> STRING_TO_ENUM_FACET_BITS;

	void makeEnumFacetBits_6()
	{
		FACET_BIT_IS_PORTAL = 1;
		FACET_BIT_IS_WATER = 16;
		FACET_BIT_PROJECT_TO_XY = 256;
		FACET_BIT_PROJECT_TO_XZ = 512;
		FACET_BIT_PROJECT_TO_YZ = 1024;
		FACET_BIT_INVISIBLE = 8192;
		FACET_BIT_ANIMATED_TFT = 16384;
		FACET_BIT_MOVE_BY_DOOR = 262144;
		FACET_BIT_IS_EVENT_JUST_HINT = 1048576;
		FACET_BIT_ALTERNATIVE_SOUND = 2097152;
		FACET_BIT_IS_SKY = 4194304;
		FACET_BIT_FLIP_U = 8388608;
		FACET_BIT_FLIP_V = 16777216;
		FACET_BIT_TRIGGER_BY_CLICK = 33554432;
		FACET_BIT_TRIGGER_BY_STEP = 67108864;
		FACET_BIT_TRIGGER_BY_MONSTER = 134217728;
		FACET_BIT_TRIGGER_BY_OBJECT = 268435456;
		FACET_BIT_UNTOUCHABLE = 536870912;
		FACET_BIT_IS_LAVA = 1073741824;
		FACET_BIT_HAS_DATA = 2147483648;

		FACET_BITS_ALL = { FACET_BIT_IS_PORTAL, FACET_BIT_IS_WATER, FACET_BIT_PROJECT_TO_XY, FACET_BIT_PROJECT_TO_XZ, FACET_BIT_PROJECT_TO_YZ, FACET_BIT_INVISIBLE, FACET_BIT_ANIMATED_TFT, FACET_BIT_MOVE_BY_DOOR, FACET_BIT_IS_EVENT_JUST_HINT, FACET_BIT_ALTERNATIVE_SOUND, FACET_BIT_IS_SKY, FACET_BIT_FLIP_U, FACET_BIT_FLIP_V, FACET_BIT_TRIGGER_BY_CLICK, FACET_BIT_TRIGGER_BY_STEP, FACET_BIT_TRIGGER_BY_MONSTER, FACET_BIT_TRIGGER_BY_OBJECT, FACET_BIT_UNTOUCHABLE, FACET_BIT_IS_LAVA, FACET_BIT_HAS_DATA };

		ENUM_TO_STRING_FACET_BITS = { {FACET_BIT_IS_PORTAL, "Is portal"}, {FACET_BIT_IS_WATER, "Is water"}, {FACET_BIT_PROJECT_TO_XY, "Project to xY"}, {FACET_BIT_PROJECT_TO_XZ, "Project to xZ"}, {FACET_BIT_PROJECT_TO_YZ, "Project to yZ"}, {FACET_BIT_INVISIBLE, "Invisible"}, {FACET_BIT_ANIMATED_TFT, "Animated tFT"}, {FACET_BIT_MOVE_BY_DOOR, "Move by door"}, {FACET_BIT_IS_EVENT_JUST_HINT, "Is event just hint"}, {FACET_BIT_ALTERNATIVE_SOUND, "Alternative sound"}, {FACET_BIT_IS_SKY, "Is sky"}, {FACET_BIT_FLIP_U, "Flip u"}, {FACET_BIT_FLIP_V, "Flip v"}, {FACET_BIT_TRIGGER_BY_CLICK, "Trigger by click"}, {FACET_BIT_TRIGGER_BY_STEP, "Trigger by step"}, {FACET_BIT_TRIGGER_BY_MONSTER, "Trigger by monster"}, {FACET_BIT_TRIGGER_BY_OBJECT, "Trigger by object"}, {FACET_BIT_UNTOUCHABLE, "Untouchable"}, {FACET_BIT_IS_LAVA, "Is lava"}, {FACET_BIT_HAS_DATA, "Has data"} };

		STRING_TO_ENUM_FACET_BITS = invertMap(ENUM_TO_STRING_FACET_BITS);

		detail::callbackFacetBitsInitialize();

	}

	void makeEnumFacetBits_7()
	{
		FACET_BIT_IS_PORTAL = 1;
		FACET_BIT_IS_SECRET = 2;
		FACET_BIT_SCROLL_DOWN = 4;
		FACET_BIT_ALIGN_TOP = 8;
		FACET_BIT_IS_WATER = 16;
		FACET_BIT_SCROLL_UP = 32;
		FACET_BIT_SCROLL_LEFT = 64;
		FACET_BIT_PROJECT_TO_XY = 256;
		FACET_BIT_PROJECT_TO_XZ = 512;
		FACET_BIT_PROJECT_TO_YZ = 1024;
		FACET_BIT_SCROLL_RIGHT = 2048;
		FACET_BIT_ALIGN_LEFT = 4096;
		FACET_BIT_INVISIBLE = 8192;
		FACET_BIT_ANIMATED_TFT = 16384;
		FACET_BIT_ALIGN_RIGHT = 32768;
		FACET_BIT_ALIGN_BOTTOM = 131072;
		FACET_BIT_MOVE_BY_DOOR = 262144;
		FACET_BIT_IS_EVENT_JUST_HINT = 1048576;
		FACET_BIT_ALTERNATIVE_SOUND = 2097152;
		FACET_BIT_IS_SKY = 4194304;
		FACET_BIT_FLIP_U = 8388608;
		FACET_BIT_FLIP_V = 16777216;
		FACET_BIT_TRIGGER_BY_CLICK = 33554432;
		FACET_BIT_TRIGGER_BY_STEP = 67108864;
		FACET_BIT_TRIGGER_BY_MONSTER = 134217728;
		FACET_BIT_TRIGGER_BY_OBJECT = 268435456;
		FACET_BIT_UNTOUCHABLE = 536870912;
		FACET_BIT_IS_LAVA = 1073741824;
		FACET_BIT_HAS_DATA = 2147483648;

		FACET_BITS_ALL = { FACET_BIT_IS_PORTAL, FACET_BIT_IS_SECRET, FACET_BIT_SCROLL_DOWN, FACET_BIT_ALIGN_TOP, FACET_BIT_IS_WATER, FACET_BIT_SCROLL_UP, FACET_BIT_SCROLL_LEFT, FACET_BIT_PROJECT_TO_XY, FACET_BIT_PROJECT_TO_XZ, FACET_BIT_PROJECT_TO_YZ, FACET_BIT_SCROLL_RIGHT, FACET_BIT_ALIGN_LEFT, FACET_BIT_INVISIBLE, FACET_BIT_ANIMATED_TFT, FACET_BIT_ALIGN_RIGHT, FACET_BIT_ALIGN_BOTTOM, FACET_BIT_MOVE_BY_DOOR, FACET_BIT_IS_EVENT_JUST_HINT, FACET_BIT_ALTERNATIVE_SOUND, FACET_BIT_IS_SKY, FACET_BIT_FLIP_U, FACET_BIT_FLIP_V, FACET_BIT_TRIGGER_BY_CLICK, FACET_BIT_TRIGGER_BY_STEP, FACET_BIT_TRIGGER_BY_MONSTER, FACET_BIT_TRIGGER_BY_OBJECT, FACET_BIT_UNTOUCHABLE, FACET_BIT_IS_LAVA, FACET_BIT_HAS_DATA };

		ENUM_TO_STRING_FACET_BITS = { {FACET_BIT_IS_PORTAL, "Is portal"}, {FACET_BIT_IS_SECRET, "Is secret"}, {FACET_BIT_SCROLL_DOWN, "Scroll down"}, {FACET_BIT_ALIGN_TOP, "Align top"}, {FACET_BIT_IS_WATER, "Is water"}, {FACET_BIT_SCROLL_UP, "Scroll up"}, {FACET_BIT_SCROLL_LEFT, "Scroll left"}, {FACET_BIT_PROJECT_TO_XY, "Project to xY"}, {FACET_BIT_PROJECT_TO_XZ, "Project to xZ"}, {FACET_BIT_PROJECT_TO_YZ, "Project to yZ"}, {FACET_BIT_SCROLL_RIGHT, "Scroll right"}, {FACET_BIT_ALIGN_LEFT, "Align left"}, {FACET_BIT_INVISIBLE, "Invisible"}, {FACET_BIT_ANIMATED_TFT, "Animated tFT"}, {FACET_BIT_ALIGN_RIGHT, "Align right"}, {FACET_BIT_ALIGN_BOTTOM, "Align bottom"}, {FACET_BIT_MOVE_BY_DOOR, "Move by door"}, {FACET_BIT_IS_EVENT_JUST_HINT, "Is event just hint"}, {FACET_BIT_ALTERNATIVE_SOUND, "Alternative sound"}, {FACET_BIT_IS_SKY, "Is sky"}, {FACET_BIT_FLIP_U, "Flip u"}, {FACET_BIT_FLIP_V, "Flip v"}, {FACET_BIT_TRIGGER_BY_CLICK, "Trigger by click"}, {FACET_BIT_TRIGGER_BY_STEP, "Trigger by step"}, {FACET_BIT_TRIGGER_BY_MONSTER, "Trigger by monster"}, {FACET_BIT_TRIGGER_BY_OBJECT, "Trigger by object"}, {FACET_BIT_UNTOUCHABLE, "Untouchable"}, {FACET_BIT_IS_LAVA, "Is lava"}, {FACET_BIT_HAS_DATA, "Has data"} };

		STRING_TO_ENUM_FACET_BITS = invertMap(ENUM_TO_STRING_FACET_BITS);

		detail::callbackFacetBitsInitialize();

	}

	void makeEnumFacetBits_8()
	{
		FACET_BIT_IS_PORTAL = 1;
		FACET_BIT_IS_SECRET = 2;
		FACET_BIT_SCROLL_DOWN = 4;
		FACET_BIT_ALIGN_TOP = 8;
		FACET_BIT_IS_WATER = 16;
		FACET_BIT_SCROLL_UP = 32;
		FACET_BIT_SCROLL_LEFT = 64;
		FACET_BIT_PROJECT_TO_XY = 256;
		FACET_BIT_PROJECT_TO_XZ = 512;
		FACET_BIT_PROJECT_TO_YZ = 1024;
		FACET_BIT_SCROLL_RIGHT = 2048;
		FACET_BIT_ALIGN_LEFT = 4096;
		FACET_BIT_INVISIBLE = 8192;
		FACET_BIT_ANIMATED_TFT = 16384;
		FACET_BIT_ALIGN_RIGHT = 32768;
		FACET_BIT_ALIGN_BOTTOM = 131072;
		FACET_BIT_MOVE_BY_DOOR = 262144;
		FACET_BIT_IS_EVENT_JUST_HINT = 1048576;
		FACET_BIT_ALTERNATIVE_SOUND = 2097152;
		FACET_BIT_IS_SKY = 4194304;
		FACET_BIT_FLIP_U = 8388608;
		FACET_BIT_FLIP_V = 16777216;
		FACET_BIT_TRIGGER_BY_CLICK = 33554432;
		FACET_BIT_TRIGGER_BY_STEP = 67108864;
		FACET_BIT_DISABLE_EVENT_BY_CTRL_CLICK = 134217728;
		FACET_BIT_EVENT_DISABLED_BY_CTRL_CLICK = 268435456;
		FACET_BIT_UNTOUCHABLE = 536870912;
		FACET_BIT_IS_LAVA = 1073741824;
		FACET_BIT_HAS_DATA = 2147483648;

		FACET_BITS_ALL = { FACET_BIT_IS_PORTAL, FACET_BIT_IS_SECRET, FACET_BIT_SCROLL_DOWN, FACET_BIT_ALIGN_TOP, FACET_BIT_IS_WATER, FACET_BIT_SCROLL_UP, FACET_BIT_SCROLL_LEFT, FACET_BIT_PROJECT_TO_XY, FACET_BIT_PROJECT_TO_XZ, FACET_BIT_PROJECT_TO_YZ, FACET_BIT_SCROLL_RIGHT, FACET_BIT_ALIGN_LEFT, FACET_BIT_INVISIBLE, FACET_BIT_ANIMATED_TFT, FACET_BIT_ALIGN_RIGHT, FACET_BIT_ALIGN_BOTTOM, FACET_BIT_MOVE_BY_DOOR, FACET_BIT_IS_EVENT_JUST_HINT, FACET_BIT_ALTERNATIVE_SOUND, FACET_BIT_IS_SKY, FACET_BIT_FLIP_U, FACET_BIT_FLIP_V, FACET_BIT_TRIGGER_BY_CLICK, FACET_BIT_TRIGGER_BY_STEP, FACET_BIT_DISABLE_EVENT_BY_CTRL_CLICK, FACET_BIT_EVENT_DISABLED_BY_CTRL_CLICK, FACET_BIT_UNTOUCHABLE, FACET_BIT_IS_LAVA, FACET_BIT_HAS_DATA };

		ENUM_TO_STRING_FACET_BITS = { {FACET_BIT_IS_PORTAL, "Is portal"}, {FACET_BIT_IS_SECRET, "Is secret"}, {FACET_BIT_SCROLL_DOWN, "Scroll down"}, {FACET_BIT_ALIGN_TOP, "Align top"}, {FACET_BIT_IS_WATER, "Is water"}, {FACET_BIT_SCROLL_UP, "Scroll up"}, {FACET_BIT_SCROLL_LEFT, "Scroll left"}, {FACET_BIT_PROJECT_TO_XY, "Project to xY"}, {FACET_BIT_PROJECT_TO_XZ, "Project to xZ"}, {FACET_BIT_PROJECT_TO_YZ, "Project to yZ"}, {FACET_BIT_SCROLL_RIGHT, "Scroll right"}, {FACET_BIT_ALIGN_LEFT, "Align left"}, {FACET_BIT_INVISIBLE, "Invisible"}, {FACET_BIT_ANIMATED_TFT, "Animated tFT"}, {FACET_BIT_ALIGN_RIGHT, "Align right"}, {FACET_BIT_ALIGN_BOTTOM, "Align bottom"}, {FACET_BIT_MOVE_BY_DOOR, "Move by door"}, {FACET_BIT_IS_EVENT_JUST_HINT, "Is event just hint"}, {FACET_BIT_ALTERNATIVE_SOUND, "Alternative sound"}, {FACET_BIT_IS_SKY, "Is sky"}, {FACET_BIT_FLIP_U, "Flip u"}, {FACET_BIT_FLIP_V, "Flip v"}, {FACET_BIT_TRIGGER_BY_CLICK, "Trigger by click"}, {FACET_BIT_TRIGGER_BY_STEP, "Trigger by step"}, {FACET_BIT_DISABLE_EVENT_BY_CTRL_CLICK, "Disable event by ctrl click"}, {FACET_BIT_EVENT_DISABLED_BY_CTRL_CLICK, "Event disabled by ctrl click"}, {FACET_BIT_UNTOUCHABLE, "Untouchable"}, {FACET_BIT_IS_LAVA, "Is lava"}, {FACET_BIT_HAS_DATA, "Has data"} };

		STRING_TO_ENUM_FACET_BITS = invertMap(ENUM_TO_STRING_FACET_BITS);

		detail::callbackFacetBitsInitialize();

	}

bool checkFacetBitsValidity(int64_t value)
{
	return detail::checkValidValue(FACET_BITS_ALL, value, detail::callbackCheckFacetBitsValidity);
}


	// FaceAnimation //

	int64_t 
		PLAYER_FACE_ANIMATION_KILL_SMALL_ENEMY = INVALID_ID,
		PLAYER_FACE_ANIMATION_KILL_BIG_ENEMY = INVALID_ID,
		PLAYER_FACE_ANIMATION_STORE_CLOSED = INVALID_ID,
		PLAYER_FACE_ANIMATION_DISARM_TRAP = INVALID_ID,
		PLAYER_FACE_ANIMATION_TRAP_EXPLOADED = INVALID_ID,
		PLAYER_FACE_ANIMATION_AVOID_DAMAGE = INVALID_ID,
		PLAYER_FACE_ANIMATION_IDENTIFY_USELESS = INVALID_ID,
		PLAYER_FACE_ANIMATION_IDENTIFY_GREAT = INVALID_ID,
		PLAYER_FACE_ANIMATION_IDENTIFY_FAIL = INVALID_ID,
		PLAYER_FACE_ANIMATION_REPAIR_ITEM = INVALID_ID,
		PLAYER_FACE_ANIMATION_REPAIR_FAIL = INVALID_ID,
		PLAYER_FACE_ANIMATION_SET_QUICK_SPELL = INVALID_ID,
		PLAYER_FACE_ANIMATION_CANT_REST_HERE = INVALID_ID,
		PLAYER_FACE_ANIMATION_SKILL_INCREASED = INVALID_ID,
		PLAYER_FACE_ANIMATION_CANT_CARRY = INVALID_ID,
		PLAYER_FACE_ANIMATION_MIX_POTION = INVALID_ID,
		PLAYER_FACE_ANIMATION_POTION_EXPLODE = INVALID_ID,
		PLAYER_FACE_ANIMATION_DOOR_LOCKED = INVALID_ID,
		PLAYER_FACE_ANIMATION_WONT_BUDGE = INVALID_ID,
		PLAYER_FACE_ANIMATION_CANT_LEARN_SPELL = INVALID_ID,
		PLAYER_FACE_ANIMATION_LEARN_SPELL = INVALID_ID,
		PLAYER_FACE_ANIMATION_HELLO = INVALID_ID,
		PLAYER_FACE_ANIMATION_HELLO_NIGHT = INVALID_ID,
		PLAYER_FACE_ANIMATION_DAMAGED = INVALID_ID,
		PLAYER_FACE_ANIMATION_WEAK = INVALID_ID,
		PLAYER_FACE_ANIMATION_AFRAID = INVALID_ID,
		PLAYER_FACE_ANIMATION_POISONED = INVALID_ID,
		PLAYER_FACE_ANIMATION_DESEASED = INVALID_ID,
		PLAYER_FACE_ANIMATION_INSANE = INVALID_ID,
		PLAYER_FACE_ANIMATION_CURSED = INVALID_ID,
		PLAYER_FACE_ANIMATION_DRUNK = INVALID_ID,
		PLAYER_FACE_ANIMATION_UNCONSIOUS = INVALID_ID,
		PLAYER_FACE_ANIMATION_DEATH = INVALID_ID,
		PLAYER_FACE_ANIMATION_STONED = INVALID_ID,
		PLAYER_FACE_ANIMATION_ERADICATED = INVALID_ID,
		PLAYER_FACE_ANIMATION_DINK_POTION = INVALID_ID,
		PLAYER_FACE_ANIMATION_READ_SCOLL = INVALID_ID,
		PLAYER_FACE_ANIMATION_NOT_ENOUGH_GOLD = INVALID_ID,
		PLAYER_FACE_ANIMATION_CANT_EQUIP = INVALID_ID,
		PLAYER_FACE_ANIMATION_ITEM_BROKEN_STOLEN = INVALID_ID,
		PLAYER_FACE_ANIMATION_SPDRAINED = INVALID_ID,
		PLAYER_FACE_ANIMATION_AGED = INVALID_ID,
		PLAYER_FACE_ANIMATION_SPELL_FAILED = INVALID_ID,
		PLAYER_FACE_ANIMATION_DAMAGED_PARTY = INVALID_ID,
		PLAYER_FACE_ANIMATION_TIRED = INVALID_ID,
		PLAYER_FACE_ANIMATION_ENTER_DUNGEON = INVALID_ID,
		PLAYER_FACE_ANIMATION_LEAVE_DUNGEON = INVALID_ID,
		PLAYER_FACE_ANIMATION_ALMOST_DEAD = INVALID_ID,
		PLAYER_FACE_ANIMATION_CAST_SPELL = INVALID_ID,
		PLAYER_FACE_ANIMATION_SHOOT = INVALID_ID,
		PLAYER_FACE_ANIMATION_ATTACK_HIT = INVALID_ID,
		PLAYER_FACE_ANIMATION_ATTACK_MISS = INVALID_ID,
		PLAYER_FACE_ANIMATION_BEG = INVALID_ID,
		PLAYER_FACE_ANIMATION_BEG_FAIL = INVALID_ID,
		PLAYER_FACE_ANIMATION_THREAT = INVALID_ID,
		PLAYER_FACE_ANIMATION_THREAT_FAIL = INVALID_ID,
		PLAYER_FACE_ANIMATION_BRIBE = INVALID_ID,
		PLAYER_FACE_ANIMATION_BRIBE_FAIL = INVALID_ID,
		PLAYER_FACE_ANIMATION_NPCDONT_TALK = INVALID_ID,
		PLAYER_FACE_ANIMATION_FOUND_ITEM = INVALID_ID,
		PLAYER_FACE_ANIMATION_HIRE_NPC = INVALID_ID,
		PLAYER_FACE_ANIMATION_LOOK_UP = INVALID_ID,
		PLAYER_FACE_ANIMATION_LOOK_DOWN = INVALID_ID,
		PLAYER_FACE_ANIMATION_YELL = INVALID_ID,
		PLAYER_FACE_ANIMATION_FALLING = INVALID_ID,
		PLAYER_FACE_ANIMATION_TAVERN_PACKS_FULL = INVALID_ID,
		PLAYER_FACE_ANIMATION_TAVERN_DRINK = INVALID_ID,
		PLAYER_FACE_ANIMATION_TAVERN_GOT_DRUNK = INVALID_ID,
		PLAYER_FACE_ANIMATION_TAVERN_TIP = INVALID_ID,
		PLAYER_FACE_ANIMATION_TRAVEL_HORSE = INVALID_ID,
		PLAYER_FACE_ANIMATION_TRAVEL_BOAT = INVALID_ID,
		PLAYER_FACE_ANIMATION_SHOP_IDENTIFY = INVALID_ID,
		PLAYER_FACE_ANIMATION_SHOP_REPAIR = INVALID_ID,
		PLAYER_FACE_ANIMATION_SHOP_ITEM_BOUGHT = INVALID_ID,
		PLAYER_FACE_ANIMATION_SHOP_ALREADY_IDENTIFIED = INVALID_ID,
		PLAYER_FACE_ANIMATION_SHOP_ITEM_SOLD = INVALID_ID,
		PLAYER_FACE_ANIMATION_SKILL_LEARNED = INVALID_ID,
		PLAYER_FACE_ANIMATION_SHOP_WRONG_SHOP = INVALID_ID,
		PLAYER_FACE_ANIMATION_SHOP_RUDE = INVALID_ID,
		PLAYER_FACE_ANIMATION_BANK_DEPOSIT = INVALID_ID,
		PLAYER_FACE_ANIMATION_TEMPLE_HEAL = INVALID_ID,
		PLAYER_FACE_ANIMATION_TEMPLE_DONATE = INVALID_ID,
		PLAYER_FACE_ANIMATION_HELLO_HOUSE = INVALID_ID,
		PLAYER_FACE_ANIMATION_SKILL_MASTERY_ICREASED = INVALID_ID,
		PLAYER_FACE_ANIMATION_JOINED_GUILD = INVALID_ID,
		PLAYER_FACE_ANIMATION_LEVEL_UP = INVALID_ID,
		PLAYER_FACE_ANIMATION_STAT_BONUS_INCREASED = INVALID_ID,
		PLAYER_FACE_ANIMATION_STAT_BASE_INCREASED = INVALID_ID,
		PLAYER_FACE_ANIMATION_QUEST_GOT = INVALID_ID,
		PLAYER_FACE_ANIMATION_AWARD_GOT = INVALID_ID,
		PLAYER_FACE_ANIMATION_AFRAID_SILENT = INVALID_ID,
		PLAYER_FACE_ANIMATION_CHEATED_DEATH = INVALID_ID,
		PLAYER_FACE_ANIMATION_IN_PRISON = INVALID_ID,
		PLAYER_FACE_ANIMATION_CHOOSE_ME = INVALID_ID,
		PLAYER_FACE_ANIMATION_AWAKEN = INVALID_ID,
		PLAYER_FACE_ANIMATION_ID_MONSTER_WEAK = INVALID_ID,
		PLAYER_FACE_ANIMATION_ID_MONSTER_BIG = INVALID_ID,
		PLAYER_FACE_ANIMATION_ID_MONSTER_FAIL = INVALID_ID,
		PLAYER_FACE_ANIMATION_LAST_MAN_STANDING = INVALID_ID,
		PLAYER_FACE_ANIMATION_NOT_ENOUGH_FOOD = INVALID_ID,
		PLAYER_FACE_ANIMATION_DEATH_BLOW = INVALID_ID;

	std::vector<int64_t> FACE_ANIMATION_ALL;
	std::map<int64_t, std::string> ENUM_TO_STRING_FACE_ANIMATION;
	std::map<std::string, int64_t> STRING_TO_ENUM_FACE_ANIMATION;

	void makeEnumFaceAnimation_6()
	{
		PLAYER_FACE_ANIMATION_KILL_SMALL_ENEMY = 1;
		PLAYER_FACE_ANIMATION_KILL_BIG_ENEMY = 2;
		PLAYER_FACE_ANIMATION_STORE_CLOSED = 3;
		PLAYER_FACE_ANIMATION_DISARM_TRAP = 4;
		PLAYER_FACE_ANIMATION_TRAP_EXPLOADED = 5;
		PLAYER_FACE_ANIMATION_AVOID_DAMAGE = 6;
		PLAYER_FACE_ANIMATION_IDENTIFY_USELESS = 7;
		PLAYER_FACE_ANIMATION_IDENTIFY_GREAT = 8;
		PLAYER_FACE_ANIMATION_IDENTIFY_FAIL = 9;
		PLAYER_FACE_ANIMATION_REPAIR_ITEM = 10;
		PLAYER_FACE_ANIMATION_REPAIR_FAIL = 11;
		PLAYER_FACE_ANIMATION_SET_QUICK_SPELL = 12;
		PLAYER_FACE_ANIMATION_CANT_REST_HERE = 13;
		PLAYER_FACE_ANIMATION_SKILL_INCREASED = 14;
		PLAYER_FACE_ANIMATION_CANT_CARRY = 15;
		PLAYER_FACE_ANIMATION_MIX_POTION = 16;
		PLAYER_FACE_ANIMATION_POTION_EXPLODE = 17;
		PLAYER_FACE_ANIMATION_DOOR_LOCKED = 18;
		PLAYER_FACE_ANIMATION_WONT_BUDGE = 19;
		PLAYER_FACE_ANIMATION_CANT_LEARN_SPELL = 20;
		PLAYER_FACE_ANIMATION_LEARN_SPELL = 21;
		PLAYER_FACE_ANIMATION_HELLO = 22;
		PLAYER_FACE_ANIMATION_HELLO_NIGHT = 23;
		PLAYER_FACE_ANIMATION_DAMAGED = 24;
		PLAYER_FACE_ANIMATION_WEAK = 25;
		PLAYER_FACE_ANIMATION_AFRAID = 26;
		PLAYER_FACE_ANIMATION_POISONED = 27;
		PLAYER_FACE_ANIMATION_DESEASED = 28;
		PLAYER_FACE_ANIMATION_INSANE = 29;
		PLAYER_FACE_ANIMATION_CURSED = 30;
		PLAYER_FACE_ANIMATION_DRUNK = 31;
		PLAYER_FACE_ANIMATION_UNCONSIOUS = 32;
		PLAYER_FACE_ANIMATION_DEATH = 33;
		PLAYER_FACE_ANIMATION_STONED = 34;
		PLAYER_FACE_ANIMATION_ERADICATED = 35;
		PLAYER_FACE_ANIMATION_DINK_POTION = 36;
		PLAYER_FACE_ANIMATION_READ_SCOLL = 37;
		PLAYER_FACE_ANIMATION_NOT_ENOUGH_GOLD = 38;
		PLAYER_FACE_ANIMATION_CANT_EQUIP = 39;
		PLAYER_FACE_ANIMATION_ITEM_BROKEN_STOLEN = 40;
		PLAYER_FACE_ANIMATION_SPDRAINED = 41;
		PLAYER_FACE_ANIMATION_AGED = 42;
		PLAYER_FACE_ANIMATION_SPELL_FAILED = 43;
		PLAYER_FACE_ANIMATION_DAMAGED_PARTY = 44;
		PLAYER_FACE_ANIMATION_TIRED = 45;
		PLAYER_FACE_ANIMATION_ENTER_DUNGEON = 46;
		PLAYER_FACE_ANIMATION_LEAVE_DUNGEON = 47;
		PLAYER_FACE_ANIMATION_ALMOST_DEAD = 48;
		PLAYER_FACE_ANIMATION_CAST_SPELL = 49;
		PLAYER_FACE_ANIMATION_SHOOT = 50;
		PLAYER_FACE_ANIMATION_ATTACK_HIT = 51;
		PLAYER_FACE_ANIMATION_ATTACK_MISS = 52;
		PLAYER_FACE_ANIMATION_BEG = 53;
		PLAYER_FACE_ANIMATION_BEG_FAIL = 54;
		PLAYER_FACE_ANIMATION_THREAT = 55;
		PLAYER_FACE_ANIMATION_THREAT_FAIL = 56;
		PLAYER_FACE_ANIMATION_BRIBE = 57;
		PLAYER_FACE_ANIMATION_BRIBE_FAIL = 58;
		PLAYER_FACE_ANIMATION_NPCDONT_TALK = 59;
		PLAYER_FACE_ANIMATION_FOUND_ITEM = 60;
		PLAYER_FACE_ANIMATION_HIRE_NPC = 61;
		PLAYER_FACE_ANIMATION_LOOK_UP = 63;
		PLAYER_FACE_ANIMATION_LOOK_DOWN = 64;
		PLAYER_FACE_ANIMATION_YELL = 65;
		PLAYER_FACE_ANIMATION_FALLING = 66;
		PLAYER_FACE_ANIMATION_TAVERN_PACKS_FULL = 67;
		PLAYER_FACE_ANIMATION_TAVERN_DRINK = 68;
		PLAYER_FACE_ANIMATION_TAVERN_GOT_DRUNK = 69;
		PLAYER_FACE_ANIMATION_TAVERN_TIP = 70;
		PLAYER_FACE_ANIMATION_TRAVEL_HORSE = 71;
		PLAYER_FACE_ANIMATION_TRAVEL_BOAT = 72;
		PLAYER_FACE_ANIMATION_SHOP_IDENTIFY = 73;
		PLAYER_FACE_ANIMATION_SHOP_REPAIR = 74;
		PLAYER_FACE_ANIMATION_SHOP_ITEM_BOUGHT = 75;
		PLAYER_FACE_ANIMATION_SHOP_ALREADY_IDENTIFIED = 76;
		PLAYER_FACE_ANIMATION_SHOP_ITEM_SOLD = 77;
		PLAYER_FACE_ANIMATION_SKILL_LEARNED = 78;
		PLAYER_FACE_ANIMATION_SHOP_WRONG_SHOP = 79;
		PLAYER_FACE_ANIMATION_SHOP_RUDE = 80;
		PLAYER_FACE_ANIMATION_BANK_DEPOSIT = 81;
		PLAYER_FACE_ANIMATION_TEMPLE_HEAL = 82;
		PLAYER_FACE_ANIMATION_TEMPLE_DONATE = 83;
		PLAYER_FACE_ANIMATION_HELLO_HOUSE = 84;
		PLAYER_FACE_ANIMATION_SKILL_MASTERY_ICREASED = 85;
		PLAYER_FACE_ANIMATION_JOINED_GUILD = 86;
		PLAYER_FACE_ANIMATION_LEVEL_UP = 87;
		PLAYER_FACE_ANIMATION_STAT_BONUS_INCREASED = 91;
		PLAYER_FACE_ANIMATION_STAT_BASE_INCREASED = 92;
		PLAYER_FACE_ANIMATION_QUEST_GOT = 93;
		PLAYER_FACE_ANIMATION_AWARD_GOT = 96;
		PLAYER_FACE_ANIMATION_AFRAID_SILENT = 98;
		PLAYER_FACE_ANIMATION_CHEATED_DEATH = 99;
		PLAYER_FACE_ANIMATION_IN_PRISON = 100;
		PLAYER_FACE_ANIMATION_CHOOSE_ME = 102;
		PLAYER_FACE_ANIMATION_AWAKEN = 103;
		PLAYER_FACE_ANIMATION_ID_MONSTER_WEAK = 104;
		PLAYER_FACE_ANIMATION_ID_MONSTER_BIG = 105;
		PLAYER_FACE_ANIMATION_ID_MONSTER_FAIL = 106;
		PLAYER_FACE_ANIMATION_LAST_MAN_STANDING = 107;
		PLAYER_FACE_ANIMATION_NOT_ENOUGH_FOOD = 108;
		PLAYER_FACE_ANIMATION_DEATH_BLOW = 109;

		FACE_ANIMATION_ALL = { PLAYER_FACE_ANIMATION_KILL_SMALL_ENEMY, PLAYER_FACE_ANIMATION_KILL_BIG_ENEMY, PLAYER_FACE_ANIMATION_STORE_CLOSED, PLAYER_FACE_ANIMATION_DISARM_TRAP, PLAYER_FACE_ANIMATION_TRAP_EXPLOADED, PLAYER_FACE_ANIMATION_AVOID_DAMAGE, PLAYER_FACE_ANIMATION_IDENTIFY_USELESS, PLAYER_FACE_ANIMATION_IDENTIFY_GREAT, PLAYER_FACE_ANIMATION_IDENTIFY_FAIL, PLAYER_FACE_ANIMATION_REPAIR_ITEM, PLAYER_FACE_ANIMATION_REPAIR_FAIL, PLAYER_FACE_ANIMATION_SET_QUICK_SPELL, PLAYER_FACE_ANIMATION_CANT_REST_HERE, PLAYER_FACE_ANIMATION_SKILL_INCREASED, PLAYER_FACE_ANIMATION_CANT_CARRY, PLAYER_FACE_ANIMATION_MIX_POTION, PLAYER_FACE_ANIMATION_POTION_EXPLODE, PLAYER_FACE_ANIMATION_DOOR_LOCKED, PLAYER_FACE_ANIMATION_WONT_BUDGE, PLAYER_FACE_ANIMATION_CANT_LEARN_SPELL, PLAYER_FACE_ANIMATION_LEARN_SPELL, PLAYER_FACE_ANIMATION_HELLO, PLAYER_FACE_ANIMATION_HELLO_NIGHT, PLAYER_FACE_ANIMATION_DAMAGED, PLAYER_FACE_ANIMATION_WEAK, PLAYER_FACE_ANIMATION_AFRAID, PLAYER_FACE_ANIMATION_POISONED, PLAYER_FACE_ANIMATION_DESEASED, PLAYER_FACE_ANIMATION_INSANE, PLAYER_FACE_ANIMATION_CURSED, PLAYER_FACE_ANIMATION_DRUNK, PLAYER_FACE_ANIMATION_UNCONSIOUS, PLAYER_FACE_ANIMATION_DEATH, PLAYER_FACE_ANIMATION_STONED, PLAYER_FACE_ANIMATION_ERADICATED, PLAYER_FACE_ANIMATION_DINK_POTION, PLAYER_FACE_ANIMATION_READ_SCOLL, PLAYER_FACE_ANIMATION_NOT_ENOUGH_GOLD, PLAYER_FACE_ANIMATION_CANT_EQUIP, PLAYER_FACE_ANIMATION_ITEM_BROKEN_STOLEN, PLAYER_FACE_ANIMATION_SPDRAINED, PLAYER_FACE_ANIMATION_AGED, PLAYER_FACE_ANIMATION_SPELL_FAILED, PLAYER_FACE_ANIMATION_DAMAGED_PARTY, PLAYER_FACE_ANIMATION_TIRED, PLAYER_FACE_ANIMATION_ENTER_DUNGEON, PLAYER_FACE_ANIMATION_LEAVE_DUNGEON, PLAYER_FACE_ANIMATION_ALMOST_DEAD, PLAYER_FACE_ANIMATION_CAST_SPELL, PLAYER_FACE_ANIMATION_SHOOT, PLAYER_FACE_ANIMATION_ATTACK_HIT, PLAYER_FACE_ANIMATION_ATTACK_MISS, PLAYER_FACE_ANIMATION_BEG, PLAYER_FACE_ANIMATION_BEG_FAIL, PLAYER_FACE_ANIMATION_THREAT, PLAYER_FACE_ANIMATION_THREAT_FAIL, PLAYER_FACE_ANIMATION_BRIBE, PLAYER_FACE_ANIMATION_BRIBE_FAIL, PLAYER_FACE_ANIMATION_NPCDONT_TALK, PLAYER_FACE_ANIMATION_FOUND_ITEM, PLAYER_FACE_ANIMATION_HIRE_NPC, PLAYER_FACE_ANIMATION_LOOK_UP, PLAYER_FACE_ANIMATION_LOOK_DOWN, PLAYER_FACE_ANIMATION_YELL, PLAYER_FACE_ANIMATION_FALLING, PLAYER_FACE_ANIMATION_TAVERN_PACKS_FULL, PLAYER_FACE_ANIMATION_TAVERN_DRINK, PLAYER_FACE_ANIMATION_TAVERN_GOT_DRUNK, PLAYER_FACE_ANIMATION_TAVERN_TIP, PLAYER_FACE_ANIMATION_TRAVEL_HORSE, PLAYER_FACE_ANIMATION_TRAVEL_BOAT, PLAYER_FACE_ANIMATION_SHOP_IDENTIFY, PLAYER_FACE_ANIMATION_SHOP_REPAIR, PLAYER_FACE_ANIMATION_SHOP_ITEM_BOUGHT, PLAYER_FACE_ANIMATION_SHOP_ALREADY_IDENTIFIED, PLAYER_FACE_ANIMATION_SHOP_ITEM_SOLD, PLAYER_FACE_ANIMATION_SKILL_LEARNED, PLAYER_FACE_ANIMATION_SHOP_WRONG_SHOP, PLAYER_FACE_ANIMATION_SHOP_RUDE, PLAYER_FACE_ANIMATION_BANK_DEPOSIT, PLAYER_FACE_ANIMATION_TEMPLE_HEAL, PLAYER_FACE_ANIMATION_TEMPLE_DONATE, PLAYER_FACE_ANIMATION_HELLO_HOUSE, PLAYER_FACE_ANIMATION_SKILL_MASTERY_ICREASED, PLAYER_FACE_ANIMATION_JOINED_GUILD, PLAYER_FACE_ANIMATION_LEVEL_UP, PLAYER_FACE_ANIMATION_STAT_BONUS_INCREASED, PLAYER_FACE_ANIMATION_STAT_BASE_INCREASED, PLAYER_FACE_ANIMATION_QUEST_GOT, PLAYER_FACE_ANIMATION_AWARD_GOT, PLAYER_FACE_ANIMATION_AFRAID_SILENT, PLAYER_FACE_ANIMATION_CHEATED_DEATH, PLAYER_FACE_ANIMATION_IN_PRISON, PLAYER_FACE_ANIMATION_CHOOSE_ME, PLAYER_FACE_ANIMATION_AWAKEN, PLAYER_FACE_ANIMATION_ID_MONSTER_WEAK, PLAYER_FACE_ANIMATION_ID_MONSTER_BIG, PLAYER_FACE_ANIMATION_ID_MONSTER_FAIL, PLAYER_FACE_ANIMATION_LAST_MAN_STANDING, PLAYER_FACE_ANIMATION_NOT_ENOUGH_FOOD, PLAYER_FACE_ANIMATION_DEATH_BLOW };

		ENUM_TO_STRING_FACE_ANIMATION = { {PLAYER_FACE_ANIMATION_KILL_SMALL_ENEMY, "Kill small enemy"}, {PLAYER_FACE_ANIMATION_KILL_BIG_ENEMY, "Kill big enemy"}, {PLAYER_FACE_ANIMATION_STORE_CLOSED, "Store closed"}, {PLAYER_FACE_ANIMATION_DISARM_TRAP, "Disarm trap"}, {PLAYER_FACE_ANIMATION_TRAP_EXPLOADED, "Trap exploaded"}, {PLAYER_FACE_ANIMATION_AVOID_DAMAGE, "Avoid damage"}, {PLAYER_FACE_ANIMATION_IDENTIFY_USELESS, "Identify useless"}, {PLAYER_FACE_ANIMATION_IDENTIFY_GREAT, "Identify great"}, {PLAYER_FACE_ANIMATION_IDENTIFY_FAIL, "Identify fail"}, {PLAYER_FACE_ANIMATION_REPAIR_ITEM, "Repair item"}, {PLAYER_FACE_ANIMATION_REPAIR_FAIL, "Repair fail"}, {PLAYER_FACE_ANIMATION_SET_QUICK_SPELL, "Set quick spell"}, {PLAYER_FACE_ANIMATION_CANT_REST_HERE, "Cant rest here"}, {PLAYER_FACE_ANIMATION_SKILL_INCREASED, "Skill increased"}, {PLAYER_FACE_ANIMATION_CANT_CARRY, "Cant carry"}, {PLAYER_FACE_ANIMATION_MIX_POTION, "Mix potion"}, {PLAYER_FACE_ANIMATION_POTION_EXPLODE, "Potion explode"}, {PLAYER_FACE_ANIMATION_DOOR_LOCKED, "Door locked"}, {PLAYER_FACE_ANIMATION_WONT_BUDGE, "Wont budge"}, {PLAYER_FACE_ANIMATION_CANT_LEARN_SPELL, "Cant learn spell"}, {PLAYER_FACE_ANIMATION_LEARN_SPELL, "Learn spell"}, {PLAYER_FACE_ANIMATION_HELLO, "Hello"}, {PLAYER_FACE_ANIMATION_HELLO_NIGHT, "Hello night"}, {PLAYER_FACE_ANIMATION_DAMAGED, "Damaged"}, {PLAYER_FACE_ANIMATION_WEAK, "Weak"}, {PLAYER_FACE_ANIMATION_AFRAID, "Afraid"}, {PLAYER_FACE_ANIMATION_POISONED, "Poisoned"}, {PLAYER_FACE_ANIMATION_DESEASED, "Deseased"}, {PLAYER_FACE_ANIMATION_INSANE, "Insane"}, {PLAYER_FACE_ANIMATION_CURSED, "Cursed"}, {PLAYER_FACE_ANIMATION_DRUNK, "Drunk"}, {PLAYER_FACE_ANIMATION_UNCONSIOUS, "Unconsious"}, {PLAYER_FACE_ANIMATION_DEATH, "Death"}, {PLAYER_FACE_ANIMATION_STONED, "Stoned"}, {PLAYER_FACE_ANIMATION_ERADICATED, "Eradicated"}, {PLAYER_FACE_ANIMATION_DINK_POTION, "Dink potion"}, {PLAYER_FACE_ANIMATION_READ_SCOLL, "Read scoll"}, {PLAYER_FACE_ANIMATION_NOT_ENOUGH_GOLD, "Not enough gold"}, {PLAYER_FACE_ANIMATION_CANT_EQUIP, "Cant equip"}, {PLAYER_FACE_ANIMATION_ITEM_BROKEN_STOLEN, "Item broken stolen"}, {PLAYER_FACE_ANIMATION_SPDRAINED, "SPDrained"}, {PLAYER_FACE_ANIMATION_AGED, "Aged"}, {PLAYER_FACE_ANIMATION_SPELL_FAILED, "Spell failed"}, {PLAYER_FACE_ANIMATION_DAMAGED_PARTY, "Damaged party"}, {PLAYER_FACE_ANIMATION_TIRED, "Tired"}, {PLAYER_FACE_ANIMATION_ENTER_DUNGEON, "Enter dungeon"}, {PLAYER_FACE_ANIMATION_LEAVE_DUNGEON, "Leave dungeon"}, {PLAYER_FACE_ANIMATION_ALMOST_DEAD, "Almost dead"}, {PLAYER_FACE_ANIMATION_CAST_SPELL, "Cast spell"}, {PLAYER_FACE_ANIMATION_SHOOT, "Shoot"}, {PLAYER_FACE_ANIMATION_ATTACK_HIT, "Attack hit"}, {PLAYER_FACE_ANIMATION_ATTACK_MISS, "Attack miss"}, {PLAYER_FACE_ANIMATION_BEG, "Beg"}, {PLAYER_FACE_ANIMATION_BEG_FAIL, "Beg fail"}, {PLAYER_FACE_ANIMATION_THREAT, "Threat"}, {PLAYER_FACE_ANIMATION_THREAT_FAIL, "Threat fail"}, {PLAYER_FACE_ANIMATION_BRIBE, "Bribe"}, {PLAYER_FACE_ANIMATION_BRIBE_FAIL, "Bribe fail"}, {PLAYER_FACE_ANIMATION_NPCDONT_TALK, "NPCDont talk"}, {PLAYER_FACE_ANIMATION_FOUND_ITEM, "Found item"}, {PLAYER_FACE_ANIMATION_HIRE_NPC, "Hire nPC"}, {PLAYER_FACE_ANIMATION_LOOK_UP, "Look up"}, {PLAYER_FACE_ANIMATION_LOOK_DOWN, "Look down"}, {PLAYER_FACE_ANIMATION_YELL, "Yell"}, {PLAYER_FACE_ANIMATION_FALLING, "Falling"}, {PLAYER_FACE_ANIMATION_TAVERN_PACKS_FULL, "Tavern packs full"}, {PLAYER_FACE_ANIMATION_TAVERN_DRINK, "Tavern drink"}, {PLAYER_FACE_ANIMATION_TAVERN_GOT_DRUNK, "Tavern got drunk"}, {PLAYER_FACE_ANIMATION_TAVERN_TIP, "Tavern tip"}, {PLAYER_FACE_ANIMATION_TRAVEL_HORSE, "Travel horse"}, {PLAYER_FACE_ANIMATION_TRAVEL_BOAT, "Travel boat"}, {PLAYER_FACE_ANIMATION_SHOP_IDENTIFY, "Shop identify"}, {PLAYER_FACE_ANIMATION_SHOP_REPAIR, "Shop repair"}, {PLAYER_FACE_ANIMATION_SHOP_ITEM_BOUGHT, "Shop item bought"}, {PLAYER_FACE_ANIMATION_SHOP_ALREADY_IDENTIFIED, "Shop already identified"}, {PLAYER_FACE_ANIMATION_SHOP_ITEM_SOLD, "Shop item sold"}, {PLAYER_FACE_ANIMATION_SKILL_LEARNED, "Skill learned"}, {PLAYER_FACE_ANIMATION_SHOP_WRONG_SHOP, "Shop wrong shop"}, {PLAYER_FACE_ANIMATION_SHOP_RUDE, "Shop rude"}, {PLAYER_FACE_ANIMATION_BANK_DEPOSIT, "Bank deposit"}, {PLAYER_FACE_ANIMATION_TEMPLE_HEAL, "Temple heal"}, {PLAYER_FACE_ANIMATION_TEMPLE_DONATE, "Temple donate"}, {PLAYER_FACE_ANIMATION_HELLO_HOUSE, "Hello house"}, {PLAYER_FACE_ANIMATION_SKILL_MASTERY_ICREASED, "Skill mastery icreased"}, {PLAYER_FACE_ANIMATION_JOINED_GUILD, "Joined guild"}, {PLAYER_FACE_ANIMATION_LEVEL_UP, "Level up"}, {PLAYER_FACE_ANIMATION_STAT_BONUS_INCREASED, "Stat bonus increased"}, {PLAYER_FACE_ANIMATION_STAT_BASE_INCREASED, "Stat base increased"}, {PLAYER_FACE_ANIMATION_QUEST_GOT, "Quest got"}, {PLAYER_FACE_ANIMATION_AWARD_GOT, "Award got"}, {PLAYER_FACE_ANIMATION_AFRAID_SILENT, "Afraid silent"}, {PLAYER_FACE_ANIMATION_CHEATED_DEATH, "Cheated death"}, {PLAYER_FACE_ANIMATION_IN_PRISON, "In prison"}, {PLAYER_FACE_ANIMATION_CHOOSE_ME, "Choose me"}, {PLAYER_FACE_ANIMATION_AWAKEN, "Awaken"}, {PLAYER_FACE_ANIMATION_ID_MONSTER_WEAK, "Id monster weak"}, {PLAYER_FACE_ANIMATION_ID_MONSTER_BIG, "Id monster big"}, {PLAYER_FACE_ANIMATION_ID_MONSTER_FAIL, "Id monster fail"}, {PLAYER_FACE_ANIMATION_LAST_MAN_STANDING, "Last man standing"}, {PLAYER_FACE_ANIMATION_NOT_ENOUGH_FOOD, "Not enough food"}, {PLAYER_FACE_ANIMATION_DEATH_BLOW, "Death blow"} };

		STRING_TO_ENUM_FACE_ANIMATION = invertMap(ENUM_TO_STRING_FACE_ANIMATION);

		detail::callbackFaceAnimationInitialize();

	}

	void makeEnumFaceAnimation_7()
	{
		PLAYER_FACE_ANIMATION_KILL_SMALL_ENEMY = 1;
		PLAYER_FACE_ANIMATION_KILL_BIG_ENEMY = 2;
		PLAYER_FACE_ANIMATION_STORE_CLOSED = 3;
		PLAYER_FACE_ANIMATION_DISARM_TRAP = 4;
		PLAYER_FACE_ANIMATION_TRAP_EXPLOADED = 5;
		PLAYER_FACE_ANIMATION_AVOID_DAMAGE = 6;
		PLAYER_FACE_ANIMATION_IDENTIFY_USELESS = 7;
		PLAYER_FACE_ANIMATION_IDENTIFY_GREAT = 8;
		PLAYER_FACE_ANIMATION_IDENTIFY_FAIL = 9;
		PLAYER_FACE_ANIMATION_REPAIR_ITEM = 10;
		PLAYER_FACE_ANIMATION_REPAIR_FAIL = 11;
		PLAYER_FACE_ANIMATION_SET_QUICK_SPELL = 12;
		PLAYER_FACE_ANIMATION_CANT_REST_HERE = 13;
		PLAYER_FACE_ANIMATION_SKILL_INCREASED = 14;
		PLAYER_FACE_ANIMATION_CANT_CARRY = 15;
		PLAYER_FACE_ANIMATION_MIX_POTION = 16;
		PLAYER_FACE_ANIMATION_POTION_EXPLODE = 17;
		PLAYER_FACE_ANIMATION_DOOR_LOCKED = 18;
		PLAYER_FACE_ANIMATION_WONT_BUDGE = 19;
		PLAYER_FACE_ANIMATION_CANT_LEARN_SPELL = 20;
		PLAYER_FACE_ANIMATION_LEARN_SPELL = 21;
		PLAYER_FACE_ANIMATION_HELLO = 22;
		PLAYER_FACE_ANIMATION_HELLO_NIGHT = 23;
		PLAYER_FACE_ANIMATION_DAMAGED = 24;
		PLAYER_FACE_ANIMATION_WEAK = 25;
		PLAYER_FACE_ANIMATION_AFRAID = 26;
		PLAYER_FACE_ANIMATION_POISONED = 27;
		PLAYER_FACE_ANIMATION_DESEASED = 28;
		PLAYER_FACE_ANIMATION_INSANE = 29;
		PLAYER_FACE_ANIMATION_CURSED = 30;
		PLAYER_FACE_ANIMATION_DRUNK = 31;
		PLAYER_FACE_ANIMATION_UNCONSIOUS = 32;
		PLAYER_FACE_ANIMATION_DEATH = 33;
		PLAYER_FACE_ANIMATION_STONED = 34;
		PLAYER_FACE_ANIMATION_ERADICATED = 35;
		PLAYER_FACE_ANIMATION_DINK_POTION = 36;
		PLAYER_FACE_ANIMATION_READ_SCOLL = 37;
		PLAYER_FACE_ANIMATION_NOT_ENOUGH_GOLD = 38;
		PLAYER_FACE_ANIMATION_CANT_EQUIP = 39;
		PLAYER_FACE_ANIMATION_ITEM_BROKEN_STOLEN = 40;
		PLAYER_FACE_ANIMATION_SPDRAINED = 41;
		PLAYER_FACE_ANIMATION_AGED = 42;
		PLAYER_FACE_ANIMATION_SPELL_FAILED = 43;
		PLAYER_FACE_ANIMATION_DAMAGED_PARTY = 44;
		PLAYER_FACE_ANIMATION_TIRED = 45;
		PLAYER_FACE_ANIMATION_ENTER_DUNGEON = 46;
		PLAYER_FACE_ANIMATION_LEAVE_DUNGEON = 47;
		PLAYER_FACE_ANIMATION_ALMOST_DEAD = 48;
		PLAYER_FACE_ANIMATION_CAST_SPELL = 49;
		PLAYER_FACE_ANIMATION_SHOOT = 50;
		PLAYER_FACE_ANIMATION_ATTACK_HIT = 51;
		PLAYER_FACE_ANIMATION_ATTACK_MISS = 52;
		PLAYER_FACE_ANIMATION_BEG = 53;
		PLAYER_FACE_ANIMATION_BEG_FAIL = 54;
		PLAYER_FACE_ANIMATION_THREAT = 55;
		PLAYER_FACE_ANIMATION_THREAT_FAIL = 56;
		PLAYER_FACE_ANIMATION_BRIBE = 57;
		PLAYER_FACE_ANIMATION_BRIBE_FAIL = 58;
		PLAYER_FACE_ANIMATION_NPCDONT_TALK = 59;
		PLAYER_FACE_ANIMATION_FOUND_ITEM = 60;
		PLAYER_FACE_ANIMATION_HIRE_NPC = 61;
		PLAYER_FACE_ANIMATION_LOOK_UP = 63;
		PLAYER_FACE_ANIMATION_LOOK_DOWN = 64;
		PLAYER_FACE_ANIMATION_YELL = 65;
		PLAYER_FACE_ANIMATION_FALLING = 66;
		PLAYER_FACE_ANIMATION_TAVERN_PACKS_FULL = 67;
		PLAYER_FACE_ANIMATION_TAVERN_DRINK = 68;
		PLAYER_FACE_ANIMATION_TAVERN_GOT_DRUNK = 69;
		PLAYER_FACE_ANIMATION_TAVERN_TIP = 70;
		PLAYER_FACE_ANIMATION_TRAVEL_HORSE = 71;
		PLAYER_FACE_ANIMATION_TRAVEL_BOAT = 72;
		PLAYER_FACE_ANIMATION_SHOP_IDENTIFY = 73;
		PLAYER_FACE_ANIMATION_SHOP_REPAIR = 74;
		PLAYER_FACE_ANIMATION_SHOP_ITEM_BOUGHT = 75;
		PLAYER_FACE_ANIMATION_SHOP_ALREADY_IDENTIFIED = 76;
		PLAYER_FACE_ANIMATION_SHOP_ITEM_SOLD = 77;
		PLAYER_FACE_ANIMATION_SKILL_LEARNED = 78;
		PLAYER_FACE_ANIMATION_SHOP_WRONG_SHOP = 79;
		PLAYER_FACE_ANIMATION_SHOP_RUDE = 80;
		PLAYER_FACE_ANIMATION_BANK_DEPOSIT = 81;
		PLAYER_FACE_ANIMATION_TEMPLE_HEAL = 82;
		PLAYER_FACE_ANIMATION_TEMPLE_DONATE = 83;
		PLAYER_FACE_ANIMATION_HELLO_HOUSE = 84;
		PLAYER_FACE_ANIMATION_SKILL_MASTERY_ICREASED = 85;
		PLAYER_FACE_ANIMATION_JOINED_GUILD = 86;
		PLAYER_FACE_ANIMATION_LEVEL_UP = 87;
		PLAYER_FACE_ANIMATION_STAT_BONUS_INCREASED = 91;
		PLAYER_FACE_ANIMATION_STAT_BASE_INCREASED = 92;
		PLAYER_FACE_ANIMATION_QUEST_GOT = 93;
		PLAYER_FACE_ANIMATION_AWARD_GOT = 96;
		PLAYER_FACE_ANIMATION_AFRAID_SILENT = 98;
		PLAYER_FACE_ANIMATION_CHEATED_DEATH = 99;
		PLAYER_FACE_ANIMATION_IN_PRISON = 100;
		PLAYER_FACE_ANIMATION_CHOOSE_ME = 102;
		PLAYER_FACE_ANIMATION_AWAKEN = 103;
		PLAYER_FACE_ANIMATION_ID_MONSTER_WEAK = 104;
		PLAYER_FACE_ANIMATION_ID_MONSTER_BIG = 105;
		PLAYER_FACE_ANIMATION_ID_MONSTER_FAIL = 106;
		PLAYER_FACE_ANIMATION_LAST_MAN_STANDING = 107;
		PLAYER_FACE_ANIMATION_NOT_ENOUGH_FOOD = 108;
		PLAYER_FACE_ANIMATION_DEATH_BLOW = 109;

		FACE_ANIMATION_ALL = { PLAYER_FACE_ANIMATION_KILL_SMALL_ENEMY, PLAYER_FACE_ANIMATION_KILL_BIG_ENEMY, PLAYER_FACE_ANIMATION_STORE_CLOSED, PLAYER_FACE_ANIMATION_DISARM_TRAP, PLAYER_FACE_ANIMATION_TRAP_EXPLOADED, PLAYER_FACE_ANIMATION_AVOID_DAMAGE, PLAYER_FACE_ANIMATION_IDENTIFY_USELESS, PLAYER_FACE_ANIMATION_IDENTIFY_GREAT, PLAYER_FACE_ANIMATION_IDENTIFY_FAIL, PLAYER_FACE_ANIMATION_REPAIR_ITEM, PLAYER_FACE_ANIMATION_REPAIR_FAIL, PLAYER_FACE_ANIMATION_SET_QUICK_SPELL, PLAYER_FACE_ANIMATION_CANT_REST_HERE, PLAYER_FACE_ANIMATION_SKILL_INCREASED, PLAYER_FACE_ANIMATION_CANT_CARRY, PLAYER_FACE_ANIMATION_MIX_POTION, PLAYER_FACE_ANIMATION_POTION_EXPLODE, PLAYER_FACE_ANIMATION_DOOR_LOCKED, PLAYER_FACE_ANIMATION_WONT_BUDGE, PLAYER_FACE_ANIMATION_CANT_LEARN_SPELL, PLAYER_FACE_ANIMATION_LEARN_SPELL, PLAYER_FACE_ANIMATION_HELLO, PLAYER_FACE_ANIMATION_HELLO_NIGHT, PLAYER_FACE_ANIMATION_DAMAGED, PLAYER_FACE_ANIMATION_WEAK, PLAYER_FACE_ANIMATION_AFRAID, PLAYER_FACE_ANIMATION_POISONED, PLAYER_FACE_ANIMATION_DESEASED, PLAYER_FACE_ANIMATION_INSANE, PLAYER_FACE_ANIMATION_CURSED, PLAYER_FACE_ANIMATION_DRUNK, PLAYER_FACE_ANIMATION_UNCONSIOUS, PLAYER_FACE_ANIMATION_DEATH, PLAYER_FACE_ANIMATION_STONED, PLAYER_FACE_ANIMATION_ERADICATED, PLAYER_FACE_ANIMATION_DINK_POTION, PLAYER_FACE_ANIMATION_READ_SCOLL, PLAYER_FACE_ANIMATION_NOT_ENOUGH_GOLD, PLAYER_FACE_ANIMATION_CANT_EQUIP, PLAYER_FACE_ANIMATION_ITEM_BROKEN_STOLEN, PLAYER_FACE_ANIMATION_SPDRAINED, PLAYER_FACE_ANIMATION_AGED, PLAYER_FACE_ANIMATION_SPELL_FAILED, PLAYER_FACE_ANIMATION_DAMAGED_PARTY, PLAYER_FACE_ANIMATION_TIRED, PLAYER_FACE_ANIMATION_ENTER_DUNGEON, PLAYER_FACE_ANIMATION_LEAVE_DUNGEON, PLAYER_FACE_ANIMATION_ALMOST_DEAD, PLAYER_FACE_ANIMATION_CAST_SPELL, PLAYER_FACE_ANIMATION_SHOOT, PLAYER_FACE_ANIMATION_ATTACK_HIT, PLAYER_FACE_ANIMATION_ATTACK_MISS, PLAYER_FACE_ANIMATION_BEG, PLAYER_FACE_ANIMATION_BEG_FAIL, PLAYER_FACE_ANIMATION_THREAT, PLAYER_FACE_ANIMATION_THREAT_FAIL, PLAYER_FACE_ANIMATION_BRIBE, PLAYER_FACE_ANIMATION_BRIBE_FAIL, PLAYER_FACE_ANIMATION_NPCDONT_TALK, PLAYER_FACE_ANIMATION_FOUND_ITEM, PLAYER_FACE_ANIMATION_HIRE_NPC, PLAYER_FACE_ANIMATION_LOOK_UP, PLAYER_FACE_ANIMATION_LOOK_DOWN, PLAYER_FACE_ANIMATION_YELL, PLAYER_FACE_ANIMATION_FALLING, PLAYER_FACE_ANIMATION_TAVERN_PACKS_FULL, PLAYER_FACE_ANIMATION_TAVERN_DRINK, PLAYER_FACE_ANIMATION_TAVERN_GOT_DRUNK, PLAYER_FACE_ANIMATION_TAVERN_TIP, PLAYER_FACE_ANIMATION_TRAVEL_HORSE, PLAYER_FACE_ANIMATION_TRAVEL_BOAT, PLAYER_FACE_ANIMATION_SHOP_IDENTIFY, PLAYER_FACE_ANIMATION_SHOP_REPAIR, PLAYER_FACE_ANIMATION_SHOP_ITEM_BOUGHT, PLAYER_FACE_ANIMATION_SHOP_ALREADY_IDENTIFIED, PLAYER_FACE_ANIMATION_SHOP_ITEM_SOLD, PLAYER_FACE_ANIMATION_SKILL_LEARNED, PLAYER_FACE_ANIMATION_SHOP_WRONG_SHOP, PLAYER_FACE_ANIMATION_SHOP_RUDE, PLAYER_FACE_ANIMATION_BANK_DEPOSIT, PLAYER_FACE_ANIMATION_TEMPLE_HEAL, PLAYER_FACE_ANIMATION_TEMPLE_DONATE, PLAYER_FACE_ANIMATION_HELLO_HOUSE, PLAYER_FACE_ANIMATION_SKILL_MASTERY_ICREASED, PLAYER_FACE_ANIMATION_JOINED_GUILD, PLAYER_FACE_ANIMATION_LEVEL_UP, PLAYER_FACE_ANIMATION_STAT_BONUS_INCREASED, PLAYER_FACE_ANIMATION_STAT_BASE_INCREASED, PLAYER_FACE_ANIMATION_QUEST_GOT, PLAYER_FACE_ANIMATION_AWARD_GOT, PLAYER_FACE_ANIMATION_AFRAID_SILENT, PLAYER_FACE_ANIMATION_CHEATED_DEATH, PLAYER_FACE_ANIMATION_IN_PRISON, PLAYER_FACE_ANIMATION_CHOOSE_ME, PLAYER_FACE_ANIMATION_AWAKEN, PLAYER_FACE_ANIMATION_ID_MONSTER_WEAK, PLAYER_FACE_ANIMATION_ID_MONSTER_BIG, PLAYER_FACE_ANIMATION_ID_MONSTER_FAIL, PLAYER_FACE_ANIMATION_LAST_MAN_STANDING, PLAYER_FACE_ANIMATION_NOT_ENOUGH_FOOD, PLAYER_FACE_ANIMATION_DEATH_BLOW };

		ENUM_TO_STRING_FACE_ANIMATION = { {PLAYER_FACE_ANIMATION_KILL_SMALL_ENEMY, "Kill small enemy"}, {PLAYER_FACE_ANIMATION_KILL_BIG_ENEMY, "Kill big enemy"}, {PLAYER_FACE_ANIMATION_STORE_CLOSED, "Store closed"}, {PLAYER_FACE_ANIMATION_DISARM_TRAP, "Disarm trap"}, {PLAYER_FACE_ANIMATION_TRAP_EXPLOADED, "Trap exploaded"}, {PLAYER_FACE_ANIMATION_AVOID_DAMAGE, "Avoid damage"}, {PLAYER_FACE_ANIMATION_IDENTIFY_USELESS, "Identify useless"}, {PLAYER_FACE_ANIMATION_IDENTIFY_GREAT, "Identify great"}, {PLAYER_FACE_ANIMATION_IDENTIFY_FAIL, "Identify fail"}, {PLAYER_FACE_ANIMATION_REPAIR_ITEM, "Repair item"}, {PLAYER_FACE_ANIMATION_REPAIR_FAIL, "Repair fail"}, {PLAYER_FACE_ANIMATION_SET_QUICK_SPELL, "Set quick spell"}, {PLAYER_FACE_ANIMATION_CANT_REST_HERE, "Cant rest here"}, {PLAYER_FACE_ANIMATION_SKILL_INCREASED, "Skill increased"}, {PLAYER_FACE_ANIMATION_CANT_CARRY, "Cant carry"}, {PLAYER_FACE_ANIMATION_MIX_POTION, "Mix potion"}, {PLAYER_FACE_ANIMATION_POTION_EXPLODE, "Potion explode"}, {PLAYER_FACE_ANIMATION_DOOR_LOCKED, "Door locked"}, {PLAYER_FACE_ANIMATION_WONT_BUDGE, "Wont budge"}, {PLAYER_FACE_ANIMATION_CANT_LEARN_SPELL, "Cant learn spell"}, {PLAYER_FACE_ANIMATION_LEARN_SPELL, "Learn spell"}, {PLAYER_FACE_ANIMATION_HELLO, "Hello"}, {PLAYER_FACE_ANIMATION_HELLO_NIGHT, "Hello night"}, {PLAYER_FACE_ANIMATION_DAMAGED, "Damaged"}, {PLAYER_FACE_ANIMATION_WEAK, "Weak"}, {PLAYER_FACE_ANIMATION_AFRAID, "Afraid"}, {PLAYER_FACE_ANIMATION_POISONED, "Poisoned"}, {PLAYER_FACE_ANIMATION_DESEASED, "Deseased"}, {PLAYER_FACE_ANIMATION_INSANE, "Insane"}, {PLAYER_FACE_ANIMATION_CURSED, "Cursed"}, {PLAYER_FACE_ANIMATION_DRUNK, "Drunk"}, {PLAYER_FACE_ANIMATION_UNCONSIOUS, "Unconsious"}, {PLAYER_FACE_ANIMATION_DEATH, "Death"}, {PLAYER_FACE_ANIMATION_STONED, "Stoned"}, {PLAYER_FACE_ANIMATION_ERADICATED, "Eradicated"}, {PLAYER_FACE_ANIMATION_DINK_POTION, "Dink potion"}, {PLAYER_FACE_ANIMATION_READ_SCOLL, "Read scoll"}, {PLAYER_FACE_ANIMATION_NOT_ENOUGH_GOLD, "Not enough gold"}, {PLAYER_FACE_ANIMATION_CANT_EQUIP, "Cant equip"}, {PLAYER_FACE_ANIMATION_ITEM_BROKEN_STOLEN, "Item broken stolen"}, {PLAYER_FACE_ANIMATION_SPDRAINED, "SPDrained"}, {PLAYER_FACE_ANIMATION_AGED, "Aged"}, {PLAYER_FACE_ANIMATION_SPELL_FAILED, "Spell failed"}, {PLAYER_FACE_ANIMATION_DAMAGED_PARTY, "Damaged party"}, {PLAYER_FACE_ANIMATION_TIRED, "Tired"}, {PLAYER_FACE_ANIMATION_ENTER_DUNGEON, "Enter dungeon"}, {PLAYER_FACE_ANIMATION_LEAVE_DUNGEON, "Leave dungeon"}, {PLAYER_FACE_ANIMATION_ALMOST_DEAD, "Almost dead"}, {PLAYER_FACE_ANIMATION_CAST_SPELL, "Cast spell"}, {PLAYER_FACE_ANIMATION_SHOOT, "Shoot"}, {PLAYER_FACE_ANIMATION_ATTACK_HIT, "Attack hit"}, {PLAYER_FACE_ANIMATION_ATTACK_MISS, "Attack miss"}, {PLAYER_FACE_ANIMATION_BEG, "Beg"}, {PLAYER_FACE_ANIMATION_BEG_FAIL, "Beg fail"}, {PLAYER_FACE_ANIMATION_THREAT, "Threat"}, {PLAYER_FACE_ANIMATION_THREAT_FAIL, "Threat fail"}, {PLAYER_FACE_ANIMATION_BRIBE, "Bribe"}, {PLAYER_FACE_ANIMATION_BRIBE_FAIL, "Bribe fail"}, {PLAYER_FACE_ANIMATION_NPCDONT_TALK, "NPCDont talk"}, {PLAYER_FACE_ANIMATION_FOUND_ITEM, "Found item"}, {PLAYER_FACE_ANIMATION_HIRE_NPC, "Hire nPC"}, {PLAYER_FACE_ANIMATION_LOOK_UP, "Look up"}, {PLAYER_FACE_ANIMATION_LOOK_DOWN, "Look down"}, {PLAYER_FACE_ANIMATION_YELL, "Yell"}, {PLAYER_FACE_ANIMATION_FALLING, "Falling"}, {PLAYER_FACE_ANIMATION_TAVERN_PACKS_FULL, "Tavern packs full"}, {PLAYER_FACE_ANIMATION_TAVERN_DRINK, "Tavern drink"}, {PLAYER_FACE_ANIMATION_TAVERN_GOT_DRUNK, "Tavern got drunk"}, {PLAYER_FACE_ANIMATION_TAVERN_TIP, "Tavern tip"}, {PLAYER_FACE_ANIMATION_TRAVEL_HORSE, "Travel horse"}, {PLAYER_FACE_ANIMATION_TRAVEL_BOAT, "Travel boat"}, {PLAYER_FACE_ANIMATION_SHOP_IDENTIFY, "Shop identify"}, {PLAYER_FACE_ANIMATION_SHOP_REPAIR, "Shop repair"}, {PLAYER_FACE_ANIMATION_SHOP_ITEM_BOUGHT, "Shop item bought"}, {PLAYER_FACE_ANIMATION_SHOP_ALREADY_IDENTIFIED, "Shop already identified"}, {PLAYER_FACE_ANIMATION_SHOP_ITEM_SOLD, "Shop item sold"}, {PLAYER_FACE_ANIMATION_SKILL_LEARNED, "Skill learned"}, {PLAYER_FACE_ANIMATION_SHOP_WRONG_SHOP, "Shop wrong shop"}, {PLAYER_FACE_ANIMATION_SHOP_RUDE, "Shop rude"}, {PLAYER_FACE_ANIMATION_BANK_DEPOSIT, "Bank deposit"}, {PLAYER_FACE_ANIMATION_TEMPLE_HEAL, "Temple heal"}, {PLAYER_FACE_ANIMATION_TEMPLE_DONATE, "Temple donate"}, {PLAYER_FACE_ANIMATION_HELLO_HOUSE, "Hello house"}, {PLAYER_FACE_ANIMATION_SKILL_MASTERY_ICREASED, "Skill mastery icreased"}, {PLAYER_FACE_ANIMATION_JOINED_GUILD, "Joined guild"}, {PLAYER_FACE_ANIMATION_LEVEL_UP, "Level up"}, {PLAYER_FACE_ANIMATION_STAT_BONUS_INCREASED, "Stat bonus increased"}, {PLAYER_FACE_ANIMATION_STAT_BASE_INCREASED, "Stat base increased"}, {PLAYER_FACE_ANIMATION_QUEST_GOT, "Quest got"}, {PLAYER_FACE_ANIMATION_AWARD_GOT, "Award got"}, {PLAYER_FACE_ANIMATION_AFRAID_SILENT, "Afraid silent"}, {PLAYER_FACE_ANIMATION_CHEATED_DEATH, "Cheated death"}, {PLAYER_FACE_ANIMATION_IN_PRISON, "In prison"}, {PLAYER_FACE_ANIMATION_CHOOSE_ME, "Choose me"}, {PLAYER_FACE_ANIMATION_AWAKEN, "Awaken"}, {PLAYER_FACE_ANIMATION_ID_MONSTER_WEAK, "Id monster weak"}, {PLAYER_FACE_ANIMATION_ID_MONSTER_BIG, "Id monster big"}, {PLAYER_FACE_ANIMATION_ID_MONSTER_FAIL, "Id monster fail"}, {PLAYER_FACE_ANIMATION_LAST_MAN_STANDING, "Last man standing"}, {PLAYER_FACE_ANIMATION_NOT_ENOUGH_FOOD, "Not enough food"}, {PLAYER_FACE_ANIMATION_DEATH_BLOW, "Death blow"} };

		STRING_TO_ENUM_FACE_ANIMATION = invertMap(ENUM_TO_STRING_FACE_ANIMATION);

		detail::callbackFaceAnimationInitialize();

	}

	void makeEnumFaceAnimation_8()
	{
		PLAYER_FACE_ANIMATION_KILL_SMALL_ENEMY = 1;
		PLAYER_FACE_ANIMATION_KILL_BIG_ENEMY = 2;
		PLAYER_FACE_ANIMATION_STORE_CLOSED = 3;
		PLAYER_FACE_ANIMATION_DISARM_TRAP = 4;
		PLAYER_FACE_ANIMATION_TRAP_EXPLOADED = 5;
		PLAYER_FACE_ANIMATION_AVOID_DAMAGE = 6;
		PLAYER_FACE_ANIMATION_IDENTIFY_USELESS = 7;
		PLAYER_FACE_ANIMATION_IDENTIFY_GREAT = 8;
		PLAYER_FACE_ANIMATION_IDENTIFY_FAIL = 9;
		PLAYER_FACE_ANIMATION_REPAIR_ITEM = 10;
		PLAYER_FACE_ANIMATION_REPAIR_FAIL = 11;
		PLAYER_FACE_ANIMATION_SET_QUICK_SPELL = 12;
		PLAYER_FACE_ANIMATION_CANT_REST_HERE = 13;
		PLAYER_FACE_ANIMATION_SKILL_INCREASED = 14;
		PLAYER_FACE_ANIMATION_CANT_CARRY = 15;
		PLAYER_FACE_ANIMATION_MIX_POTION = 16;
		PLAYER_FACE_ANIMATION_POTION_EXPLODE = 17;
		PLAYER_FACE_ANIMATION_DOOR_LOCKED = 18;
		PLAYER_FACE_ANIMATION_WONT_BUDGE = 19;
		PLAYER_FACE_ANIMATION_CANT_LEARN_SPELL = 20;
		PLAYER_FACE_ANIMATION_LEARN_SPELL = 21;
		PLAYER_FACE_ANIMATION_HELLO = 22;
		PLAYER_FACE_ANIMATION_HELLO_NIGHT = 23;
		PLAYER_FACE_ANIMATION_DAMAGED = 24;
		PLAYER_FACE_ANIMATION_WEAK = 25;
		PLAYER_FACE_ANIMATION_AFRAID = 26;
		PLAYER_FACE_ANIMATION_POISONED = 27;
		PLAYER_FACE_ANIMATION_DESEASED = 28;
		PLAYER_FACE_ANIMATION_INSANE = 29;
		PLAYER_FACE_ANIMATION_CURSED = 30;
		PLAYER_FACE_ANIMATION_DRUNK = 31;
		PLAYER_FACE_ANIMATION_UNCONSIOUS = 32;
		PLAYER_FACE_ANIMATION_DEATH = 33;
		PLAYER_FACE_ANIMATION_STONED = 34;
		PLAYER_FACE_ANIMATION_ERADICATED = 35;
		PLAYER_FACE_ANIMATION_DINK_POTION = 36;
		PLAYER_FACE_ANIMATION_READ_SCOLL = 37;
		PLAYER_FACE_ANIMATION_NOT_ENOUGH_GOLD = 38;
		PLAYER_FACE_ANIMATION_CANT_EQUIP = 39;
		PLAYER_FACE_ANIMATION_ITEM_BROKEN_STOLEN = 40;
		PLAYER_FACE_ANIMATION_SPDRAINED = 41;
		PLAYER_FACE_ANIMATION_AGED = 42;
		PLAYER_FACE_ANIMATION_SPELL_FAILED = 43;
		PLAYER_FACE_ANIMATION_DAMAGED_PARTY = 44;
		PLAYER_FACE_ANIMATION_TIRED = 45;
		PLAYER_FACE_ANIMATION_ENTER_DUNGEON = 46;
		PLAYER_FACE_ANIMATION_LEAVE_DUNGEON = 47;
		PLAYER_FACE_ANIMATION_ALMOST_DEAD = 48;
		PLAYER_FACE_ANIMATION_CAST_SPELL = 49;
		PLAYER_FACE_ANIMATION_SHOOT = 50;
		PLAYER_FACE_ANIMATION_ATTACK_HIT = 51;
		PLAYER_FACE_ANIMATION_ATTACK_MISS = 52;
		PLAYER_FACE_ANIMATION_BEG = 53;
		PLAYER_FACE_ANIMATION_BEG_FAIL = 54;
		PLAYER_FACE_ANIMATION_THREAT = 55;
		PLAYER_FACE_ANIMATION_THREAT_FAIL = 56;
		PLAYER_FACE_ANIMATION_BRIBE = 57;
		PLAYER_FACE_ANIMATION_BRIBE_FAIL = 58;
		PLAYER_FACE_ANIMATION_NPCDONT_TALK = 59;
		PLAYER_FACE_ANIMATION_FOUND_ITEM = 60;
		PLAYER_FACE_ANIMATION_HIRE_NPC = 61;
		PLAYER_FACE_ANIMATION_LOOK_UP = 63;
		PLAYER_FACE_ANIMATION_LOOK_DOWN = 64;
		PLAYER_FACE_ANIMATION_YELL = 65;
		PLAYER_FACE_ANIMATION_FALLING = 66;
		PLAYER_FACE_ANIMATION_TAVERN_PACKS_FULL = 67;
		PLAYER_FACE_ANIMATION_TAVERN_DRINK = 68;
		PLAYER_FACE_ANIMATION_TAVERN_GOT_DRUNK = 69;
		PLAYER_FACE_ANIMATION_TAVERN_TIP = 70;
		PLAYER_FACE_ANIMATION_TRAVEL_HORSE = 71;
		PLAYER_FACE_ANIMATION_TRAVEL_BOAT = 72;
		PLAYER_FACE_ANIMATION_SHOP_IDENTIFY = 73;
		PLAYER_FACE_ANIMATION_SHOP_REPAIR = 74;
		PLAYER_FACE_ANIMATION_SHOP_ITEM_BOUGHT = 75;
		PLAYER_FACE_ANIMATION_SHOP_ALREADY_IDENTIFIED = 76;
		PLAYER_FACE_ANIMATION_SHOP_ITEM_SOLD = 77;
		PLAYER_FACE_ANIMATION_SKILL_LEARNED = 78;
		PLAYER_FACE_ANIMATION_SHOP_WRONG_SHOP = 79;
		PLAYER_FACE_ANIMATION_SHOP_RUDE = 80;
		PLAYER_FACE_ANIMATION_BANK_DEPOSIT = 81;
		PLAYER_FACE_ANIMATION_TEMPLE_HEAL = 82;
		PLAYER_FACE_ANIMATION_TEMPLE_DONATE = 83;
		PLAYER_FACE_ANIMATION_HELLO_HOUSE = 84;
		PLAYER_FACE_ANIMATION_SKILL_MASTERY_ICREASED = 85;
		PLAYER_FACE_ANIMATION_JOINED_GUILD = 86;
		PLAYER_FACE_ANIMATION_LEVEL_UP = 87;
		PLAYER_FACE_ANIMATION_STAT_BONUS_INCREASED = 91;
		PLAYER_FACE_ANIMATION_STAT_BASE_INCREASED = 92;
		PLAYER_FACE_ANIMATION_QUEST_GOT = 93;
		PLAYER_FACE_ANIMATION_AWARD_GOT = 96;
		PLAYER_FACE_ANIMATION_AFRAID_SILENT = 98;
		PLAYER_FACE_ANIMATION_CHEATED_DEATH = 99;
		PLAYER_FACE_ANIMATION_IN_PRISON = 100;
		PLAYER_FACE_ANIMATION_CHOOSE_ME = 102;
		PLAYER_FACE_ANIMATION_AWAKEN = 103;
		PLAYER_FACE_ANIMATION_ID_MONSTER_WEAK = 104;
		PLAYER_FACE_ANIMATION_ID_MONSTER_BIG = 105;
		PLAYER_FACE_ANIMATION_ID_MONSTER_FAIL = 106;
		PLAYER_FACE_ANIMATION_LAST_MAN_STANDING = 107;
		PLAYER_FACE_ANIMATION_NOT_ENOUGH_FOOD = 108;
		PLAYER_FACE_ANIMATION_DEATH_BLOW = 109;

		FACE_ANIMATION_ALL = { PLAYER_FACE_ANIMATION_KILL_SMALL_ENEMY, PLAYER_FACE_ANIMATION_KILL_BIG_ENEMY, PLAYER_FACE_ANIMATION_STORE_CLOSED, PLAYER_FACE_ANIMATION_DISARM_TRAP, PLAYER_FACE_ANIMATION_TRAP_EXPLOADED, PLAYER_FACE_ANIMATION_AVOID_DAMAGE, PLAYER_FACE_ANIMATION_IDENTIFY_USELESS, PLAYER_FACE_ANIMATION_IDENTIFY_GREAT, PLAYER_FACE_ANIMATION_IDENTIFY_FAIL, PLAYER_FACE_ANIMATION_REPAIR_ITEM, PLAYER_FACE_ANIMATION_REPAIR_FAIL, PLAYER_FACE_ANIMATION_SET_QUICK_SPELL, PLAYER_FACE_ANIMATION_CANT_REST_HERE, PLAYER_FACE_ANIMATION_SKILL_INCREASED, PLAYER_FACE_ANIMATION_CANT_CARRY, PLAYER_FACE_ANIMATION_MIX_POTION, PLAYER_FACE_ANIMATION_POTION_EXPLODE, PLAYER_FACE_ANIMATION_DOOR_LOCKED, PLAYER_FACE_ANIMATION_WONT_BUDGE, PLAYER_FACE_ANIMATION_CANT_LEARN_SPELL, PLAYER_FACE_ANIMATION_LEARN_SPELL, PLAYER_FACE_ANIMATION_HELLO, PLAYER_FACE_ANIMATION_HELLO_NIGHT, PLAYER_FACE_ANIMATION_DAMAGED, PLAYER_FACE_ANIMATION_WEAK, PLAYER_FACE_ANIMATION_AFRAID, PLAYER_FACE_ANIMATION_POISONED, PLAYER_FACE_ANIMATION_DESEASED, PLAYER_FACE_ANIMATION_INSANE, PLAYER_FACE_ANIMATION_CURSED, PLAYER_FACE_ANIMATION_DRUNK, PLAYER_FACE_ANIMATION_UNCONSIOUS, PLAYER_FACE_ANIMATION_DEATH, PLAYER_FACE_ANIMATION_STONED, PLAYER_FACE_ANIMATION_ERADICATED, PLAYER_FACE_ANIMATION_DINK_POTION, PLAYER_FACE_ANIMATION_READ_SCOLL, PLAYER_FACE_ANIMATION_NOT_ENOUGH_GOLD, PLAYER_FACE_ANIMATION_CANT_EQUIP, PLAYER_FACE_ANIMATION_ITEM_BROKEN_STOLEN, PLAYER_FACE_ANIMATION_SPDRAINED, PLAYER_FACE_ANIMATION_AGED, PLAYER_FACE_ANIMATION_SPELL_FAILED, PLAYER_FACE_ANIMATION_DAMAGED_PARTY, PLAYER_FACE_ANIMATION_TIRED, PLAYER_FACE_ANIMATION_ENTER_DUNGEON, PLAYER_FACE_ANIMATION_LEAVE_DUNGEON, PLAYER_FACE_ANIMATION_ALMOST_DEAD, PLAYER_FACE_ANIMATION_CAST_SPELL, PLAYER_FACE_ANIMATION_SHOOT, PLAYER_FACE_ANIMATION_ATTACK_HIT, PLAYER_FACE_ANIMATION_ATTACK_MISS, PLAYER_FACE_ANIMATION_BEG, PLAYER_FACE_ANIMATION_BEG_FAIL, PLAYER_FACE_ANIMATION_THREAT, PLAYER_FACE_ANIMATION_THREAT_FAIL, PLAYER_FACE_ANIMATION_BRIBE, PLAYER_FACE_ANIMATION_BRIBE_FAIL, PLAYER_FACE_ANIMATION_NPCDONT_TALK, PLAYER_FACE_ANIMATION_FOUND_ITEM, PLAYER_FACE_ANIMATION_HIRE_NPC, PLAYER_FACE_ANIMATION_LOOK_UP, PLAYER_FACE_ANIMATION_LOOK_DOWN, PLAYER_FACE_ANIMATION_YELL, PLAYER_FACE_ANIMATION_FALLING, PLAYER_FACE_ANIMATION_TAVERN_PACKS_FULL, PLAYER_FACE_ANIMATION_TAVERN_DRINK, PLAYER_FACE_ANIMATION_TAVERN_GOT_DRUNK, PLAYER_FACE_ANIMATION_TAVERN_TIP, PLAYER_FACE_ANIMATION_TRAVEL_HORSE, PLAYER_FACE_ANIMATION_TRAVEL_BOAT, PLAYER_FACE_ANIMATION_SHOP_IDENTIFY, PLAYER_FACE_ANIMATION_SHOP_REPAIR, PLAYER_FACE_ANIMATION_SHOP_ITEM_BOUGHT, PLAYER_FACE_ANIMATION_SHOP_ALREADY_IDENTIFIED, PLAYER_FACE_ANIMATION_SHOP_ITEM_SOLD, PLAYER_FACE_ANIMATION_SKILL_LEARNED, PLAYER_FACE_ANIMATION_SHOP_WRONG_SHOP, PLAYER_FACE_ANIMATION_SHOP_RUDE, PLAYER_FACE_ANIMATION_BANK_DEPOSIT, PLAYER_FACE_ANIMATION_TEMPLE_HEAL, PLAYER_FACE_ANIMATION_TEMPLE_DONATE, PLAYER_FACE_ANIMATION_HELLO_HOUSE, PLAYER_FACE_ANIMATION_SKILL_MASTERY_ICREASED, PLAYER_FACE_ANIMATION_JOINED_GUILD, PLAYER_FACE_ANIMATION_LEVEL_UP, PLAYER_FACE_ANIMATION_STAT_BONUS_INCREASED, PLAYER_FACE_ANIMATION_STAT_BASE_INCREASED, PLAYER_FACE_ANIMATION_QUEST_GOT, PLAYER_FACE_ANIMATION_AWARD_GOT, PLAYER_FACE_ANIMATION_AFRAID_SILENT, PLAYER_FACE_ANIMATION_CHEATED_DEATH, PLAYER_FACE_ANIMATION_IN_PRISON, PLAYER_FACE_ANIMATION_CHOOSE_ME, PLAYER_FACE_ANIMATION_AWAKEN, PLAYER_FACE_ANIMATION_ID_MONSTER_WEAK, PLAYER_FACE_ANIMATION_ID_MONSTER_BIG, PLAYER_FACE_ANIMATION_ID_MONSTER_FAIL, PLAYER_FACE_ANIMATION_LAST_MAN_STANDING, PLAYER_FACE_ANIMATION_NOT_ENOUGH_FOOD, PLAYER_FACE_ANIMATION_DEATH_BLOW };

		ENUM_TO_STRING_FACE_ANIMATION = { {PLAYER_FACE_ANIMATION_KILL_SMALL_ENEMY, "Kill small enemy"}, {PLAYER_FACE_ANIMATION_KILL_BIG_ENEMY, "Kill big enemy"}, {PLAYER_FACE_ANIMATION_STORE_CLOSED, "Store closed"}, {PLAYER_FACE_ANIMATION_DISARM_TRAP, "Disarm trap"}, {PLAYER_FACE_ANIMATION_TRAP_EXPLOADED, "Trap exploaded"}, {PLAYER_FACE_ANIMATION_AVOID_DAMAGE, "Avoid damage"}, {PLAYER_FACE_ANIMATION_IDENTIFY_USELESS, "Identify useless"}, {PLAYER_FACE_ANIMATION_IDENTIFY_GREAT, "Identify great"}, {PLAYER_FACE_ANIMATION_IDENTIFY_FAIL, "Identify fail"}, {PLAYER_FACE_ANIMATION_REPAIR_ITEM, "Repair item"}, {PLAYER_FACE_ANIMATION_REPAIR_FAIL, "Repair fail"}, {PLAYER_FACE_ANIMATION_SET_QUICK_SPELL, "Set quick spell"}, {PLAYER_FACE_ANIMATION_CANT_REST_HERE, "Cant rest here"}, {PLAYER_FACE_ANIMATION_SKILL_INCREASED, "Skill increased"}, {PLAYER_FACE_ANIMATION_CANT_CARRY, "Cant carry"}, {PLAYER_FACE_ANIMATION_MIX_POTION, "Mix potion"}, {PLAYER_FACE_ANIMATION_POTION_EXPLODE, "Potion explode"}, {PLAYER_FACE_ANIMATION_DOOR_LOCKED, "Door locked"}, {PLAYER_FACE_ANIMATION_WONT_BUDGE, "Wont budge"}, {PLAYER_FACE_ANIMATION_CANT_LEARN_SPELL, "Cant learn spell"}, {PLAYER_FACE_ANIMATION_LEARN_SPELL, "Learn spell"}, {PLAYER_FACE_ANIMATION_HELLO, "Hello"}, {PLAYER_FACE_ANIMATION_HELLO_NIGHT, "Hello night"}, {PLAYER_FACE_ANIMATION_DAMAGED, "Damaged"}, {PLAYER_FACE_ANIMATION_WEAK, "Weak"}, {PLAYER_FACE_ANIMATION_AFRAID, "Afraid"}, {PLAYER_FACE_ANIMATION_POISONED, "Poisoned"}, {PLAYER_FACE_ANIMATION_DESEASED, "Deseased"}, {PLAYER_FACE_ANIMATION_INSANE, "Insane"}, {PLAYER_FACE_ANIMATION_CURSED, "Cursed"}, {PLAYER_FACE_ANIMATION_DRUNK, "Drunk"}, {PLAYER_FACE_ANIMATION_UNCONSIOUS, "Unconsious"}, {PLAYER_FACE_ANIMATION_DEATH, "Death"}, {PLAYER_FACE_ANIMATION_STONED, "Stoned"}, {PLAYER_FACE_ANIMATION_ERADICATED, "Eradicated"}, {PLAYER_FACE_ANIMATION_DINK_POTION, "Dink potion"}, {PLAYER_FACE_ANIMATION_READ_SCOLL, "Read scoll"}, {PLAYER_FACE_ANIMATION_NOT_ENOUGH_GOLD, "Not enough gold"}, {PLAYER_FACE_ANIMATION_CANT_EQUIP, "Cant equip"}, {PLAYER_FACE_ANIMATION_ITEM_BROKEN_STOLEN, "Item broken stolen"}, {PLAYER_FACE_ANIMATION_SPDRAINED, "SPDrained"}, {PLAYER_FACE_ANIMATION_AGED, "Aged"}, {PLAYER_FACE_ANIMATION_SPELL_FAILED, "Spell failed"}, {PLAYER_FACE_ANIMATION_DAMAGED_PARTY, "Damaged party"}, {PLAYER_FACE_ANIMATION_TIRED, "Tired"}, {PLAYER_FACE_ANIMATION_ENTER_DUNGEON, "Enter dungeon"}, {PLAYER_FACE_ANIMATION_LEAVE_DUNGEON, "Leave dungeon"}, {PLAYER_FACE_ANIMATION_ALMOST_DEAD, "Almost dead"}, {PLAYER_FACE_ANIMATION_CAST_SPELL, "Cast spell"}, {PLAYER_FACE_ANIMATION_SHOOT, "Shoot"}, {PLAYER_FACE_ANIMATION_ATTACK_HIT, "Attack hit"}, {PLAYER_FACE_ANIMATION_ATTACK_MISS, "Attack miss"}, {PLAYER_FACE_ANIMATION_BEG, "Beg"}, {PLAYER_FACE_ANIMATION_BEG_FAIL, "Beg fail"}, {PLAYER_FACE_ANIMATION_THREAT, "Threat"}, {PLAYER_FACE_ANIMATION_THREAT_FAIL, "Threat fail"}, {PLAYER_FACE_ANIMATION_BRIBE, "Bribe"}, {PLAYER_FACE_ANIMATION_BRIBE_FAIL, "Bribe fail"}, {PLAYER_FACE_ANIMATION_NPCDONT_TALK, "NPCDont talk"}, {PLAYER_FACE_ANIMATION_FOUND_ITEM, "Found item"}, {PLAYER_FACE_ANIMATION_HIRE_NPC, "Hire nPC"}, {PLAYER_FACE_ANIMATION_LOOK_UP, "Look up"}, {PLAYER_FACE_ANIMATION_LOOK_DOWN, "Look down"}, {PLAYER_FACE_ANIMATION_YELL, "Yell"}, {PLAYER_FACE_ANIMATION_FALLING, "Falling"}, {PLAYER_FACE_ANIMATION_TAVERN_PACKS_FULL, "Tavern packs full"}, {PLAYER_FACE_ANIMATION_TAVERN_DRINK, "Tavern drink"}, {PLAYER_FACE_ANIMATION_TAVERN_GOT_DRUNK, "Tavern got drunk"}, {PLAYER_FACE_ANIMATION_TAVERN_TIP, "Tavern tip"}, {PLAYER_FACE_ANIMATION_TRAVEL_HORSE, "Travel horse"}, {PLAYER_FACE_ANIMATION_TRAVEL_BOAT, "Travel boat"}, {PLAYER_FACE_ANIMATION_SHOP_IDENTIFY, "Shop identify"}, {PLAYER_FACE_ANIMATION_SHOP_REPAIR, "Shop repair"}, {PLAYER_FACE_ANIMATION_SHOP_ITEM_BOUGHT, "Shop item bought"}, {PLAYER_FACE_ANIMATION_SHOP_ALREADY_IDENTIFIED, "Shop already identified"}, {PLAYER_FACE_ANIMATION_SHOP_ITEM_SOLD, "Shop item sold"}, {PLAYER_FACE_ANIMATION_SKILL_LEARNED, "Skill learned"}, {PLAYER_FACE_ANIMATION_SHOP_WRONG_SHOP, "Shop wrong shop"}, {PLAYER_FACE_ANIMATION_SHOP_RUDE, "Shop rude"}, {PLAYER_FACE_ANIMATION_BANK_DEPOSIT, "Bank deposit"}, {PLAYER_FACE_ANIMATION_TEMPLE_HEAL, "Temple heal"}, {PLAYER_FACE_ANIMATION_TEMPLE_DONATE, "Temple donate"}, {PLAYER_FACE_ANIMATION_HELLO_HOUSE, "Hello house"}, {PLAYER_FACE_ANIMATION_SKILL_MASTERY_ICREASED, "Skill mastery icreased"}, {PLAYER_FACE_ANIMATION_JOINED_GUILD, "Joined guild"}, {PLAYER_FACE_ANIMATION_LEVEL_UP, "Level up"}, {PLAYER_FACE_ANIMATION_STAT_BONUS_INCREASED, "Stat bonus increased"}, {PLAYER_FACE_ANIMATION_STAT_BASE_INCREASED, "Stat base increased"}, {PLAYER_FACE_ANIMATION_QUEST_GOT, "Quest got"}, {PLAYER_FACE_ANIMATION_AWARD_GOT, "Award got"}, {PLAYER_FACE_ANIMATION_AFRAID_SILENT, "Afraid silent"}, {PLAYER_FACE_ANIMATION_CHEATED_DEATH, "Cheated death"}, {PLAYER_FACE_ANIMATION_IN_PRISON, "In prison"}, {PLAYER_FACE_ANIMATION_CHOOSE_ME, "Choose me"}, {PLAYER_FACE_ANIMATION_AWAKEN, "Awaken"}, {PLAYER_FACE_ANIMATION_ID_MONSTER_WEAK, "Id monster weak"}, {PLAYER_FACE_ANIMATION_ID_MONSTER_BIG, "Id monster big"}, {PLAYER_FACE_ANIMATION_ID_MONSTER_FAIL, "Id monster fail"}, {PLAYER_FACE_ANIMATION_LAST_MAN_STANDING, "Last man standing"}, {PLAYER_FACE_ANIMATION_NOT_ENOUGH_FOOD, "Not enough food"}, {PLAYER_FACE_ANIMATION_DEATH_BLOW, "Death blow"} };

		STRING_TO_ENUM_FACE_ANIMATION = invertMap(ENUM_TO_STRING_FACE_ANIMATION);

		detail::callbackFaceAnimationInitialize();

	}

bool checkFaceAnimationValidity(int64_t value)
{
	return detail::checkValidValue(FACE_ANIMATION_ALL, value, detail::callbackCheckFaceAnimationValidity);
}


	// Condition //

	int64_t 
		PLAYER_CONDITION_CURSED = INVALID_ID,
		PLAYER_CONDITION_WEAK = INVALID_ID,
		PLAYER_CONDITION_ASLEEP = INVALID_ID,
		PLAYER_CONDITION_AFRAID = INVALID_ID,
		PLAYER_CONDITION_DRUNK = INVALID_ID,
		PLAYER_CONDITION_INSANE = INVALID_ID,
		PLAYER_CONDITION_POISON_1 = INVALID_ID,
		PLAYER_CONDITION_DISEASE_1 = INVALID_ID,
		PLAYER_CONDITION_POISON_2 = INVALID_ID,
		PLAYER_CONDITION_DISEASE_2 = INVALID_ID,
		PLAYER_CONDITION_POISON_3 = INVALID_ID,
		PLAYER_CONDITION_DISEASE_3 = INVALID_ID,
		PLAYER_CONDITION_PARALYZED = INVALID_ID,
		PLAYER_CONDITION_UNCONSCIOUS = INVALID_ID,
		PLAYER_CONDITION_DEAD = INVALID_ID,
		PLAYER_CONDITION_STONED = INVALID_ID,
		PLAYER_CONDITION_ERADICATED = INVALID_ID,
		PLAYER_CONDITION_GOOD = INVALID_ID,
		PLAYER_CONDITION_ZOMBIE = INVALID_ID;

	std::vector<int64_t> CONDITION_ALL;
	std::map<int64_t, std::string> ENUM_TO_STRING_CONDITION;
	std::map<std::string, int64_t> STRING_TO_ENUM_CONDITION;

	void makeEnumCondition_6()
	{
		PLAYER_CONDITION_CURSED = 0;
		PLAYER_CONDITION_WEAK = 1;
		PLAYER_CONDITION_ASLEEP = 2;
		PLAYER_CONDITION_AFRAID = 3;
		PLAYER_CONDITION_DRUNK = 4;
		PLAYER_CONDITION_INSANE = 5;
		PLAYER_CONDITION_POISON_1 = 6;
		PLAYER_CONDITION_DISEASE_1 = 7;
		PLAYER_CONDITION_POISON_2 = 8;
		PLAYER_CONDITION_DISEASE_2 = 9;
		PLAYER_CONDITION_POISON_3 = 10;
		PLAYER_CONDITION_DISEASE_3 = 11;
		PLAYER_CONDITION_PARALYZED = 12;
		PLAYER_CONDITION_UNCONSCIOUS = 13;
		PLAYER_CONDITION_DEAD = 14;
		PLAYER_CONDITION_STONED = 15;
		PLAYER_CONDITION_ERADICATED = 16;
		PLAYER_CONDITION_GOOD = 17;

		CONDITION_ALL = { PLAYER_CONDITION_CURSED, PLAYER_CONDITION_WEAK, PLAYER_CONDITION_ASLEEP, PLAYER_CONDITION_AFRAID, PLAYER_CONDITION_DRUNK, PLAYER_CONDITION_INSANE, PLAYER_CONDITION_POISON_1, PLAYER_CONDITION_DISEASE_1, PLAYER_CONDITION_POISON_2, PLAYER_CONDITION_DISEASE_2, PLAYER_CONDITION_POISON_3, PLAYER_CONDITION_DISEASE_3, PLAYER_CONDITION_PARALYZED, PLAYER_CONDITION_UNCONSCIOUS, PLAYER_CONDITION_DEAD, PLAYER_CONDITION_STONED, PLAYER_CONDITION_ERADICATED, PLAYER_CONDITION_GOOD };

		ENUM_TO_STRING_CONDITION = { {PLAYER_CONDITION_CURSED, "Cursed"}, {PLAYER_CONDITION_WEAK, "Weak"}, {PLAYER_CONDITION_ASLEEP, "Asleep"}, {PLAYER_CONDITION_AFRAID, "Afraid"}, {PLAYER_CONDITION_DRUNK, "Drunk"}, {PLAYER_CONDITION_INSANE, "Insane"}, {PLAYER_CONDITION_POISON_1, "Poison 1"}, {PLAYER_CONDITION_DISEASE_1, "Disease 1"}, {PLAYER_CONDITION_POISON_2, "Poison 2"}, {PLAYER_CONDITION_DISEASE_2, "Disease 2"}, {PLAYER_CONDITION_POISON_3, "Poison 3"}, {PLAYER_CONDITION_DISEASE_3, "Disease 3"}, {PLAYER_CONDITION_PARALYZED, "Paralyzed"}, {PLAYER_CONDITION_UNCONSCIOUS, "Unconscious"}, {PLAYER_CONDITION_DEAD, "Dead"}, {PLAYER_CONDITION_STONED, "Stoned"}, {PLAYER_CONDITION_ERADICATED, "Eradicated"}, {PLAYER_CONDITION_GOOD, "Good"} };

		STRING_TO_ENUM_CONDITION = invertMap(ENUM_TO_STRING_CONDITION);

		detail::callbackConditionInitialize();

	}

	void makeEnumCondition_7()
	{
		PLAYER_CONDITION_CURSED = 0;
		PLAYER_CONDITION_WEAK = 1;
		PLAYER_CONDITION_ASLEEP = 2;
		PLAYER_CONDITION_AFRAID = 3;
		PLAYER_CONDITION_DRUNK = 4;
		PLAYER_CONDITION_INSANE = 5;
		PLAYER_CONDITION_POISON_1 = 6;
		PLAYER_CONDITION_DISEASE_1 = 7;
		PLAYER_CONDITION_POISON_2 = 8;
		PLAYER_CONDITION_DISEASE_2 = 9;
		PLAYER_CONDITION_POISON_3 = 10;
		PLAYER_CONDITION_DISEASE_3 = 11;
		PLAYER_CONDITION_PARALYZED = 12;
		PLAYER_CONDITION_UNCONSCIOUS = 13;
		PLAYER_CONDITION_DEAD = 14;
		PLAYER_CONDITION_STONED = 15;
		PLAYER_CONDITION_ERADICATED = 16;
		PLAYER_CONDITION_ZOMBIE = 17;
		PLAYER_CONDITION_GOOD = 18;

		CONDITION_ALL = { PLAYER_CONDITION_CURSED, PLAYER_CONDITION_WEAK, PLAYER_CONDITION_ASLEEP, PLAYER_CONDITION_AFRAID, PLAYER_CONDITION_DRUNK, PLAYER_CONDITION_INSANE, PLAYER_CONDITION_POISON_1, PLAYER_CONDITION_DISEASE_1, PLAYER_CONDITION_POISON_2, PLAYER_CONDITION_DISEASE_2, PLAYER_CONDITION_POISON_3, PLAYER_CONDITION_DISEASE_3, PLAYER_CONDITION_PARALYZED, PLAYER_CONDITION_UNCONSCIOUS, PLAYER_CONDITION_DEAD, PLAYER_CONDITION_STONED, PLAYER_CONDITION_ERADICATED, PLAYER_CONDITION_ZOMBIE, PLAYER_CONDITION_GOOD };

		ENUM_TO_STRING_CONDITION = { {PLAYER_CONDITION_CURSED, "Cursed"}, {PLAYER_CONDITION_WEAK, "Weak"}, {PLAYER_CONDITION_ASLEEP, "Asleep"}, {PLAYER_CONDITION_AFRAID, "Afraid"}, {PLAYER_CONDITION_DRUNK, "Drunk"}, {PLAYER_CONDITION_INSANE, "Insane"}, {PLAYER_CONDITION_POISON_1, "Poison 1"}, {PLAYER_CONDITION_DISEASE_1, "Disease 1"}, {PLAYER_CONDITION_POISON_2, "Poison 2"}, {PLAYER_CONDITION_DISEASE_2, "Disease 2"}, {PLAYER_CONDITION_POISON_3, "Poison 3"}, {PLAYER_CONDITION_DISEASE_3, "Disease 3"}, {PLAYER_CONDITION_PARALYZED, "Paralyzed"}, {PLAYER_CONDITION_UNCONSCIOUS, "Unconscious"}, {PLAYER_CONDITION_DEAD, "Dead"}, {PLAYER_CONDITION_STONED, "Stoned"}, {PLAYER_CONDITION_ERADICATED, "Eradicated"}, {PLAYER_CONDITION_ZOMBIE, "Zombie"}, {PLAYER_CONDITION_GOOD, "Good"} };

		STRING_TO_ENUM_CONDITION = invertMap(ENUM_TO_STRING_CONDITION);

		detail::callbackConditionInitialize();

	}

	void makeEnumCondition_8()
	{
		PLAYER_CONDITION_CURSED = 0;
		PLAYER_CONDITION_WEAK = 1;
		PLAYER_CONDITION_ASLEEP = 2;
		PLAYER_CONDITION_AFRAID = 3;
		PLAYER_CONDITION_DRUNK = 4;
		PLAYER_CONDITION_INSANE = 5;
		PLAYER_CONDITION_POISON_1 = 6;
		PLAYER_CONDITION_DISEASE_1 = 7;
		PLAYER_CONDITION_POISON_2 = 8;
		PLAYER_CONDITION_DISEASE_2 = 9;
		PLAYER_CONDITION_POISON_3 = 10;
		PLAYER_CONDITION_DISEASE_3 = 11;
		PLAYER_CONDITION_PARALYZED = 12;
		PLAYER_CONDITION_UNCONSCIOUS = 13;
		PLAYER_CONDITION_DEAD = 14;
		PLAYER_CONDITION_STONED = 15;
		PLAYER_CONDITION_ERADICATED = 16;
		PLAYER_CONDITION_ZOMBIE = 17;
		PLAYER_CONDITION_GOOD = 18;

		CONDITION_ALL = { PLAYER_CONDITION_CURSED, PLAYER_CONDITION_WEAK, PLAYER_CONDITION_ASLEEP, PLAYER_CONDITION_AFRAID, PLAYER_CONDITION_DRUNK, PLAYER_CONDITION_INSANE, PLAYER_CONDITION_POISON_1, PLAYER_CONDITION_DISEASE_1, PLAYER_CONDITION_POISON_2, PLAYER_CONDITION_DISEASE_2, PLAYER_CONDITION_POISON_3, PLAYER_CONDITION_DISEASE_3, PLAYER_CONDITION_PARALYZED, PLAYER_CONDITION_UNCONSCIOUS, PLAYER_CONDITION_DEAD, PLAYER_CONDITION_STONED, PLAYER_CONDITION_ERADICATED, PLAYER_CONDITION_ZOMBIE, PLAYER_CONDITION_GOOD };

		ENUM_TO_STRING_CONDITION = { {PLAYER_CONDITION_CURSED, "Cursed"}, {PLAYER_CONDITION_WEAK, "Weak"}, {PLAYER_CONDITION_ASLEEP, "Asleep"}, {PLAYER_CONDITION_AFRAID, "Afraid"}, {PLAYER_CONDITION_DRUNK, "Drunk"}, {PLAYER_CONDITION_INSANE, "Insane"}, {PLAYER_CONDITION_POISON_1, "Poison 1"}, {PLAYER_CONDITION_DISEASE_1, "Disease 1"}, {PLAYER_CONDITION_POISON_2, "Poison 2"}, {PLAYER_CONDITION_DISEASE_2, "Disease 2"}, {PLAYER_CONDITION_POISON_3, "Poison 3"}, {PLAYER_CONDITION_DISEASE_3, "Disease 3"}, {PLAYER_CONDITION_PARALYZED, "Paralyzed"}, {PLAYER_CONDITION_UNCONSCIOUS, "Unconscious"}, {PLAYER_CONDITION_DEAD, "Dead"}, {PLAYER_CONDITION_STONED, "Stoned"}, {PLAYER_CONDITION_ERADICATED, "Eradicated"}, {PLAYER_CONDITION_ZOMBIE, "Zombie"}, {PLAYER_CONDITION_GOOD, "Good"} };

		STRING_TO_ENUM_CONDITION = invertMap(ENUM_TO_STRING_CONDITION);

		detail::callbackConditionInitialize();

	}

bool checkConditionValidity(int64_t value)
{
	return detail::checkValidValue(CONDITION_ALL, value, detail::callbackCheckConditionValidity);
}


	// ChestBits //

	int64_t 
		CHEST_BIT_TRAPPED = INVALID_ID,
		CHEST_BIT_ITEMS_PLACED = INVALID_ID,
		CHEST_BIT_IDENTIFIED = INVALID_ID;

	std::vector<int64_t> CHEST_BITS_ALL;
	std::map<int64_t, std::string> ENUM_TO_STRING_CHEST_BITS;
	std::map<std::string, int64_t> STRING_TO_ENUM_CHEST_BITS;

	void makeEnumChestBits_6()
	{
		CHEST_BIT_TRAPPED = 1;
		CHEST_BIT_ITEMS_PLACED = 2;
		CHEST_BIT_IDENTIFIED = 4;

		CHEST_BITS_ALL = { CHEST_BIT_TRAPPED, CHEST_BIT_ITEMS_PLACED, CHEST_BIT_IDENTIFIED };

		ENUM_TO_STRING_CHEST_BITS = { {CHEST_BIT_TRAPPED, "Trapped"}, {CHEST_BIT_ITEMS_PLACED, "Items placed"}, {CHEST_BIT_IDENTIFIED, "Identified"} };

		STRING_TO_ENUM_CHEST_BITS = invertMap(ENUM_TO_STRING_CHEST_BITS);

		detail::callbackChestBitsInitialize();

	}

	void makeEnumChestBits_7()
	{
		CHEST_BIT_TRAPPED = 1;
		CHEST_BIT_ITEMS_PLACED = 2;
		CHEST_BIT_IDENTIFIED = 4;

		CHEST_BITS_ALL = { CHEST_BIT_TRAPPED, CHEST_BIT_ITEMS_PLACED, CHEST_BIT_IDENTIFIED };

		ENUM_TO_STRING_CHEST_BITS = { {CHEST_BIT_TRAPPED, "Trapped"}, {CHEST_BIT_ITEMS_PLACED, "Items placed"}, {CHEST_BIT_IDENTIFIED, "Identified"} };

		STRING_TO_ENUM_CHEST_BITS = invertMap(ENUM_TO_STRING_CHEST_BITS);

		detail::callbackChestBitsInitialize();

	}

	void makeEnumChestBits_8()
	{
		CHEST_BIT_TRAPPED = 1;
		CHEST_BIT_ITEMS_PLACED = 2;
		CHEST_BIT_IDENTIFIED = 4;

		CHEST_BITS_ALL = { CHEST_BIT_TRAPPED, CHEST_BIT_ITEMS_PLACED, CHEST_BIT_IDENTIFIED };

		ENUM_TO_STRING_CHEST_BITS = { {CHEST_BIT_TRAPPED, "Trapped"}, {CHEST_BIT_ITEMS_PLACED, "Items placed"}, {CHEST_BIT_IDENTIFIED, "Identified"} };

		STRING_TO_ENUM_CHEST_BITS = invertMap(ENUM_TO_STRING_CHEST_BITS);

		detail::callbackChestBitsInitialize();

	}

bool checkChestBitsValidity(int64_t value)
{
	return detail::checkValidValue(CHEST_BITS_ALL, value, detail::callbackCheckChestBitsValidity);
}


	// AIState //

	int64_t 
		MON_AI_STATE_STAND = INVALID_ID,
		MON_AI_STATE_ACTIVE = INVALID_ID,
		MON_AI_STATE_MELEE_ATTACK = INVALID_ID,
		MON_AI_STATE_RANGED_ATTACK = INVALID_ID,
		MON_AI_STATE_DYING = INVALID_ID,
		MON_AI_STATE_DEAD = INVALID_ID,
		MON_AI_STATE_PURSUE = INVALID_ID,
		MON_AI_STATE_FLEE = INVALID_ID,
		MON_AI_STATE_STUNNED = INVALID_ID,
		MON_AI_STATE_FIDGET = INVALID_ID,
		MON_AI_STATE_INTERACT = INVALID_ID,
		MON_AI_STATE_REMOVED = INVALID_ID,
		MON_AI_STATE_RANGED_ATTACK_2 = INVALID_ID,
		MON_AI_STATE_CAST_SPELL = INVALID_ID,
		MON_AI_STATE_STONED = INVALID_ID,
		MON_AI_STATE_PARALYZED = INVALID_ID,
		MON_AI_STATE_RESURRECT = INVALID_ID,
		MON_AI_STATE_SUMMONED = INVALID_ID,
		MON_AI_STATE_RANGED_ATTACK_4 = INVALID_ID,
		MON_AI_STATE_INVISIBLE = INVALID_ID;

	std::vector<int64_t> AISTATE_ALL;
	std::map<int64_t, std::string> ENUM_TO_STRING_AISTATE;
	std::map<std::string, int64_t> STRING_TO_ENUM_AISTATE;

	void makeEnumAIState_6()
	{
		MON_AI_STATE_STAND = 0;
		MON_AI_STATE_ACTIVE = 1;
		MON_AI_STATE_MELEE_ATTACK = 2;
		MON_AI_STATE_RANGED_ATTACK = 3;
		MON_AI_STATE_DYING = 4;
		MON_AI_STATE_DEAD = 5;
		MON_AI_STATE_PURSUE = 6;
		MON_AI_STATE_FLEE = 7;
		MON_AI_STATE_STUNNED = 8;
		MON_AI_STATE_FIDGET = 9;
		MON_AI_STATE_INTERACT = 10;
		MON_AI_STATE_REMOVED = 11;
		MON_AI_STATE_RANGED_ATTACK_2 = 12;
		MON_AI_STATE_CAST_SPELL = 13;
		MON_AI_STATE_STONED = 14;
		MON_AI_STATE_PARALYZED = 15;
		MON_AI_STATE_RESURRECT = 16;
		MON_AI_STATE_SUMMONED = 17;
		MON_AI_STATE_RANGED_ATTACK_4 = 18;
		MON_AI_STATE_INVISIBLE = 19;

		AISTATE_ALL = { MON_AI_STATE_STAND, MON_AI_STATE_ACTIVE, MON_AI_STATE_MELEE_ATTACK, MON_AI_STATE_RANGED_ATTACK, MON_AI_STATE_DYING, MON_AI_STATE_DEAD, MON_AI_STATE_PURSUE, MON_AI_STATE_FLEE, MON_AI_STATE_STUNNED, MON_AI_STATE_FIDGET, MON_AI_STATE_INTERACT, MON_AI_STATE_REMOVED, MON_AI_STATE_RANGED_ATTACK_2, MON_AI_STATE_CAST_SPELL, MON_AI_STATE_STONED, MON_AI_STATE_PARALYZED, MON_AI_STATE_RESURRECT, MON_AI_STATE_SUMMONED, MON_AI_STATE_RANGED_ATTACK_4, MON_AI_STATE_INVISIBLE };

		ENUM_TO_STRING_AISTATE = { {MON_AI_STATE_STAND, "Stand"}, {MON_AI_STATE_ACTIVE, "Active"}, {MON_AI_STATE_MELEE_ATTACK, "Melee attack"}, {MON_AI_STATE_RANGED_ATTACK, "Ranged attack"}, {MON_AI_STATE_DYING, "Dying"}, {MON_AI_STATE_DEAD, "Dead"}, {MON_AI_STATE_PURSUE, "Pursue"}, {MON_AI_STATE_FLEE, "Flee"}, {MON_AI_STATE_STUNNED, "Stunned"}, {MON_AI_STATE_FIDGET, "Fidget"}, {MON_AI_STATE_INTERACT, "Interact"}, {MON_AI_STATE_REMOVED, "Removed"}, {MON_AI_STATE_RANGED_ATTACK_2, "Ranged attack 2"}, {MON_AI_STATE_CAST_SPELL, "Cast spell"}, {MON_AI_STATE_STONED, "Stoned"}, {MON_AI_STATE_PARALYZED, "Paralyzed"}, {MON_AI_STATE_RESURRECT, "Resurrect"}, {MON_AI_STATE_SUMMONED, "Summoned"}, {MON_AI_STATE_RANGED_ATTACK_4, "Ranged attack 4"}, {MON_AI_STATE_INVISIBLE, "Invisible"} };

		STRING_TO_ENUM_AISTATE = invertMap(ENUM_TO_STRING_AISTATE);

		detail::callbackAIStateInitialize();

	}

	void makeEnumAIState_7()
	{
		MON_AI_STATE_STAND = 0;
		MON_AI_STATE_ACTIVE = 1;
		MON_AI_STATE_MELEE_ATTACK = 2;
		MON_AI_STATE_RANGED_ATTACK = 3;
		MON_AI_STATE_DYING = 4;
		MON_AI_STATE_DEAD = 5;
		MON_AI_STATE_PURSUE = 6;
		MON_AI_STATE_FLEE = 7;
		MON_AI_STATE_STUNNED = 8;
		MON_AI_STATE_FIDGET = 9;
		MON_AI_STATE_INTERACT = 10;
		MON_AI_STATE_REMOVED = 11;
		MON_AI_STATE_RANGED_ATTACK_2 = 12;
		MON_AI_STATE_CAST_SPELL = 13;
		MON_AI_STATE_STONED = 14;
		MON_AI_STATE_PARALYZED = 15;
		MON_AI_STATE_RESURRECT = 16;
		MON_AI_STATE_SUMMONED = 17;
		MON_AI_STATE_RANGED_ATTACK_4 = 18;
		MON_AI_STATE_INVISIBLE = 19;

		AISTATE_ALL = { MON_AI_STATE_STAND, MON_AI_STATE_ACTIVE, MON_AI_STATE_MELEE_ATTACK, MON_AI_STATE_RANGED_ATTACK, MON_AI_STATE_DYING, MON_AI_STATE_DEAD, MON_AI_STATE_PURSUE, MON_AI_STATE_FLEE, MON_AI_STATE_STUNNED, MON_AI_STATE_FIDGET, MON_AI_STATE_INTERACT, MON_AI_STATE_REMOVED, MON_AI_STATE_RANGED_ATTACK_2, MON_AI_STATE_CAST_SPELL, MON_AI_STATE_STONED, MON_AI_STATE_PARALYZED, MON_AI_STATE_RESURRECT, MON_AI_STATE_SUMMONED, MON_AI_STATE_RANGED_ATTACK_4, MON_AI_STATE_INVISIBLE };

		ENUM_TO_STRING_AISTATE = { {MON_AI_STATE_STAND, "Stand"}, {MON_AI_STATE_ACTIVE, "Active"}, {MON_AI_STATE_MELEE_ATTACK, "Melee attack"}, {MON_AI_STATE_RANGED_ATTACK, "Ranged attack"}, {MON_AI_STATE_DYING, "Dying"}, {MON_AI_STATE_DEAD, "Dead"}, {MON_AI_STATE_PURSUE, "Pursue"}, {MON_AI_STATE_FLEE, "Flee"}, {MON_AI_STATE_STUNNED, "Stunned"}, {MON_AI_STATE_FIDGET, "Fidget"}, {MON_AI_STATE_INTERACT, "Interact"}, {MON_AI_STATE_REMOVED, "Removed"}, {MON_AI_STATE_RANGED_ATTACK_2, "Ranged attack 2"}, {MON_AI_STATE_CAST_SPELL, "Cast spell"}, {MON_AI_STATE_STONED, "Stoned"}, {MON_AI_STATE_PARALYZED, "Paralyzed"}, {MON_AI_STATE_RESURRECT, "Resurrect"}, {MON_AI_STATE_SUMMONED, "Summoned"}, {MON_AI_STATE_RANGED_ATTACK_4, "Ranged attack 4"}, {MON_AI_STATE_INVISIBLE, "Invisible"} };

		STRING_TO_ENUM_AISTATE = invertMap(ENUM_TO_STRING_AISTATE);

		detail::callbackAIStateInitialize();

	}

	void makeEnumAIState_8()
	{
		MON_AI_STATE_STAND = 0;
		MON_AI_STATE_ACTIVE = 1;
		MON_AI_STATE_MELEE_ATTACK = 2;
		MON_AI_STATE_RANGED_ATTACK = 3;
		MON_AI_STATE_DYING = 4;
		MON_AI_STATE_DEAD = 5;
		MON_AI_STATE_PURSUE = 6;
		MON_AI_STATE_FLEE = 7;
		MON_AI_STATE_STUNNED = 8;
		MON_AI_STATE_FIDGET = 9;
		MON_AI_STATE_INTERACT = 10;
		MON_AI_STATE_REMOVED = 11;
		MON_AI_STATE_RANGED_ATTACK_2 = 12;
		MON_AI_STATE_CAST_SPELL = 13;
		MON_AI_STATE_STONED = 14;
		MON_AI_STATE_PARALYZED = 15;
		MON_AI_STATE_RESURRECT = 16;
		MON_AI_STATE_SUMMONED = 17;
		MON_AI_STATE_RANGED_ATTACK_4 = 18;
		MON_AI_STATE_INVISIBLE = 19;

		AISTATE_ALL = { MON_AI_STATE_STAND, MON_AI_STATE_ACTIVE, MON_AI_STATE_MELEE_ATTACK, MON_AI_STATE_RANGED_ATTACK, MON_AI_STATE_DYING, MON_AI_STATE_DEAD, MON_AI_STATE_PURSUE, MON_AI_STATE_FLEE, MON_AI_STATE_STUNNED, MON_AI_STATE_FIDGET, MON_AI_STATE_INTERACT, MON_AI_STATE_REMOVED, MON_AI_STATE_RANGED_ATTACK_2, MON_AI_STATE_CAST_SPELL, MON_AI_STATE_STONED, MON_AI_STATE_PARALYZED, MON_AI_STATE_RESURRECT, MON_AI_STATE_SUMMONED, MON_AI_STATE_RANGED_ATTACK_4, MON_AI_STATE_INVISIBLE };

		ENUM_TO_STRING_AISTATE = { {MON_AI_STATE_STAND, "Stand"}, {MON_AI_STATE_ACTIVE, "Active"}, {MON_AI_STATE_MELEE_ATTACK, "Melee attack"}, {MON_AI_STATE_RANGED_ATTACK, "Ranged attack"}, {MON_AI_STATE_DYING, "Dying"}, {MON_AI_STATE_DEAD, "Dead"}, {MON_AI_STATE_PURSUE, "Pursue"}, {MON_AI_STATE_FLEE, "Flee"}, {MON_AI_STATE_STUNNED, "Stunned"}, {MON_AI_STATE_FIDGET, "Fidget"}, {MON_AI_STATE_INTERACT, "Interact"}, {MON_AI_STATE_REMOVED, "Removed"}, {MON_AI_STATE_RANGED_ATTACK_2, "Ranged attack 2"}, {MON_AI_STATE_CAST_SPELL, "Cast spell"}, {MON_AI_STATE_STONED, "Stoned"}, {MON_AI_STATE_PARALYZED, "Paralyzed"}, {MON_AI_STATE_RESURRECT, "Resurrect"}, {MON_AI_STATE_SUMMONED, "Summoned"}, {MON_AI_STATE_RANGED_ATTACK_4, "Ranged attack 4"}, {MON_AI_STATE_INVISIBLE, "Invisible"} };

		STRING_TO_ENUM_AISTATE = invertMap(ENUM_TO_STRING_AISTATE);

		detail::callbackAIStateInitialize();

	}

bool checkAIStateValidity(int64_t value)
{
	return detail::checkValidValue(AISTATE_ALL, value, detail::callbackCheckAIStateValidity);
}


	// Spells //

	int64_t 
		SPELL_TORCH_LIGHT = INVALID_ID,
		SPELL_FLAME_ARROW = INVALID_ID,
		SPELL_PROTECTION_FROM_FIRE = INVALID_ID,
		SPELL_FIRE_BOLT = INVALID_ID,
		SPELL_HASTE = INVALID_ID,
		SPELL_FIREBALL = INVALID_ID,
		SPELL_RING_OF_FIRE = INVALID_ID,
		SPELL_FIRE_BLAST = INVALID_ID,
		SPELL_METEOR_SHOWER = INVALID_ID,
		SPELL_INFERNO = INVALID_ID,
		SPELL_INCINERATE = INVALID_ID,
		SPELL_WIZARD_EYE = INVALID_ID,
		SPELL_STATIC_CHARGE = INVALID_ID,
		SPELL_PROTECTION_FROM_ELECTRICITY = INVALID_ID,
		SPELL_SPARKS = INVALID_ID,
		SPELL_FEATHER_FALL = INVALID_ID,
		SPELL_SHIELD = INVALID_ID,
		SPELL_LIGHTNING_BOLT = INVALID_ID,
		SPELL_JUMP = INVALID_ID,
		SPELL_IMPLOSION = INVALID_ID,
		SPELL_FLY = INVALID_ID,
		SPELL_STARBURST = INVALID_ID,
		SPELL_AWAKEN = INVALID_ID,
		SPELL_COLD_BEAM = INVALID_ID,
		SPELL_PROTECTION_FROM_COLD = INVALID_ID,
		SPELL_POISON_SPRAY = INVALID_ID,
		SPELL_WATER_WALK = INVALID_ID,
		SPELL_ICE_BOLT = INVALID_ID,
		SPELL_ENCHANT_ITEM = INVALID_ID,
		SPELL_ACID_BURST = INVALID_ID,
		SPELL_TOWN_PORTAL = INVALID_ID,
		SPELL_ICE_BLAST = INVALID_ID,
		SPELL_LLOYDS_BEACON = INVALID_ID,
		SPELL_STUN = INVALID_ID,
		SPELL_MAGIC_ARROW = INVALID_ID,
		SPELL_PROTECTION_FROM_MAGIC = INVALID_ID,
		SPELL_DEADLY_SWARM = INVALID_ID,
		SPELL_STONE_SKIN = INVALID_ID,
		SPELL_BLADES = INVALID_ID,
		SPELL_STONE_TO_FLESH = INVALID_ID,
		SPELL_ROCK_BLAST = INVALID_ID,
		SPELL_TURN_TO_STONE = INVALID_ID,
		SPELL_DEATH_BLOSSOM = INVALID_ID,
		SPELL_MASS_DISTORTION = INVALID_ID,
		SPELL_SPIRIT_ARROW = INVALID_ID,
		SPELL_BLESS = INVALID_ID,
		SPELL_HEALING_TOUCH = INVALID_ID,
		SPELL_LUCKY_DAY = INVALID_ID,
		SPELL_REMOVE_CURSE = INVALID_ID,
		SPELL_GUARDIAN_ANGEL = INVALID_ID,
		SPELL_HEROISM = INVALID_ID,
		SPELL_TURN_UNDEAD = INVALID_ID,
		SPELL_RAISE_DEAD = INVALID_ID,
		SPELL_SHARED_LIFE = INVALID_ID,
		SPELL_RESURRECTION = INVALID_ID,
		SPELL_MEDITATION = INVALID_ID,
		SPELL_REMOVE_FEAR = INVALID_ID,
		SPELL_MIND_BLAST = INVALID_ID,
		SPELL_PRECISION = INVALID_ID,
		SPELL_CURE_PARALYSIS = INVALID_ID,
		SPELL_CHARM = INVALID_ID,
		SPELL_MASS_FEAR = INVALID_ID,
		SPELL_FEEBLEMIND = INVALID_ID,
		SPELL_CURE_INSANITY = INVALID_ID,
		SPELL_PSYCHIC_SHOCK = INVALID_ID,
		SPELL_TELEKINESIS = INVALID_ID,
		SPELL_CURE_WEAKNESS = INVALID_ID,
		SPELL_FIRST_AID = INVALID_ID,
		SPELL_PROTECTION_FROM_POISON = INVALID_ID,
		SPELL_HARM = INVALID_ID,
		SPELL_CURE_WOUNDS = INVALID_ID,
		SPELL_CURE_POISON = INVALID_ID,
		SPELL_SPEED = INVALID_ID,
		SPELL_CURE_DISEASE = INVALID_ID,
		SPELL_POWER = INVALID_ID,
		SPELL_FLYING_FIST = INVALID_ID,
		SPELL_POWER_CURE = INVALID_ID,
		SPELL_CREATE_FOOD = INVALID_ID,
		SPELL_GOLDEN_TOUCH = INVALID_ID,
		SPELL_DISPEL_MAGIC = INVALID_ID,
		SPELL_SLOW = INVALID_ID,
		SPELL_DESTROY_UNDEAD = INVALID_ID,
		SPELL_DAY_OF_THE_GODS = INVALID_ID,
		SPELL_PRISMATIC_LIGHT = INVALID_ID,
		SPELL_HOUR_OF_POWER = INVALID_ID,
		SPELL_PARALYZE = INVALID_ID,
		SPELL_SUN_RAY = INVALID_ID,
		SPELL_DIVINE_INTERVENTION = INVALID_ID,
		SPELL_REANIMATE = INVALID_ID,
		SPELL_TOXIC_CLOUD = INVALID_ID,
		SPELL_MASS_CURSE = INVALID_ID,
		SPELL_SHRAPMETAL = INVALID_ID,
		SPELL_SHRINKING_RAY = INVALID_ID,
		SPELL_DAY_OF_PROTECTION = INVALID_ID,
		SPELL_FINGER_OF_DEATH = INVALID_ID,
		SPELL_MOON_RAY = INVALID_ID,
		SPELL_DRAGON_BREATH = INVALID_ID,
		SPELL_ARMAGEDDON = INVALID_ID,
		SPELL_DARK_CONTAINMENT = INVALID_ID,
		SPELL_SHOOT = INVALID_ID,
		SPELL_SHOOT_FIRE = INVALID_ID,
		SPELL_SHOOT_BLASTER = INVALID_ID,
		SPELL_FIRE_RESISTANCE = INVALID_ID,
		SPELL_FIRE_AURA = INVALID_ID,
		SPELL_FIRE_SPIKE = INVALID_ID,
		SPELL_IMMOLATION = INVALID_ID,
		SPELL_AIR_RESISTANCE = INVALID_ID,
		SPELL_INVISIBILITY = INVALID_ID,
		SPELL_WATER_RESISTANCE = INVALID_ID,
		SPELL_RECHARGE_ITEM = INVALID_ID,
		SPELL_EARTH_RESISTANCE = INVALID_ID,
		SPELL_DETECT_LIFE = INVALID_ID,
		SPELL_FATE = INVALID_ID,
		SPELL_PRESERVATION = INVALID_ID,
		SPELL_SPIRIT_LASH = INVALID_ID,
		SPELL_MIND_RESISTANCE = INVALID_ID,
		SPELL_TELEPATHY = INVALID_ID,
		SPELL_BERSERK = INVALID_ID,
		SPELL_ENSLAVE = INVALID_ID,
		SPELL_HEAL = INVALID_ID,
		SPELL_BODY_RESISTANCE = INVALID_ID,
		SPELL_REGENERATION = INVALID_ID,
		SPELL_HAMMERHANDS = INVALID_ID,
		SPELL_LIGHT_BOLT = INVALID_ID,
		SPELL_SUMMON_ELEMENTAL = INVALID_ID,
		SPELL_SUNRAY = INVALID_ID,
		SPELL_VAMPIRIC_WEAPON = INVALID_ID,
		SPELL_CONTROL_UNDEAD = INVALID_ID,
		SPELL_PAIN_REFLECTION = INVALID_ID,
		SPELL_SACRIFICE = INVALID_ID,
		SPELL_SOULDRINKER = INVALID_ID,
		SPELL_SUMMON_WISP = INVALID_ID,
		SPELL_DARK_GRASP = INVALID_ID,
		SPELL_GLAMOUR = INVALID_ID,
		SPELL_TRAVELERS_BOON = INVALID_ID,
		SPELL_BLIND = INVALID_ID,
		SPELL_DARKFIRE_BOLT = INVALID_ID,
		SPELL_LIFEDRAIN = INVALID_ID,
		SPELL_LEVITATE = INVALID_ID,
		SPELL_MISTFORM = INVALID_ID,
		SPELL_FEAR = INVALID_ID,
		SPELL_FLAME_BLAST = INVALID_ID,
		SPELL_FLIGHT = INVALID_ID,
		SPELL_WING_BUFFET = INVALID_ID,
		SPELL_SHOOT_CANNON_BALL = INVALID_ID,
		SPELL_SHOOT_DRAGON = INVALID_ID;

	std::vector<int64_t> SPELLS_ALL;
	std::map<int64_t, std::string> ENUM_TO_STRING_SPELLS;
	std::map<std::string, int64_t> STRING_TO_ENUM_SPELLS;

	void makeEnumSpells_6()
	{
		SPELL_TORCH_LIGHT = 1;
		SPELL_FLAME_ARROW = 2;
		SPELL_PROTECTION_FROM_FIRE = 3;
		SPELL_FIRE_BOLT = 4;
		SPELL_HASTE = 5;
		SPELL_FIREBALL = 6;
		SPELL_RING_OF_FIRE = 7;
		SPELL_FIRE_BLAST = 8;
		SPELL_METEOR_SHOWER = 9;
		SPELL_INFERNO = 10;
		SPELL_INCINERATE = 11;
		SPELL_WIZARD_EYE = 12;
		SPELL_STATIC_CHARGE = 13;
		SPELL_PROTECTION_FROM_ELECTRICITY = 14;
		SPELL_SPARKS = 15;
		SPELL_FEATHER_FALL = 16;
		SPELL_SHIELD = 17;
		SPELL_LIGHTNING_BOLT = 18;
		SPELL_JUMP = 19;
		SPELL_IMPLOSION = 20;
		SPELL_FLY = 21;
		SPELL_STARBURST = 22;
		SPELL_AWAKEN = 23;
		SPELL_COLD_BEAM = 24;
		SPELL_PROTECTION_FROM_COLD = 25;
		SPELL_POISON_SPRAY = 26;
		SPELL_WATER_WALK = 27;
		SPELL_ICE_BOLT = 28;
		SPELL_ENCHANT_ITEM = 29;
		SPELL_ACID_BURST = 30;
		SPELL_TOWN_PORTAL = 31;
		SPELL_ICE_BLAST = 32;
		SPELL_LLOYDS_BEACON = 33;
		SPELL_STUN = 34;
		SPELL_MAGIC_ARROW = 35;
		SPELL_PROTECTION_FROM_MAGIC = 36;
		SPELL_DEADLY_SWARM = 37;
		SPELL_STONE_SKIN = 38;
		SPELL_BLADES = 39;
		SPELL_STONE_TO_FLESH = 40;
		SPELL_ROCK_BLAST = 41;
		SPELL_TURN_TO_STONE = 42;
		SPELL_DEATH_BLOSSOM = 43;
		SPELL_MASS_DISTORTION = 44;
		SPELL_SPIRIT_ARROW = 45;
		SPELL_BLESS = 46;
		SPELL_HEALING_TOUCH = 47;
		SPELL_LUCKY_DAY = 48;
		SPELL_REMOVE_CURSE = 49;
		SPELL_GUARDIAN_ANGEL = 50;
		SPELL_HEROISM = 51;
		SPELL_TURN_UNDEAD = 52;
		SPELL_RAISE_DEAD = 53;
		SPELL_SHARED_LIFE = 54;
		SPELL_RESURRECTION = 55;
		SPELL_MEDITATION = 56;
		SPELL_REMOVE_FEAR = 57;
		SPELL_MIND_BLAST = 58;
		SPELL_PRECISION = 59;
		SPELL_CURE_PARALYSIS = 60;
		SPELL_CHARM = 61;
		SPELL_MASS_FEAR = 62;
		SPELL_FEEBLEMIND = 63;
		SPELL_CURE_INSANITY = 64;
		SPELL_PSYCHIC_SHOCK = 65;
		SPELL_TELEKINESIS = 66;
		SPELL_CURE_WEAKNESS = 67;
		SPELL_FIRST_AID = 68;
		SPELL_PROTECTION_FROM_POISON = 69;
		SPELL_HARM = 70;
		SPELL_CURE_WOUNDS = 71;
		SPELL_CURE_POISON = 72;
		SPELL_SPEED = 73;
		SPELL_CURE_DISEASE = 74;
		SPELL_POWER = 75;
		SPELL_FLYING_FIST = 76;
		SPELL_POWER_CURE = 77;
		SPELL_CREATE_FOOD = 78;
		SPELL_GOLDEN_TOUCH = 79;
		SPELL_DISPEL_MAGIC = 80;
		SPELL_SLOW = 81;
		SPELL_DESTROY_UNDEAD = 82;
		SPELL_DAY_OF_THE_GODS = 83;
		SPELL_PRISMATIC_LIGHT = 84;
		SPELL_HOUR_OF_POWER = 85;
		SPELL_PARALYZE = 86;
		SPELL_SUN_RAY = 87;
		SPELL_DIVINE_INTERVENTION = 88;
		SPELL_REANIMATE = 89;
		SPELL_TOXIC_CLOUD = 90;
		SPELL_MASS_CURSE = 91;
		SPELL_SHRAPMETAL = 92;
		SPELL_SHRINKING_RAY = 93;
		SPELL_DAY_OF_PROTECTION = 94;
		SPELL_FINGER_OF_DEATH = 95;
		SPELL_MOON_RAY = 96;
		SPELL_DRAGON_BREATH = 97;
		SPELL_ARMAGEDDON = 98;
		SPELL_DARK_CONTAINMENT = 99;
		SPELL_SHOOT = 100;
		SPELL_SHOOT_FIRE = 101;
		SPELL_SHOOT_BLASTER = 102;

		SPELLS_ALL = { SPELL_TORCH_LIGHT, SPELL_FLAME_ARROW, SPELL_PROTECTION_FROM_FIRE, SPELL_FIRE_BOLT, SPELL_HASTE, SPELL_FIREBALL, SPELL_RING_OF_FIRE, SPELL_FIRE_BLAST, SPELL_METEOR_SHOWER, SPELL_INFERNO, SPELL_INCINERATE, SPELL_WIZARD_EYE, SPELL_STATIC_CHARGE, SPELL_PROTECTION_FROM_ELECTRICITY, SPELL_SPARKS, SPELL_FEATHER_FALL, SPELL_SHIELD, SPELL_LIGHTNING_BOLT, SPELL_JUMP, SPELL_IMPLOSION, SPELL_FLY, SPELL_STARBURST, SPELL_AWAKEN, SPELL_COLD_BEAM, SPELL_PROTECTION_FROM_COLD, SPELL_POISON_SPRAY, SPELL_WATER_WALK, SPELL_ICE_BOLT, SPELL_ENCHANT_ITEM, SPELL_ACID_BURST, SPELL_TOWN_PORTAL, SPELL_ICE_BLAST, SPELL_LLOYDS_BEACON, SPELL_STUN, SPELL_MAGIC_ARROW, SPELL_PROTECTION_FROM_MAGIC, SPELL_DEADLY_SWARM, SPELL_STONE_SKIN, SPELL_BLADES, SPELL_STONE_TO_FLESH, SPELL_ROCK_BLAST, SPELL_TURN_TO_STONE, SPELL_DEATH_BLOSSOM, SPELL_MASS_DISTORTION, SPELL_SPIRIT_ARROW, SPELL_BLESS, SPELL_HEALING_TOUCH, SPELL_LUCKY_DAY, SPELL_REMOVE_CURSE, SPELL_GUARDIAN_ANGEL, SPELL_HEROISM, SPELL_TURN_UNDEAD, SPELL_RAISE_DEAD, SPELL_SHARED_LIFE, SPELL_RESURRECTION, SPELL_MEDITATION, SPELL_REMOVE_FEAR, SPELL_MIND_BLAST, SPELL_PRECISION, SPELL_CURE_PARALYSIS, SPELL_CHARM, SPELL_MASS_FEAR, SPELL_FEEBLEMIND, SPELL_CURE_INSANITY, SPELL_PSYCHIC_SHOCK, SPELL_TELEKINESIS, SPELL_CURE_WEAKNESS, SPELL_FIRST_AID, SPELL_PROTECTION_FROM_POISON, SPELL_HARM, SPELL_CURE_WOUNDS, SPELL_CURE_POISON, SPELL_SPEED, SPELL_CURE_DISEASE, SPELL_POWER, SPELL_FLYING_FIST, SPELL_POWER_CURE, SPELL_CREATE_FOOD, SPELL_GOLDEN_TOUCH, SPELL_DISPEL_MAGIC, SPELL_SLOW, SPELL_DESTROY_UNDEAD, SPELL_DAY_OF_THE_GODS, SPELL_PRISMATIC_LIGHT, SPELL_HOUR_OF_POWER, SPELL_PARALYZE, SPELL_SUN_RAY, SPELL_DIVINE_INTERVENTION, SPELL_REANIMATE, SPELL_TOXIC_CLOUD, SPELL_MASS_CURSE, SPELL_SHRAPMETAL, SPELL_SHRINKING_RAY, SPELL_DAY_OF_PROTECTION, SPELL_FINGER_OF_DEATH, SPELL_MOON_RAY, SPELL_DRAGON_BREATH, SPELL_ARMAGEDDON, SPELL_DARK_CONTAINMENT, SPELL_SHOOT, SPELL_SHOOT_FIRE, SPELL_SHOOT_BLASTER };

		ENUM_TO_STRING_SPELLS = { {SPELL_TORCH_LIGHT, "Torch light"}, {SPELL_FLAME_ARROW, "Flame arrow"}, {SPELL_PROTECTION_FROM_FIRE, "Protection from fire"}, {SPELL_FIRE_BOLT, "Fire bolt"}, {SPELL_HASTE, "Haste"}, {SPELL_FIREBALL, "Fireball"}, {SPELL_RING_OF_FIRE, "Ring of fire"}, {SPELL_FIRE_BLAST, "Fire blast"}, {SPELL_METEOR_SHOWER, "Meteor shower"}, {SPELL_INFERNO, "Inferno"}, {SPELL_INCINERATE, "Incinerate"}, {SPELL_WIZARD_EYE, "Wizard eye"}, {SPELL_STATIC_CHARGE, "Static charge"}, {SPELL_PROTECTION_FROM_ELECTRICITY, "Protection from electricity"}, {SPELL_SPARKS, "Sparks"}, {SPELL_FEATHER_FALL, "Feather fall"}, {SPELL_SHIELD, "Shield"}, {SPELL_LIGHTNING_BOLT, "Lightning bolt"}, {SPELL_JUMP, "Jump"}, {SPELL_IMPLOSION, "Implosion"}, {SPELL_FLY, "Fly"}, {SPELL_STARBURST, "Starburst"}, {SPELL_AWAKEN, "Awaken"}, {SPELL_COLD_BEAM, "Cold beam"}, {SPELL_PROTECTION_FROM_COLD, "Protection from cold"}, {SPELL_POISON_SPRAY, "Poison spray"}, {SPELL_WATER_WALK, "Water walk"}, {SPELL_ICE_BOLT, "Ice bolt"}, {SPELL_ENCHANT_ITEM, "Enchant item"}, {SPELL_ACID_BURST, "Acid burst"}, {SPELL_TOWN_PORTAL, "Town portal"}, {SPELL_ICE_BLAST, "Ice blast"}, {SPELL_LLOYDS_BEACON, "Lloyds beacon"}, {SPELL_STUN, "Stun"}, {SPELL_MAGIC_ARROW, "Magic arrow"}, {SPELL_PROTECTION_FROM_MAGIC, "Protection from magic"}, {SPELL_DEADLY_SWARM, "Deadly swarm"}, {SPELL_STONE_SKIN, "Stone skin"}, {SPELL_BLADES, "Blades"}, {SPELL_STONE_TO_FLESH, "Stone to flesh"}, {SPELL_ROCK_BLAST, "Rock blast"}, {SPELL_TURN_TO_STONE, "Turn to stone"}, {SPELL_DEATH_BLOSSOM, "Death blossom"}, {SPELL_MASS_DISTORTION, "Mass distortion"}, {SPELL_SPIRIT_ARROW, "Spirit arrow"}, {SPELL_BLESS, "Bless"}, {SPELL_HEALING_TOUCH, "Healing touch"}, {SPELL_LUCKY_DAY, "Lucky day"}, {SPELL_REMOVE_CURSE, "Remove curse"}, {SPELL_GUARDIAN_ANGEL, "Guardian angel"}, {SPELL_HEROISM, "Heroism"}, {SPELL_TURN_UNDEAD, "Turn undead"}, {SPELL_RAISE_DEAD, "Raise dead"}, {SPELL_SHARED_LIFE, "Shared life"}, {SPELL_RESURRECTION, "Resurrection"}, {SPELL_MEDITATION, "Meditation"}, {SPELL_REMOVE_FEAR, "Remove fear"}, {SPELL_MIND_BLAST, "Mind blast"}, {SPELL_PRECISION, "Precision"}, {SPELL_CURE_PARALYSIS, "Cure paralysis"}, {SPELL_CHARM, "Charm"}, {SPELL_MASS_FEAR, "Mass fear"}, {SPELL_FEEBLEMIND, "Feeblemind"}, {SPELL_CURE_INSANITY, "Cure insanity"}, {SPELL_PSYCHIC_SHOCK, "Psychic shock"}, {SPELL_TELEKINESIS, "Telekinesis"}, {SPELL_CURE_WEAKNESS, "Cure weakness"}, {SPELL_FIRST_AID, "First aid"}, {SPELL_PROTECTION_FROM_POISON, "Protection from poison"}, {SPELL_HARM, "Harm"}, {SPELL_CURE_WOUNDS, "Cure wounds"}, {SPELL_CURE_POISON, "Cure poison"}, {SPELL_SPEED, "Speed"}, {SPELL_CURE_DISEASE, "Cure disease"}, {SPELL_POWER, "Power"}, {SPELL_FLYING_FIST, "Flying fist"}, {SPELL_POWER_CURE, "Power cure"}, {SPELL_CREATE_FOOD, "Create food"}, {SPELL_GOLDEN_TOUCH, "Golden touch"}, {SPELL_DISPEL_MAGIC, "Dispel magic"}, {SPELL_SLOW, "Slow"}, {SPELL_DESTROY_UNDEAD, "Destroy undead"}, {SPELL_DAY_OF_THE_GODS, "Day of the gods"}, {SPELL_PRISMATIC_LIGHT, "Prismatic light"}, {SPELL_HOUR_OF_POWER, "Hour of power"}, {SPELL_PARALYZE, "Paralyze"}, {SPELL_SUN_RAY, "Sun ray"}, {SPELL_DIVINE_INTERVENTION, "Divine intervention"}, {SPELL_REANIMATE, "Reanimate"}, {SPELL_TOXIC_CLOUD, "Toxic cloud"}, {SPELL_MASS_CURSE, "Mass curse"}, {SPELL_SHRAPMETAL, "Shrapmetal"}, {SPELL_SHRINKING_RAY, "Shrinking ray"}, {SPELL_DAY_OF_PROTECTION, "Day of protection"}, {SPELL_FINGER_OF_DEATH, "Finger of death"}, {SPELL_MOON_RAY, "Moon ray"}, {SPELL_DRAGON_BREATH, "Dragon breath"}, {SPELL_ARMAGEDDON, "Armageddon"}, {SPELL_DARK_CONTAINMENT, "Dark containment"}, {SPELL_SHOOT, "Shoot"}, {SPELL_SHOOT_FIRE, "Shoot fire"}, {SPELL_SHOOT_BLASTER, "Shoot blaster"} };

		STRING_TO_ENUM_SPELLS = invertMap(ENUM_TO_STRING_SPELLS);

		detail::callbackSpellsInitialize();

	}

	void makeEnumSpells_7()
	{
		SPELL_TORCH_LIGHT = 1;
		SPELL_FIRE_BOLT = 2;
		SPELL_FIRE_RESISTANCE = 3;
		SPELL_FIRE_AURA = 4;
		SPELL_HASTE = 5;
		SPELL_FIREBALL = 6;
		SPELL_FIRE_SPIKE = 7;
		SPELL_IMMOLATION = 8;
		SPELL_METEOR_SHOWER = 9;
		SPELL_INFERNO = 10;
		SPELL_INCINERATE = 11;
		SPELL_WIZARD_EYE = 12;
		SPELL_FEATHER_FALL = 13;
		SPELL_AIR_RESISTANCE = 14;
		SPELL_SPARKS = 15;
		SPELL_JUMP = 16;
		SPELL_SHIELD = 17;
		SPELL_LIGHTNING_BOLT = 18;
		SPELL_INVISIBILITY = 19;
		SPELL_IMPLOSION = 20;
		SPELL_FLY = 21;
		SPELL_STARBURST = 22;
		SPELL_AWAKEN = 23;
		SPELL_POISON_SPRAY = 24;
		SPELL_WATER_RESISTANCE = 25;
		SPELL_ICE_BOLT = 26;
		SPELL_WATER_WALK = 27;
		SPELL_RECHARGE_ITEM = 28;
		SPELL_ACID_BURST = 29;
		SPELL_ENCHANT_ITEM = 30;
		SPELL_TOWN_PORTAL = 31;
		SPELL_ICE_BLAST = 32;
		SPELL_LLOYDS_BEACON = 33;
		SPELL_STUN = 34;
		SPELL_SLOW = 35;
		SPELL_EARTH_RESISTANCE = 36;
		SPELL_DEADLY_SWARM = 37;
		SPELL_STONE_SKIN = 38;
		SPELL_BLADES = 39;
		SPELL_STONE_TO_FLESH = 40;
		SPELL_ROCK_BLAST = 41;
		SPELL_TELEKINESIS = 42;
		SPELL_DEATH_BLOSSOM = 43;
		SPELL_MASS_DISTORTION = 44;
		SPELL_DETECT_LIFE = 45;
		SPELL_BLESS = 46;
		SPELL_FATE = 47;
		SPELL_TURN_UNDEAD = 48;
		SPELL_REMOVE_CURSE = 49;
		SPELL_PRESERVATION = 50;
		SPELL_HEROISM = 51;
		SPELL_SPIRIT_LASH = 52;
		SPELL_RAISE_DEAD = 53;
		SPELL_SHARED_LIFE = 54;
		SPELL_RESURRECTION = 55;
		SPELL_REMOVE_FEAR = 56;
		SPELL_MIND_BLAST = 57;
		SPELL_MIND_RESISTANCE = 58;
		SPELL_TELEPATHY = 59;
		SPELL_CHARM = 60;
		SPELL_CURE_PARALYSIS = 61;
		SPELL_BERSERK = 62;
		SPELL_MASS_FEAR = 63;
		SPELL_CURE_INSANITY = 64;
		SPELL_PSYCHIC_SHOCK = 65;
		SPELL_ENSLAVE = 66;
		SPELL_CURE_WEAKNESS = 67;
		SPELL_HEAL = 68;
		SPELL_BODY_RESISTANCE = 69;
		SPELL_HARM = 70;
		SPELL_REGENERATION = 71;
		SPELL_CURE_POISON = 72;
		SPELL_HAMMERHANDS = 73;
		SPELL_CURE_DISEASE = 74;
		SPELL_PROTECTION_FROM_MAGIC = 75;
		SPELL_FLYING_FIST = 76;
		SPELL_POWER_CURE = 77;
		SPELL_LIGHT_BOLT = 78;
		SPELL_DESTROY_UNDEAD = 79;
		SPELL_DISPEL_MAGIC = 80;
		SPELL_PARALYZE = 81;
		SPELL_SUMMON_ELEMENTAL = 82;
		SPELL_DAY_OF_THE_GODS = 83;
		SPELL_PRISMATIC_LIGHT = 84;
		SPELL_DAY_OF_PROTECTION = 85;
		SPELL_HOUR_OF_POWER = 86;
		SPELL_SUNRAY = 87;
		SPELL_DIVINE_INTERVENTION = 88;
		SPELL_REANIMATE = 89;
		SPELL_TOXIC_CLOUD = 90;
		SPELL_VAMPIRIC_WEAPON = 91;
		SPELL_SHRINKING_RAY = 92;
		SPELL_SHRAPMETAL = 93;
		SPELL_CONTROL_UNDEAD = 94;
		SPELL_PAIN_REFLECTION = 95;
		SPELL_SACRIFICE = 96;
		SPELL_DRAGON_BREATH = 97;
		SPELL_ARMAGEDDON = 98;
		SPELL_SOULDRINKER = 99;
		SPELL_SHOOT = 100;
		SPELL_SHOOT_FIRE = 101;
		SPELL_SHOOT_BLASTER = 102;

		SPELLS_ALL = { SPELL_TORCH_LIGHT, SPELL_FIRE_BOLT, SPELL_FIRE_RESISTANCE, SPELL_FIRE_AURA, SPELL_HASTE, SPELL_FIREBALL, SPELL_FIRE_SPIKE, SPELL_IMMOLATION, SPELL_METEOR_SHOWER, SPELL_INFERNO, SPELL_INCINERATE, SPELL_WIZARD_EYE, SPELL_FEATHER_FALL, SPELL_AIR_RESISTANCE, SPELL_SPARKS, SPELL_JUMP, SPELL_SHIELD, SPELL_LIGHTNING_BOLT, SPELL_INVISIBILITY, SPELL_IMPLOSION, SPELL_FLY, SPELL_STARBURST, SPELL_AWAKEN, SPELL_POISON_SPRAY, SPELL_WATER_RESISTANCE, SPELL_ICE_BOLT, SPELL_WATER_WALK, SPELL_RECHARGE_ITEM, SPELL_ACID_BURST, SPELL_ENCHANT_ITEM, SPELL_TOWN_PORTAL, SPELL_ICE_BLAST, SPELL_LLOYDS_BEACON, SPELL_STUN, SPELL_SLOW, SPELL_EARTH_RESISTANCE, SPELL_DEADLY_SWARM, SPELL_STONE_SKIN, SPELL_BLADES, SPELL_STONE_TO_FLESH, SPELL_ROCK_BLAST, SPELL_TELEKINESIS, SPELL_DEATH_BLOSSOM, SPELL_MASS_DISTORTION, SPELL_DETECT_LIFE, SPELL_BLESS, SPELL_FATE, SPELL_TURN_UNDEAD, SPELL_REMOVE_CURSE, SPELL_PRESERVATION, SPELL_HEROISM, SPELL_SPIRIT_LASH, SPELL_RAISE_DEAD, SPELL_SHARED_LIFE, SPELL_RESURRECTION, SPELL_REMOVE_FEAR, SPELL_MIND_BLAST, SPELL_MIND_RESISTANCE, SPELL_TELEPATHY, SPELL_CHARM, SPELL_CURE_PARALYSIS, SPELL_BERSERK, SPELL_MASS_FEAR, SPELL_CURE_INSANITY, SPELL_PSYCHIC_SHOCK, SPELL_ENSLAVE, SPELL_CURE_WEAKNESS, SPELL_HEAL, SPELL_BODY_RESISTANCE, SPELL_HARM, SPELL_REGENERATION, SPELL_CURE_POISON, SPELL_HAMMERHANDS, SPELL_CURE_DISEASE, SPELL_PROTECTION_FROM_MAGIC, SPELL_FLYING_FIST, SPELL_POWER_CURE, SPELL_LIGHT_BOLT, SPELL_DESTROY_UNDEAD, SPELL_DISPEL_MAGIC, SPELL_PARALYZE, SPELL_SUMMON_ELEMENTAL, SPELL_DAY_OF_THE_GODS, SPELL_PRISMATIC_LIGHT, SPELL_DAY_OF_PROTECTION, SPELL_HOUR_OF_POWER, SPELL_SUNRAY, SPELL_DIVINE_INTERVENTION, SPELL_REANIMATE, SPELL_TOXIC_CLOUD, SPELL_VAMPIRIC_WEAPON, SPELL_SHRINKING_RAY, SPELL_SHRAPMETAL, SPELL_CONTROL_UNDEAD, SPELL_PAIN_REFLECTION, SPELL_SACRIFICE, SPELL_DRAGON_BREATH, SPELL_ARMAGEDDON, SPELL_SOULDRINKER, SPELL_SHOOT, SPELL_SHOOT_FIRE, SPELL_SHOOT_BLASTER };

		ENUM_TO_STRING_SPELLS = { {SPELL_TORCH_LIGHT, "Torch light"}, {SPELL_FIRE_BOLT, "Fire bolt"}, {SPELL_FIRE_RESISTANCE, "Fire resistance"}, {SPELL_FIRE_AURA, "Fire aura"}, {SPELL_HASTE, "Haste"}, {SPELL_FIREBALL, "Fireball"}, {SPELL_FIRE_SPIKE, "Fire spike"}, {SPELL_IMMOLATION, "Immolation"}, {SPELL_METEOR_SHOWER, "Meteor shower"}, {SPELL_INFERNO, "Inferno"}, {SPELL_INCINERATE, "Incinerate"}, {SPELL_WIZARD_EYE, "Wizard eye"}, {SPELL_FEATHER_FALL, "Feather fall"}, {SPELL_AIR_RESISTANCE, "Air resistance"}, {SPELL_SPARKS, "Sparks"}, {SPELL_JUMP, "Jump"}, {SPELL_SHIELD, "Shield"}, {SPELL_LIGHTNING_BOLT, "Lightning bolt"}, {SPELL_INVISIBILITY, "Invisibility"}, {SPELL_IMPLOSION, "Implosion"}, {SPELL_FLY, "Fly"}, {SPELL_STARBURST, "Starburst"}, {SPELL_AWAKEN, "Awaken"}, {SPELL_POISON_SPRAY, "Poison spray"}, {SPELL_WATER_RESISTANCE, "Water resistance"}, {SPELL_ICE_BOLT, "Ice bolt"}, {SPELL_WATER_WALK, "Water walk"}, {SPELL_RECHARGE_ITEM, "Recharge item"}, {SPELL_ACID_BURST, "Acid burst"}, {SPELL_ENCHANT_ITEM, "Enchant item"}, {SPELL_TOWN_PORTAL, "Town portal"}, {SPELL_ICE_BLAST, "Ice blast"}, {SPELL_LLOYDS_BEACON, "Lloyds beacon"}, {SPELL_STUN, "Stun"}, {SPELL_SLOW, "Slow"}, {SPELL_EARTH_RESISTANCE, "Earth resistance"}, {SPELL_DEADLY_SWARM, "Deadly swarm"}, {SPELL_STONE_SKIN, "Stone skin"}, {SPELL_BLADES, "Blades"}, {SPELL_STONE_TO_FLESH, "Stone to flesh"}, {SPELL_ROCK_BLAST, "Rock blast"}, {SPELL_TELEKINESIS, "Telekinesis"}, {SPELL_DEATH_BLOSSOM, "Death blossom"}, {SPELL_MASS_DISTORTION, "Mass distortion"}, {SPELL_DETECT_LIFE, "Detect life"}, {SPELL_BLESS, "Bless"}, {SPELL_FATE, "Fate"}, {SPELL_TURN_UNDEAD, "Turn undead"}, {SPELL_REMOVE_CURSE, "Remove curse"}, {SPELL_PRESERVATION, "Preservation"}, {SPELL_HEROISM, "Heroism"}, {SPELL_SPIRIT_LASH, "Spirit lash"}, {SPELL_RAISE_DEAD, "Raise dead"}, {SPELL_SHARED_LIFE, "Shared life"}, {SPELL_RESURRECTION, "Resurrection"}, {SPELL_REMOVE_FEAR, "Remove fear"}, {SPELL_MIND_BLAST, "Mind blast"}, {SPELL_MIND_RESISTANCE, "Mind resistance"}, {SPELL_TELEPATHY, "Telepathy"}, {SPELL_CHARM, "Charm"}, {SPELL_CURE_PARALYSIS, "Cure paralysis"}, {SPELL_BERSERK, "Berserk"}, {SPELL_MASS_FEAR, "Mass fear"}, {SPELL_CURE_INSANITY, "Cure insanity"}, {SPELL_PSYCHIC_SHOCK, "Psychic shock"}, {SPELL_ENSLAVE, "Enslave"}, {SPELL_CURE_WEAKNESS, "Cure weakness"}, {SPELL_HEAL, "Heal"}, {SPELL_BODY_RESISTANCE, "Body resistance"}, {SPELL_HARM, "Harm"}, {SPELL_REGENERATION, "Regeneration"}, {SPELL_CURE_POISON, "Cure poison"}, {SPELL_HAMMERHANDS, "Hammerhands"}, {SPELL_CURE_DISEASE, "Cure disease"}, {SPELL_PROTECTION_FROM_MAGIC, "Protection from magic"}, {SPELL_FLYING_FIST, "Flying fist"}, {SPELL_POWER_CURE, "Power cure"}, {SPELL_LIGHT_BOLT, "Light bolt"}, {SPELL_DESTROY_UNDEAD, "Destroy undead"}, {SPELL_DISPEL_MAGIC, "Dispel magic"}, {SPELL_PARALYZE, "Paralyze"}, {SPELL_SUMMON_ELEMENTAL, "Summon elemental"}, {SPELL_DAY_OF_THE_GODS, "Day of the gods"}, {SPELL_PRISMATIC_LIGHT, "Prismatic light"}, {SPELL_DAY_OF_PROTECTION, "Day of protection"}, {SPELL_HOUR_OF_POWER, "Hour of power"}, {SPELL_SUNRAY, "Sunray"}, {SPELL_DIVINE_INTERVENTION, "Divine intervention"}, {SPELL_REANIMATE, "Reanimate"}, {SPELL_TOXIC_CLOUD, "Toxic cloud"}, {SPELL_VAMPIRIC_WEAPON, "Vampiric weapon"}, {SPELL_SHRINKING_RAY, "Shrinking ray"}, {SPELL_SHRAPMETAL, "Shrapmetal"}, {SPELL_CONTROL_UNDEAD, "Control undead"}, {SPELL_PAIN_REFLECTION, "Pain reflection"}, {SPELL_SACRIFICE, "Sacrifice"}, {SPELL_DRAGON_BREATH, "Dragon breath"}, {SPELL_ARMAGEDDON, "Armageddon"}, {SPELL_SOULDRINKER, "Souldrinker"}, {SPELL_SHOOT, "Shoot"}, {SPELL_SHOOT_FIRE, "Shoot fire"}, {SPELL_SHOOT_BLASTER, "Shoot blaster"} };

		STRING_TO_ENUM_SPELLS = invertMap(ENUM_TO_STRING_SPELLS);

		detail::callbackSpellsInitialize();

	}

	void makeEnumSpells_8()
	{
		SPELL_TORCH_LIGHT = 1;
		SPELL_FIRE_BOLT = 2;
		SPELL_FIRE_RESISTANCE = 3;
		SPELL_FIRE_AURA = 4;
		SPELL_HASTE = 5;
		SPELL_FIREBALL = 6;
		SPELL_FIRE_SPIKE = 7;
		SPELL_IMMOLATION = 8;
		SPELL_METEOR_SHOWER = 9;
		SPELL_INFERNO = 10;
		SPELL_INCINERATE = 11;
		SPELL_WIZARD_EYE = 12;
		SPELL_FEATHER_FALL = 13;
		SPELL_AIR_RESISTANCE = 14;
		SPELL_SPARKS = 15;
		SPELL_JUMP = 16;
		SPELL_SHIELD = 17;
		SPELL_LIGHTNING_BOLT = 18;
		SPELL_INVISIBILITY = 19;
		SPELL_IMPLOSION = 20;
		SPELL_FLY = 21;
		SPELL_STARBURST = 22;
		SPELL_AWAKEN = 23;
		SPELL_POISON_SPRAY = 24;
		SPELL_WATER_RESISTANCE = 25;
		SPELL_ICE_BOLT = 26;
		SPELL_WATER_WALK = 27;
		SPELL_RECHARGE_ITEM = 28;
		SPELL_ACID_BURST = 29;
		SPELL_ENCHANT_ITEM = 30;
		SPELL_TOWN_PORTAL = 31;
		SPELL_ICE_BLAST = 32;
		SPELL_LLOYDS_BEACON = 33;
		SPELL_STUN = 34;
		SPELL_SLOW = 35;
		SPELL_EARTH_RESISTANCE = 36;
		SPELL_DEADLY_SWARM = 37;
		SPELL_STONE_SKIN = 38;
		SPELL_BLADES = 39;
		SPELL_STONE_TO_FLESH = 40;
		SPELL_ROCK_BLAST = 41;
		SPELL_TELEKINESIS = 42;
		SPELL_DEATH_BLOSSOM = 43;
		SPELL_MASS_DISTORTION = 44;
		SPELL_DETECT_LIFE = 45;
		SPELL_BLESS = 46;
		SPELL_FATE = 47;
		SPELL_TURN_UNDEAD = 48;
		SPELL_REMOVE_CURSE = 49;
		SPELL_PRESERVATION = 50;
		SPELL_HEROISM = 51;
		SPELL_SPIRIT_LASH = 52;
		SPELL_RAISE_DEAD = 53;
		SPELL_SHARED_LIFE = 54;
		SPELL_RESURRECTION = 55;
		SPELL_TELEPATHY = 56;
		SPELL_REMOVE_FEAR = 57;
		SPELL_MIND_RESISTANCE = 58;
		SPELL_MIND_BLAST = 59;
		SPELL_CURE_PARALYSIS = 61;
		SPELL_BERSERK = 62;
		SPELL_MASS_FEAR = 63;
		SPELL_CURE_INSANITY = 64;
		SPELL_PSYCHIC_SHOCK = 65;
		SPELL_ENSLAVE = 66;
		SPELL_CURE_WEAKNESS = 67;
		SPELL_HEAL = 68;
		SPELL_BODY_RESISTANCE = 69;
		SPELL_HARM = 70;
		SPELL_REGENERATION = 71;
		SPELL_CURE_POISON = 72;
		SPELL_HAMMERHANDS = 73;
		SPELL_CURE_DISEASE = 74;
		SPELL_PROTECTION_FROM_MAGIC = 75;
		SPELL_FLYING_FIST = 76;
		SPELL_POWER_CURE = 77;
		SPELL_LIGHT_BOLT = 78;
		SPELL_DESTROY_UNDEAD = 79;
		SPELL_DISPEL_MAGIC = 80;
		SPELL_PARALYZE = 81;
		SPELL_SUMMON_WISP = 82;
		SPELL_DAY_OF_THE_GODS = 83;
		SPELL_PRISMATIC_LIGHT = 84;
		SPELL_DAY_OF_PROTECTION = 85;
		SPELL_HOUR_OF_POWER = 86;
		SPELL_SUNRAY = 87;
		SPELL_DIVINE_INTERVENTION = 88;
		SPELL_REANIMATE = 89;
		SPELL_TOXIC_CLOUD = 90;
		SPELL_VAMPIRIC_WEAPON = 91;
		SPELL_SHRINKING_RAY = 92;
		SPELL_SHRAPMETAL = 93;
		SPELL_CONTROL_UNDEAD = 94;
		SPELL_PAIN_REFLECTION = 95;
		SPELL_DARK_GRASP = 96;
		SPELL_DRAGON_BREATH = 97;
		SPELL_ARMAGEDDON = 98;
		SPELL_SOULDRINKER = 99;
		SPELL_GLAMOUR = 100;
		SPELL_TRAVELERS_BOON = 101;
		SPELL_BLIND = 102;
		SPELL_DARKFIRE_BOLT = 103;
		SPELL_LIFEDRAIN = 111;
		SPELL_LEVITATE = 112;
		SPELL_CHARM = 113;
		SPELL_MISTFORM = 114;
		SPELL_FEAR = 122;
		SPELL_FLAME_BLAST = 123;
		SPELL_FLIGHT = 124;
		SPELL_WING_BUFFET = 125;
		SPELL_SHOOT = 133;
		SPELL_SHOOT_FIRE = 134;
		SPELL_SHOOT_BLASTER = 135;
		SPELL_SHOOT_CANNON_BALL = 136;
		SPELL_SHOOT_DRAGON = 137;

		SPELLS_ALL = { SPELL_TORCH_LIGHT, SPELL_FIRE_BOLT, SPELL_FIRE_RESISTANCE, SPELL_FIRE_AURA, SPELL_HASTE, SPELL_FIREBALL, SPELL_FIRE_SPIKE, SPELL_IMMOLATION, SPELL_METEOR_SHOWER, SPELL_INFERNO, SPELL_INCINERATE, SPELL_WIZARD_EYE, SPELL_FEATHER_FALL, SPELL_AIR_RESISTANCE, SPELL_SPARKS, SPELL_JUMP, SPELL_SHIELD, SPELL_LIGHTNING_BOLT, SPELL_INVISIBILITY, SPELL_IMPLOSION, SPELL_FLY, SPELL_STARBURST, SPELL_AWAKEN, SPELL_POISON_SPRAY, SPELL_WATER_RESISTANCE, SPELL_ICE_BOLT, SPELL_WATER_WALK, SPELL_RECHARGE_ITEM, SPELL_ACID_BURST, SPELL_ENCHANT_ITEM, SPELL_TOWN_PORTAL, SPELL_ICE_BLAST, SPELL_LLOYDS_BEACON, SPELL_STUN, SPELL_SLOW, SPELL_EARTH_RESISTANCE, SPELL_DEADLY_SWARM, SPELL_STONE_SKIN, SPELL_BLADES, SPELL_STONE_TO_FLESH, SPELL_ROCK_BLAST, SPELL_TELEKINESIS, SPELL_DEATH_BLOSSOM, SPELL_MASS_DISTORTION, SPELL_DETECT_LIFE, SPELL_BLESS, SPELL_FATE, SPELL_TURN_UNDEAD, SPELL_REMOVE_CURSE, SPELL_PRESERVATION, SPELL_HEROISM, SPELL_SPIRIT_LASH, SPELL_RAISE_DEAD, SPELL_SHARED_LIFE, SPELL_RESURRECTION, SPELL_TELEPATHY, SPELL_REMOVE_FEAR, SPELL_MIND_RESISTANCE, SPELL_MIND_BLAST, SPELL_CURE_PARALYSIS, SPELL_BERSERK, SPELL_MASS_FEAR, SPELL_CURE_INSANITY, SPELL_PSYCHIC_SHOCK, SPELL_ENSLAVE, SPELL_CURE_WEAKNESS, SPELL_HEAL, SPELL_BODY_RESISTANCE, SPELL_HARM, SPELL_REGENERATION, SPELL_CURE_POISON, SPELL_HAMMERHANDS, SPELL_CURE_DISEASE, SPELL_PROTECTION_FROM_MAGIC, SPELL_FLYING_FIST, SPELL_POWER_CURE, SPELL_LIGHT_BOLT, SPELL_DESTROY_UNDEAD, SPELL_DISPEL_MAGIC, SPELL_PARALYZE, SPELL_SUMMON_WISP, SPELL_DAY_OF_THE_GODS, SPELL_PRISMATIC_LIGHT, SPELL_DAY_OF_PROTECTION, SPELL_HOUR_OF_POWER, SPELL_SUNRAY, SPELL_DIVINE_INTERVENTION, SPELL_REANIMATE, SPELL_TOXIC_CLOUD, SPELL_VAMPIRIC_WEAPON, SPELL_SHRINKING_RAY, SPELL_SHRAPMETAL, SPELL_CONTROL_UNDEAD, SPELL_PAIN_REFLECTION, SPELL_DARK_GRASP, SPELL_DRAGON_BREATH, SPELL_ARMAGEDDON, SPELL_SOULDRINKER, SPELL_GLAMOUR, SPELL_TRAVELERS_BOON, SPELL_BLIND, SPELL_DARKFIRE_BOLT, SPELL_LIFEDRAIN, SPELL_LEVITATE, SPELL_CHARM, SPELL_MISTFORM, SPELL_FEAR, SPELL_FLAME_BLAST, SPELL_FLIGHT, SPELL_WING_BUFFET, SPELL_SHOOT, SPELL_SHOOT_FIRE, SPELL_SHOOT_BLASTER, SPELL_SHOOT_CANNON_BALL, SPELL_SHOOT_DRAGON };

		ENUM_TO_STRING_SPELLS = { {SPELL_TORCH_LIGHT, "Torch light"}, {SPELL_FIRE_BOLT, "Fire bolt"}, {SPELL_FIRE_RESISTANCE, "Fire resistance"}, {SPELL_FIRE_AURA, "Fire aura"}, {SPELL_HASTE, "Haste"}, {SPELL_FIREBALL, "Fireball"}, {SPELL_FIRE_SPIKE, "Fire spike"}, {SPELL_IMMOLATION, "Immolation"}, {SPELL_METEOR_SHOWER, "Meteor shower"}, {SPELL_INFERNO, "Inferno"}, {SPELL_INCINERATE, "Incinerate"}, {SPELL_WIZARD_EYE, "Wizard eye"}, {SPELL_FEATHER_FALL, "Feather fall"}, {SPELL_AIR_RESISTANCE, "Air resistance"}, {SPELL_SPARKS, "Sparks"}, {SPELL_JUMP, "Jump"}, {SPELL_SHIELD, "Shield"}, {SPELL_LIGHTNING_BOLT, "Lightning bolt"}, {SPELL_INVISIBILITY, "Invisibility"}, {SPELL_IMPLOSION, "Implosion"}, {SPELL_FLY, "Fly"}, {SPELL_STARBURST, "Starburst"}, {SPELL_AWAKEN, "Awaken"}, {SPELL_POISON_SPRAY, "Poison spray"}, {SPELL_WATER_RESISTANCE, "Water resistance"}, {SPELL_ICE_BOLT, "Ice bolt"}, {SPELL_WATER_WALK, "Water walk"}, {SPELL_RECHARGE_ITEM, "Recharge item"}, {SPELL_ACID_BURST, "Acid burst"}, {SPELL_ENCHANT_ITEM, "Enchant item"}, {SPELL_TOWN_PORTAL, "Town portal"}, {SPELL_ICE_BLAST, "Ice blast"}, {SPELL_LLOYDS_BEACON, "Lloyds beacon"}, {SPELL_STUN, "Stun"}, {SPELL_SLOW, "Slow"}, {SPELL_EARTH_RESISTANCE, "Earth resistance"}, {SPELL_DEADLY_SWARM, "Deadly swarm"}, {SPELL_STONE_SKIN, "Stone skin"}, {SPELL_BLADES, "Blades"}, {SPELL_STONE_TO_FLESH, "Stone to flesh"}, {SPELL_ROCK_BLAST, "Rock blast"}, {SPELL_TELEKINESIS, "Telekinesis"}, {SPELL_DEATH_BLOSSOM, "Death blossom"}, {SPELL_MASS_DISTORTION, "Mass distortion"}, {SPELL_DETECT_LIFE, "Detect life"}, {SPELL_BLESS, "Bless"}, {SPELL_FATE, "Fate"}, {SPELL_TURN_UNDEAD, "Turn undead"}, {SPELL_REMOVE_CURSE, "Remove curse"}, {SPELL_PRESERVATION, "Preservation"}, {SPELL_HEROISM, "Heroism"}, {SPELL_SPIRIT_LASH, "Spirit lash"}, {SPELL_RAISE_DEAD, "Raise dead"}, {SPELL_SHARED_LIFE, "Shared life"}, {SPELL_RESURRECTION, "Resurrection"}, {SPELL_TELEPATHY, "Telepathy"}, {SPELL_REMOVE_FEAR, "Remove fear"}, {SPELL_MIND_RESISTANCE, "Mind resistance"}, {SPELL_MIND_BLAST, "Mind blast"}, {SPELL_CURE_PARALYSIS, "Cure paralysis"}, {SPELL_BERSERK, "Berserk"}, {SPELL_MASS_FEAR, "Mass fear"}, {SPELL_CURE_INSANITY, "Cure insanity"}, {SPELL_PSYCHIC_SHOCK, "Psychic shock"}, {SPELL_ENSLAVE, "Enslave"}, {SPELL_CURE_WEAKNESS, "Cure weakness"}, {SPELL_HEAL, "Heal"}, {SPELL_BODY_RESISTANCE, "Body resistance"}, {SPELL_HARM, "Harm"}, {SPELL_REGENERATION, "Regeneration"}, {SPELL_CURE_POISON, "Cure poison"}, {SPELL_HAMMERHANDS, "Hammerhands"}, {SPELL_CURE_DISEASE, "Cure disease"}, {SPELL_PROTECTION_FROM_MAGIC, "Protection from magic"}, {SPELL_FLYING_FIST, "Flying fist"}, {SPELL_POWER_CURE, "Power cure"}, {SPELL_LIGHT_BOLT, "Light bolt"}, {SPELL_DESTROY_UNDEAD, "Destroy undead"}, {SPELL_DISPEL_MAGIC, "Dispel magic"}, {SPELL_PARALYZE, "Paralyze"}, {SPELL_SUMMON_WISP, "Summon wisp"}, {SPELL_DAY_OF_THE_GODS, "Day of the gods"}, {SPELL_PRISMATIC_LIGHT, "Prismatic light"}, {SPELL_DAY_OF_PROTECTION, "Day of protection"}, {SPELL_HOUR_OF_POWER, "Hour of power"}, {SPELL_SUNRAY, "Sunray"}, {SPELL_DIVINE_INTERVENTION, "Divine intervention"}, {SPELL_REANIMATE, "Reanimate"}, {SPELL_TOXIC_CLOUD, "Toxic cloud"}, {SPELL_VAMPIRIC_WEAPON, "Vampiric weapon"}, {SPELL_SHRINKING_RAY, "Shrinking ray"}, {SPELL_SHRAPMETAL, "Shrapmetal"}, {SPELL_CONTROL_UNDEAD, "Control undead"}, {SPELL_PAIN_REFLECTION, "Pain reflection"}, {SPELL_DARK_GRASP, "Dark grasp"}, {SPELL_DRAGON_BREATH, "Dragon breath"}, {SPELL_ARMAGEDDON, "Armageddon"}, {SPELL_SOULDRINKER, "Souldrinker"}, {SPELL_GLAMOUR, "Glamour"}, {SPELL_TRAVELERS_BOON, "Travelers boon"}, {SPELL_BLIND, "Blind"}, {SPELL_DARKFIRE_BOLT, "Darkfire bolt"}, {SPELL_LIFEDRAIN, "Lifedrain"}, {SPELL_LEVITATE, "Levitate"}, {SPELL_CHARM, "Charm"}, {SPELL_MISTFORM, "Mistform"}, {SPELL_FEAR, "Fear"}, {SPELL_FLAME_BLAST, "Flame blast"}, {SPELL_FLIGHT, "Flight"}, {SPELL_WING_BUFFET, "Wing buffet"}, {SPELL_SHOOT, "Shoot"}, {SPELL_SHOOT_FIRE, "Shoot fire"}, {SPELL_SHOOT_BLASTER, "Shoot blaster"}, {SPELL_SHOOT_CANNON_BALL, "Shoot cannon ball"}, {SPELL_SHOOT_DRAGON, "Shoot dragon"} };

		STRING_TO_ENUM_SPELLS = invertMap(ENUM_TO_STRING_SPELLS);

		detail::callbackSpellsInitialize();

	}

bool checkSpellsValidity(int64_t value)
{
	return detail::checkValidValue(SPELLS_ALL, value, detail::callbackCheckSpellsValidity);
}

}