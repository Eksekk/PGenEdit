#pragma once
#include "pch.h"
#include "main.h"

namespace consts
{

	// Stats //

	extern int64_t
		STAT_MIGHT,
		STAT_INTELLECT,
		STAT_PERSONALITY,
		STAT_ENDURANCE,
		STAT_ACCURACY,
		STAT_SPEED,
		STAT_LUCK,
		STAT_HP,
		STAT_SPELL_POINTS,
		STAT_ARMOR_CLASS,
		STAT_FIRE_RESISTANCE,
		STAT_ELEC_RESISTANCE,
		STAT_COLD_RESISTANCE,
		STAT_POISON_RESISTANCE,
		STAT_LEVEL,
		STAT_MELEE_ATTACK,
		STAT_MELEE_DAMAGE_BASE,
		STAT_MELEE_DAMAGE_MIN,
		STAT_MELEE_DAMAGE_MAX,
		STAT_RANGED_ATTACK,
		STAT_RANGED_DAMAGE_BASE,
		STAT_RANGED_DAMAGE_MIN,
		STAT_RANGED_DAMAGE_MAX,
		STAT_MAGIC_RESISTANCE,
		STAT_HIT_POINTS,
		STAT_AIR_RESISTANCE,
		STAT_WATER_RESISTANCE,
		STAT_EARTH_RESISTANCE,
		STAT_MIND_RESISTANCE,
		STAT_BODY_RESISTANCE,
		STAT_ALCHEMY,
		STAT_STEALING,
		STAT_DISARM_TRAPS,
		STAT_IDENTIFY_ITEM,
		STAT_IDENTIFY_MONSTER,
		STAT_ARMSMASTER,
		STAT_DODGING,
		STAT_UNARMED,
		STAT_SPIRIT_RESISTANCE,
		STAT_FIRE_MAGIC,
		STAT_AIR_MAGIC,
		STAT_WATER_MAGIC,
		STAT_EARTH_MAGIC,
		STAT_SPIRIT_MAGIC,
		STAT_MIND_MAGIC,
		STAT_BODY_MAGIC,
		STAT_LIGHT_MAGIC,
		STAT_DARK_MAGIC,
		STAT_MEDITATION,
		STAT_BOW,
		STAT_SHIELD,
		STAT_LEARNING,
		STAT_DARK_ELF,
		STAT_VAMPIRE,
		STAT_DRAGON;

	extern std::vector<int64_t> STATS_ALL;
	extern std::map<int64_t, std::string> ENUM_TO_STRING_STATS;
	extern std::map<std::string, int64_t> STRING_TO_ENUM_STATS;

	bool checkStatsValidity(int64_t value);

	extern void makeEnumStats_6();
	extern void makeEnumStats_7();
	extern void makeEnumStats_8();


	// Skills //

	extern int64_t
		SKILL_STAFF,
		SKILL_SWORD,
		SKILL_DAGGER,
		SKILL_AXE,
		SKILL_SPEAR,
		SKILL_BOW,
		SKILL_MACE,
		SKILL_BLASTER,
		SKILL_SHIELD,
		SKILL_LEATHER,
		SKILL_CHAIN,
		SKILL_PLATE,
		SKILL_FIRE,
		SKILL_AIR,
		SKILL_WATER,
		SKILL_EARTH,
		SKILL_SPIRIT,
		SKILL_MIND,
		SKILL_BODY,
		SKILL_LIGHT,
		SKILL_DARK,
		SKILL_IDENTIFY_ITEM,
		SKILL_MERCHANT,
		SKILL_REPAIR,
		SKILL_BODYBUILDING,
		SKILL_MEDITATION,
		SKILL_PERCEPTION,
		SKILL_DIPLOMACY,
		SKILL_THIEVERY,
		SKILL_DISARM_TRAPS,
		SKILL_LEARNING,
		SKILL_DODGING,
		SKILL_UNARMED,
		SKILL_IDENTIFY_MONSTER,
		SKILL_ARMSMASTER,
		SKILL_STEALING,
		SKILL_ALCHEMY,
		SKILL_DARK_ELF_ABILITY,
		SKILL_VAMPIRE_ABILITY,
		SKILL_DRAGON_ABILITY,
		SKILL_REGENERATION;

	extern std::vector<int64_t> SKILLS_ALL;
	extern std::map<int64_t, std::string> ENUM_TO_STRING_SKILLS;
	extern std::map<std::string, int64_t> STRING_TO_ENUM_SKILLS;

	bool checkSkillsValidity(int64_t value);

	extern void makeEnumSkills_6();
	extern void makeEnumSkills_7();
	extern void makeEnumSkills_8();


	// Damage //

	extern int64_t
		DMG_PHYS,
		DMG_MAGIC,
		DMG_FIRE,
		DMG_ELEC,
		DMG_COLD,
		DMG_POISON,
		DMG_ENERGY,
		DMG_AIR,
		DMG_WATER,
		DMG_EARTH,
		DMG_SPIRIT,
		DMG_MIND,
		DMG_BODY,
		DMG_LIGHT,
		DMG_DARK,
		DMG_DRAGON;

	extern std::vector<int64_t> DAMAGE_ALL;
	extern std::map<int64_t, std::string> ENUM_TO_STRING_DAMAGE;
	extern std::map<std::string, int64_t> STRING_TO_ENUM_DAMAGE;

	bool checkDamageValidity(int64_t value);

	extern void makeEnumDamage_6();
	extern void makeEnumDamage_7();
	extern void makeEnumDamage_8();


	// ItemType //

	extern int64_t
		ITEM_TYPE_ANY,
		ITEM_TYPE_WEAPON,
		ITEM_TYPE_WEAPON_2H,
		ITEM_TYPE_MISSILE,
		ITEM_TYPE_ARMOR,
		ITEM_TYPE_SHIELD,
		ITEM_TYPE_HELM,
		ITEM_TYPE_BELT,
		ITEM_TYPE_CLOAK,
		ITEM_TYPE_GAUNTLETS,
		ITEM_TYPE_BOOTS,
		ITEM_TYPE_RING,
		ITEM_TYPE_AMULET,
		ITEM_TYPE_WAND,
		ITEM_TYPE_REAGENT,
		ITEM_TYPE_POTION,
		ITEM_TYPE_SCROLL,
		ITEM_TYPE_BOOK,
		ITEM_TYPE_MSCROLL,
		ITEM_TYPE_GOLD,
		ITEM_TYPE_WEAPON_,
		ITEM_TYPE_ARMOR_,
		ITEM_TYPE_MISC,
		ITEM_TYPE_SWORD,
		ITEM_TYPE_DAGGER,
		ITEM_TYPE_AXE,
		ITEM_TYPE_SPEAR,
		ITEM_TYPE_BOW,
		ITEM_TYPE_MACE,
		ITEM_TYPE_CLUB,
		ITEM_TYPE_STAFF,
		ITEM_TYPE_LEATHER,
		ITEM_TYPE_CHAIN,
		ITEM_TYPE_PLATE,
		ITEM_TYPE_SHIELD_,
		ITEM_TYPE_HELM_,
		ITEM_TYPE_BELT_,
		ITEM_TYPE_CLOAK_,
		ITEM_TYPE_GAUNTLETS_,
		ITEM_TYPE_BOOTS_,
		ITEM_TYPE_RING_,
		ITEM_TYPE_AMULET_,
		ITEM_TYPE_WAND_,
		ITEM_TYPE_SCROLL_,
		ITEM_TYPE_POTION_,
		ITEM_TYPE_REAGENT_,
		ITEM_TYPE_GEMS,
		ITEM_TYPE_GEMS_2,
		ITEM_TYPE_GOLD_;

	extern std::vector<int64_t> ITEM_TYPE_ALL;
	extern std::map<int64_t, std::string> ENUM_TO_STRING_ITEM_TYPE;
	extern std::map<std::string, int64_t> STRING_TO_ENUM_ITEM_TYPE;

	bool checkItemTypeValidity(int64_t value);

	extern void makeEnumItemType_6();
	extern void makeEnumItemType_7();
	extern void makeEnumItemType_8();


	// ItemSlot //

	extern int64_t
		ITEM_SLOT_EXTRA_HAND,
		ITEM_SLOT_MAIN_HAND,
		ITEM_SLOT_BOW,
		ITEM_SLOT_ARMOR,
		ITEM_SLOT_HELM,
		ITEM_SLOT_BELT,
		ITEM_SLOT_CLOAK,
		ITEM_SLOT_GAUNTLETS,
		ITEM_SLOT_BOOTS,
		ITEM_SLOT_AMULET,
		ITEM_SLOT_RING_1,
		ITEM_SLOT_RING_2,
		ITEM_SLOT_RING_3,
		ITEM_SLOT_RING_4,
		ITEM_SLOT_RING_5,
		ITEM_SLOT_RING_6;

	extern std::vector<int64_t> ITEM_SLOT_ALL;
	extern std::map<int64_t, std::string> ENUM_TO_STRING_ITEM_SLOT;
	extern std::map<std::string, int64_t> STRING_TO_ENUM_ITEM_SLOT;

	bool checkItemSlotValidity(int64_t value);

	extern void makeEnumItemSlot_6();
	extern void makeEnumItemSlot_7();
	extern void makeEnumItemSlot_8();


	// PlayerBuff //

	extern int64_t
		PLAYER_BUFF_BLESS,
		PLAYER_BUFF_HEROISM,
		PLAYER_BUFF_HASTE,
		PLAYER_BUFF_SHIELD,
		PLAYER_BUFF_STONESKIN,
		PLAYER_BUFF_TEMP_LUCK,
		PLAYER_BUFF_TEMP_INTELLECT,
		PLAYER_BUFF_TEMP_PERSONALITY,
		PLAYER_BUFF_TEMP_ACCURACY,
		PLAYER_BUFF_TEMP_SPEED,
		PLAYER_BUFF_TEMP_MIGHT,
		PLAYER_BUFF_TEMP_ENDURANCY,
		PLAYER_BUFF_AIR_RESISTANCE,
		PLAYER_BUFF_BODY_RESISTANCE,
		PLAYER_BUFF_EARTH_RESISTANCE,
		PLAYER_BUFF_FATE,
		PLAYER_BUFF_FIRE_RESISTANCE,
		PLAYER_BUFF_HAMMERHANDS,
		PLAYER_BUFF_MIND_RESISTANCE,
		PLAYER_BUFF_PAIN_REFLECTION,
		PLAYER_BUFF_PRESERVATION,
		PLAYER_BUFF_REGENERATION,
		PLAYER_BUFF_TEMP_ENDURANCE,
		PLAYER_BUFF_WATER_RESISTANCE,
		PLAYER_BUFF_WATER_BREATHING,
		PLAYER_BUFF_GLAMOUR,
		PLAYER_BUFF_LEVITATE,
		PLAYER_BUFF_MISFORM;

	extern std::vector<int64_t> PLAYER_BUFF_ALL;
	extern std::map<int64_t, std::string> ENUM_TO_STRING_PLAYER_BUFF;
	extern std::map<std::string, int64_t> STRING_TO_ENUM_PLAYER_BUFF;

	bool checkPlayerBuffValidity(int64_t value);

	extern void makeEnumPlayerBuff_6();
	extern void makeEnumPlayerBuff_7();
	extern void makeEnumPlayerBuff_8();


	// PartyBuff //

	extern int64_t
		PARTY_BUFF_FIRE_RESISTANCE,
		PARTY_BUFF_COLD_RESISTANCE,
		PARTY_BUFF_ELEC_RESISTANCE,
		PARTY_BUFF_MAGIC_RESISTANCE,
		PARTY_BUFF_POISON_RESISTANCE,
		PARTY_BUFF_FEATHER_FALL,
		PARTY_BUFF_WATER_WALK,
		PARTY_BUFF_FLY,
		PARTY_BUFF_GUARDIAN_ANGEL,
		PARTY_BUFF_WIZARD_EYE,
		PARTY_BUFF_TORCH_LIGHT,
		PARTY_BUFF_AIR_RESISTANCE,
		PARTY_BUFF_BODY_RESISTANCE,
		PARTY_BUFF_DAY_OF_GODS,
		PARTY_BUFF_DETECT_LIFE,
		PARTY_BUFF_EARTH_RESISTANCE,
		PARTY_BUFF_HASTE,
		PARTY_BUFF_HEROISM,
		PARTY_BUFF_IMMOLATION,
		PARTY_BUFF_INVISIBILITY,
		PARTY_BUFF_MIND_RESISTANCE,
		PARTY_BUFF_PROTECTION_FROM_MAGIC,
		PARTY_BUFF_SHIELD,
		PARTY_BUFF_STONESKIN,
		PARTY_BUFF_WATER_RESISTANCE;

	extern std::vector<int64_t> PARTY_BUFF_ALL;
	extern std::map<int64_t, std::string> ENUM_TO_STRING_PARTY_BUFF;
	extern std::map<std::string, int64_t> STRING_TO_ENUM_PARTY_BUFF;

	bool checkPartyBuffValidity(int64_t value);

	extern void makeEnumPartyBuff_6();
	extern void makeEnumPartyBuff_7();
	extern void makeEnumPartyBuff_8();


	// MonsterBits //

	extern int64_t
		MON_BIT_ACTIVE,
		MON_BIT_SHOW_ON_MAP,
		MON_BIT_INVISIBLE,
		MON_BIT_NO_FLEE,
		MON_BIT_HOSTILE,
		MON_BIT_ON_ALERT_MAP,
		MON_BIT_TREASURE_GENERATED,
		MON_BIT_SHOW_AS_HOSTILE,
		MON_BIT_IS_OBELISK_CHEST;

	extern std::vector<int64_t> MONSTER_BITS_ALL;
	extern std::map<int64_t, std::string> ENUM_TO_STRING_MONSTER_BITS;
	extern std::map<std::string, int64_t> STRING_TO_ENUM_MONSTER_BITS;

	bool checkMonsterBitsValidity(int64_t value);

	extern void makeEnumMonsterBits_6();
	extern void makeEnumMonsterBits_7();
	extern void makeEnumMonsterBits_8();


	// MonsterBuff //

	extern int64_t
		MON_BUFF_NULL,
		MON_BUFF_CHARM,
		MON_BUFF_CURSE,
		MON_BUFF_SHRINKING_RAY,
		MON_BUFF_FEAR,
		MON_BUFF_STONED,
		MON_BUFF_PARALYZE,
		MON_BUFF_SLOW,
		MON_BUFF_FEEBLEMIND,
		MON_BUFF_SUMMONED,
		MON_BUFF_ARMOR_HALVED,
		MON_BUFF_BERSERK,
		MON_BUFF_MASS_DISTORTION,
		MON_BUFF_FATE,
		MON_BUFF_ENSLAVE,
		MON_BUFF_DAY_OF_PROTECTION,
		MON_BUFF_HOUR_OF_POWER,
		MON_BUFF_SHIELD,
		MON_BUFF_STONE_SKIN,
		MON_BUFF_BLESS,
		MON_BUFF_HEROISM,
		MON_BUFF_HASTE,
		MON_BUFF_PAIN_REFLECTION,
		MON_BUFF_HAMMERHANDS,
		MON_BUFF_MELEE_ONLY,
		MON_BUFF_DAMAGE_HALVED,
		MON_BUFF_WANDER,
		MON_BUFF_MISTFORM;

	extern std::vector<int64_t> MONSTER_BUFF_ALL;
	extern std::map<int64_t, std::string> ENUM_TO_STRING_MONSTER_BUFF;
	extern std::map<std::string, int64_t> STRING_TO_ENUM_MONSTER_BUFF;

	bool checkMonsterBuffValidity(int64_t value);

	extern void makeEnumMonsterBuff_6();
	extern void makeEnumMonsterBuff_7();
	extern void makeEnumMonsterBuff_8();


	// MonsterBonus //

	extern int64_t
		MON_BONUS_CURSE,
		MON_BONUS_WEAK,
		MON_BONUS_ASLEEP,
		MON_BONUS_DRUNK,
		MON_BONUS_INSANE,
		MON_BONUS_POISON_1,
		MON_BONUS_POISON_2,
		MON_BONUS_POISON_3,
		MON_BONUS_DISEASE_1,
		MON_BONUS_DISEASE_2,
		MON_BONUS_DISEASE_3,
		MON_BONUS_PARALYZE,
		MON_BONUS_UNCON,
		MON_BONUS_DEAD,
		MON_BONUS_STONE,
		MON_BONUS_ERRAD,
		MON_BONUS_BRKITEM,
		MON_BONUS_BRKARMOR,
		MON_BONUS_BRKWEAPON,
		MON_BONUS_STEAL,
		MON_BONUS_AGE,
		MON_BONUS_DRAINSP,
		MON_BONUS_AFRAID;

	extern std::vector<int64_t> MONSTER_BONUS_ALL;
	extern std::map<int64_t, std::string> ENUM_TO_STRING_MONSTER_BONUS;
	extern std::map<std::string, int64_t> STRING_TO_ENUM_MONSTER_BONUS;

	bool checkMonsterBonusValidity(int64_t value);

	extern void makeEnumMonsterBonus_6();
	extern void makeEnumMonsterBonus_7();
	extern void makeEnumMonsterBonus_8();


	// MonsterKind //

	extern int64_t
		MON_KIND_UNDEAD,
		MON_KIND_DEMON,
		MON_KIND_DRAGON,
		MON_KIND_ELF,
		MON_KIND_SWIMMER,
		MON_KIND_IMMOBILE,
		MON_KIND_TITAN,
		MON_KIND_NO_ARENA,
		MON_KIND_PEASANT,
		MON_KIND_OGRE,
		MON_KIND_ELEMENTAL;

	extern std::vector<int64_t> MONSTER_KIND_ALL;
	extern std::map<int64_t, std::string> ENUM_TO_STRING_MONSTER_KIND;
	extern std::map<std::string, int64_t> STRING_TO_ENUM_MONSTER_KIND;

	bool checkMonsterKindValidity(int64_t value);

	extern void makeEnumMonsterKind_6();
	extern void makeEnumMonsterKind_7();
	extern void makeEnumMonsterKind_8();


	// HouseType //

	extern int64_t
		HOUSE_TYPE_WEAPON_SHOP,
		HOUSE_TYPE_ARMOR_SHOP,
		HOUSE_TYPE_MAGIC_SHOP,
		HOUSE_TYPE_ALCHEMIST,
		HOUSE_TYPE_FIRE_GUILD,
		HOUSE_TYPE_AIR_GUILD,
		HOUSE_TYPE_WATER_GUILD,
		HOUSE_TYPE_EARTH_GUILD,
		HOUSE_TYPE_SPIRIT_GUILD,
		HOUSE_TYPE_MIND_GUILD,
		HOUSE_TYPE_BODY_GUILD,
		HOUSE_TYPE_LIGHT_GUILD,
		HOUSE_TYPE_DARK_GUILD,
		HOUSE_TYPE_SPELL_SHOP,
		HOUSE_TYPE_SELF_GUILD,
		HOUSE_TYPE_THIEVES_GUILD,
		HOUSE_TYPE_MERC_GUILD,
		HOUSE_TYPE_TOWN_HALL,
		HOUSE_TYPE_THRONE,
		HOUSE_TYPE_TAVERN,
		HOUSE_TYPE_BANK,
		HOUSE_TYPE_TEMPLE,
		HOUSE_TYPE_CASTLE_ENT,
		HOUSE_TYPE_DUNGEON_ENTRANCE,
		HOUSE_TYPE_SEER_EVIL,
		HOUSE_TYPE_STABLES,
		HOUSE_TYPE_BOATS,
		HOUSE_TYPE_HOUSE,
		HOUSE_TYPE_TRAINING,
		HOUSE_TYPE_JAIL,
		HOUSE_TYPE_CIRCUS,
		HOUSE_TYPE_THE_ADVENTURERS_INN;

	extern std::vector<int64_t> HOUSE_TYPE_ALL;
	extern std::map<int64_t, std::string> ENUM_TO_STRING_HOUSE_TYPE;
	extern std::map<std::string, int64_t> STRING_TO_ENUM_HOUSE_TYPE;

	bool checkHouseTypeValidity(int64_t value);

	extern void makeEnumHouseType_6();
	extern void makeEnumHouseType_7();
	extern void makeEnumHouseType_8();


	// HouseScreens //

	extern int64_t
		HOUSE_SCREENS_TEACHER,
		HOUSE_SCREENS_CHOOSE_PERSON,
		HOUSE_SCREENS_MAIN,
		HOUSE_SCREENS_BUY_STANDARD,
		HOUSE_SCREENS_SELL,
		HOUSE_SCREENS_IDENTIFY,
		HOUSE_SCREENS_BUY_SPECIAL_MM6,
		HOUSE_SCREENS_BANK_DEPOSIT,
		HOUSE_SCREENS_BANK_WITHDRAW,
		HOUSE_SCREENS_HEAL,
		HOUSE_SCREENS_DONATE,
		HOUSE_SCREENS_PROF_NEWS,
		HOUSE_SCREENS_JOIN_MENU,
		HOUSE_SCREENS_NEWS,
		HOUSE_SCREENS_TAVERN_SLEEP,
		HOUSE_SCREENS_TAVERN_FOOD,
		HOUSE_SCREENS_TRAIN,
		HOUSE_SCREENS_BUY_SPELLS,
		HOUSE_SCREENS_A,
		HOUSE_SCREENS_B,
		HOUSE_SCREENS_C,
		HOUSE_SCREENS_SEER_HINT,
		HOUSE_SCREENS_THREAT,
		HOUSE_SCREENS_BRIBE,
		HOUSE_SCREENS_TAVERN_DRINK,
		HOUSE_SCREENS_TAVERN_TIP,
		HOUSE_SCREENS_STAFF,
		HOUSE_SCREENS_SWORD,
		HOUSE_SCREENS_DAGGER,
		HOUSE_SCREENS_AXE,
		HOUSE_SCREENS_SPEAR,
		HOUSE_SCREENS_BOW,
		HOUSE_SCREENS_MACE,
		HOUSE_SCREENS_BLASTER,
		HOUSE_SCREENS_SHIELD,
		HOUSE_SCREENS_LEATHER,
		HOUSE_SCREENS_CHAIN,
		HOUSE_SCREENS_PLATE,
		HOUSE_SCREENS_FIRE,
		HOUSE_SCREENS_AIR,
		HOUSE_SCREENS_WATER,
		HOUSE_SCREENS_EARTH,
		HOUSE_SCREENS_SPIRIT,
		HOUSE_SCREENS_MIND,
		HOUSE_SCREENS_BODY,
		HOUSE_SCREENS_LIGHT,
		HOUSE_SCREENS_DARK,
		HOUSE_SCREENS_IDENTIFY_ITEM,
		HOUSE_SCREENS_MERCHANT,
		HOUSE_SCREENS_REPAIR,
		HOUSE_SCREENS_BODYBUILDING,
		HOUSE_SCREENS_MEDITATION,
		HOUSE_SCREENS_PERCEPTION,
		HOUSE_SCREENS_DIPLOMACY,
		HOUSE_SCREENS_THIEVERY,
		HOUSE_SCREENS_DISARM_TRAPS,
		HOUSE_SCREENS_LEARNING,
		HOUSE_SCREENS_TRAVEL_1,
		HOUSE_SCREENS_TRAVEL_2,
		HOUSE_SCREENS_TRAVEL_3,
		HOUSE_SCREENS_HIRE_OR_DISMISS,
		HOUSE_SCREENS_MORE_INFORMATION,
		HOUSE_SCREENS_TEACH_SKILL,
		HOUSE_SCREENS_DO_TEACH_SKILL,
		HOUSE_SCREENS_JOIN_GUILD,
		HOUSE_SCREENS_DO_JOIN_GUILD,
		HOUSE_SCREENS_BOUNTY_HUNT_NPC,
		HOUSE_SCREENS_SEER_ILOST_IT,
		HOUSE_SCREENS_ARENA_PAGE,
		HOUSE_SCREENS_ARENA_SQUIRE,
		HOUSE_SCREENS_ARENA_KIGHT,
		HOUSE_SCREENS_ARENA_LORD,
		HOUSE_SCREENS_ARENA_MENU,
		HOUSE_SCREENS_ARENA_GO_BACK,
		HOUSE_SCREENS_ARENA_WIN,
		HOUSE_SCREENS_ARENA_ALREADY_WON,
		HOUSE_SCREENS_SEER_PILGRIMAGE,
		HOUSE_SCREENS_STREET_NPC,
		HOUSE_SCREENS_LACK_FAME,
		HOUSE_SCREENS_BEG_THREAT_BRIBE,
		HOUSE_SCREENS_THREAT_BRIBE,
		HOUSE_SCREENS_D,
		HOUSE_SCREENS_E,
		HOUSE_SCREENS_F,
		HOUSE_SCREENS_DODGING,
		HOUSE_SCREENS_UNARMED,
		HOUSE_SCREENS_IDENTIFY_MONSTER,
		HOUSE_SCREENS_ARMSMASTER,
		HOUSE_SCREENS_STEALING,
		HOUSE_SCREENS_ALCHEMY,
		HOUSE_SCREENS_DISPLAY_INVENTORY,
		HOUSE_SCREENS_BUY_SPECIAL,
		HOUSE_SCREENS_LEARN_SKILLS,
		HOUSE_SCREENS_BOUNTY_HUNT,
		HOUSE_SCREENS_PAY_FINE,
		HOUSE_SCREENS_ARCOMAGE_MENU,
		HOUSE_SCREENS_ARCOMAGE_RULES,
		HOUSE_SCREENS_ARCOMAGE_CONDITIONS,
		HOUSE_SCREENS_ARCOMAGE_PLAY,
		HOUSE_SCREENS_TRAVEL_4,
		HOUSE_SCREENS_DARK_ELF_ABILITY,
		HOUSE_SCREENS_VAMPIRE_ABILITY,
		HOUSE_SCREENS_DRAGON_ABILITY,
		HOUSE_SCREENS_REGENERATION,
		HOUSE_SCREENS_BUY_SPELLS_FIRE,
		HOUSE_SCREENS_BUY_SPELLS_AIR,
		HOUSE_SCREENS_BUY_SPELLS_WATER,
		HOUSE_SCREENS_BUY_SPELLS_EARTH,
		HOUSE_SCREENS_BUY_SPELLS_SPIRIT,
		HOUSE_SCREENS_BUY_SPELLS_MIND,
		HOUSE_SCREENS_BUY_SPELLS_BODY,
		HOUSE_SCREENS_BUY_SPELLS_LIGHT,
		HOUSE_SCREENS_BUY_SPELLS_DARK,
		HOUSE_SCREENS_JOIN_ROSTER,
		HOUSE_SCREENS_JOIN_ROSTER_NO;

	extern std::vector<int64_t> HOUSE_SCREENS_ALL;
	extern std::map<int64_t, std::string> ENUM_TO_STRING_HOUSE_SCREENS;
	extern std::map<std::string, int64_t> STRING_TO_ENUM_HOUSE_SCREENS;

	bool checkHouseScreensValidity(int64_t value);

	extern void makeEnumHouseScreens_6();
	extern void makeEnumHouseScreens_7();
	extern void makeEnumHouseScreens_8();


	// FacetBits //

	extern int64_t
		FACET_BIT_IS_PORTAL,
		FACET_BIT_IS_WATER,
		FACET_BIT_PROJECT_TO_XY,
		FACET_BIT_PROJECT_TO_XZ,
		FACET_BIT_PROJECT_TO_YZ,
		FACET_BIT_INVISIBLE,
		FACET_BIT_ANIMATED_TFT,
		FACET_BIT_MOVE_BY_DOOR,
		FACET_BIT_IS_EVENT_JUST_HINT,
		FACET_BIT_ALTERNATIVE_SOUND,
		FACET_BIT_IS_SKY,
		FACET_BIT_FLIP_U,
		FACET_BIT_FLIP_V,
		FACET_BIT_TRIGGER_BY_CLICK,
		FACET_BIT_TRIGGER_BY_STEP,
		FACET_BIT_TRIGGER_BY_MONSTER,
		FACET_BIT_TRIGGER_BY_OBJECT,
		FACET_BIT_UNTOUCHABLE,
		FACET_BIT_IS_LAVA,
		FACET_BIT_HAS_DATA,
		FACET_BIT_IS_SECRET,
		FACET_BIT_SCROLL_DOWN,
		FACET_BIT_ALIGN_TOP,
		FACET_BIT_SCROLL_UP,
		FACET_BIT_SCROLL_LEFT,
		FACET_BIT_SCROLL_RIGHT,
		FACET_BIT_ALIGN_LEFT,
		FACET_BIT_ALIGN_RIGHT,
		FACET_BIT_ALIGN_BOTTOM,
		FACET_BIT_DISABLE_EVENT_BY_CTRL_CLICK,
		FACET_BIT_EVENT_DISABLED_BY_CTRL_CLICK;

	extern std::vector<int64_t> FACET_BITS_ALL;
	extern std::map<int64_t, std::string> ENUM_TO_STRING_FACET_BITS;
	extern std::map<std::string, int64_t> STRING_TO_ENUM_FACET_BITS;

	bool checkFacetBitsValidity(int64_t value);

	extern void makeEnumFacetBits_6();
	extern void makeEnumFacetBits_7();
	extern void makeEnumFacetBits_8();


	// FaceAnimation //

	extern int64_t
		PLAYER_FACE_ANIMATION_KILL_SMALL_ENEMY,
		PLAYER_FACE_ANIMATION_KILL_BIG_ENEMY,
		PLAYER_FACE_ANIMATION_STORE_CLOSED,
		PLAYER_FACE_ANIMATION_DISARM_TRAP,
		PLAYER_FACE_ANIMATION_TRAP_EXPLOADED,
		PLAYER_FACE_ANIMATION_AVOID_DAMAGE,
		PLAYER_FACE_ANIMATION_IDENTIFY_USELESS,
		PLAYER_FACE_ANIMATION_IDENTIFY_GREAT,
		PLAYER_FACE_ANIMATION_IDENTIFY_FAIL,
		PLAYER_FACE_ANIMATION_REPAIR_ITEM,
		PLAYER_FACE_ANIMATION_REPAIR_FAIL,
		PLAYER_FACE_ANIMATION_SET_QUICK_SPELL,
		PLAYER_FACE_ANIMATION_CANT_REST_HERE,
		PLAYER_FACE_ANIMATION_SKILL_INCREASED,
		PLAYER_FACE_ANIMATION_CANT_CARRY,
		PLAYER_FACE_ANIMATION_MIX_POTION,
		PLAYER_FACE_ANIMATION_POTION_EXPLODE,
		PLAYER_FACE_ANIMATION_DOOR_LOCKED,
		PLAYER_FACE_ANIMATION_WONT_BUDGE,
		PLAYER_FACE_ANIMATION_CANT_LEARN_SPELL,
		PLAYER_FACE_ANIMATION_LEARN_SPELL,
		PLAYER_FACE_ANIMATION_HELLO,
		PLAYER_FACE_ANIMATION_HELLO_NIGHT,
		PLAYER_FACE_ANIMATION_DAMAGED,
		PLAYER_FACE_ANIMATION_WEAK,
		PLAYER_FACE_ANIMATION_AFRAID,
		PLAYER_FACE_ANIMATION_POISONED,
		PLAYER_FACE_ANIMATION_DESEASED,
		PLAYER_FACE_ANIMATION_INSANE,
		PLAYER_FACE_ANIMATION_CURSED,
		PLAYER_FACE_ANIMATION_DRUNK,
		PLAYER_FACE_ANIMATION_UNCONSIOUS,
		PLAYER_FACE_ANIMATION_DEATH,
		PLAYER_FACE_ANIMATION_STONED,
		PLAYER_FACE_ANIMATION_ERADICATED,
		PLAYER_FACE_ANIMATION_DINK_POTION,
		PLAYER_FACE_ANIMATION_READ_SCOLL,
		PLAYER_FACE_ANIMATION_NOT_ENOUGH_GOLD,
		PLAYER_FACE_ANIMATION_CANT_EQUIP,
		PLAYER_FACE_ANIMATION_ITEM_BROKEN_STOLEN,
		PLAYER_FACE_ANIMATION_SPDRAINED,
		PLAYER_FACE_ANIMATION_AGED,
		PLAYER_FACE_ANIMATION_SPELL_FAILED,
		PLAYER_FACE_ANIMATION_DAMAGED_PARTY,
		PLAYER_FACE_ANIMATION_TIRED,
		PLAYER_FACE_ANIMATION_ENTER_DUNGEON,
		PLAYER_FACE_ANIMATION_LEAVE_DUNGEON,
		PLAYER_FACE_ANIMATION_ALMOST_DEAD,
		PLAYER_FACE_ANIMATION_CAST_SPELL,
		PLAYER_FACE_ANIMATION_SHOOT,
		PLAYER_FACE_ANIMATION_ATTACK_HIT,
		PLAYER_FACE_ANIMATION_ATTACK_MISS,
		PLAYER_FACE_ANIMATION_BEG,
		PLAYER_FACE_ANIMATION_BEG_FAIL,
		PLAYER_FACE_ANIMATION_THREAT,
		PLAYER_FACE_ANIMATION_THREAT_FAIL,
		PLAYER_FACE_ANIMATION_BRIBE,
		PLAYER_FACE_ANIMATION_BRIBE_FAIL,
		PLAYER_FACE_ANIMATION_NPCDONT_TALK,
		PLAYER_FACE_ANIMATION_FOUND_ITEM,
		PLAYER_FACE_ANIMATION_HIRE_NPC,
		PLAYER_FACE_ANIMATION_LOOK_UP,
		PLAYER_FACE_ANIMATION_LOOK_DOWN,
		PLAYER_FACE_ANIMATION_YELL,
		PLAYER_FACE_ANIMATION_FALLING,
		PLAYER_FACE_ANIMATION_TAVERN_PACKS_FULL,
		PLAYER_FACE_ANIMATION_TAVERN_DRINK,
		PLAYER_FACE_ANIMATION_TAVERN_GOT_DRUNK,
		PLAYER_FACE_ANIMATION_TAVERN_TIP,
		PLAYER_FACE_ANIMATION_TRAVEL_HORSE,
		PLAYER_FACE_ANIMATION_TRAVEL_BOAT,
		PLAYER_FACE_ANIMATION_SHOP_IDENTIFY,
		PLAYER_FACE_ANIMATION_SHOP_REPAIR,
		PLAYER_FACE_ANIMATION_SHOP_ITEM_BOUGHT,
		PLAYER_FACE_ANIMATION_SHOP_ALREADY_IDENTIFIED,
		PLAYER_FACE_ANIMATION_SHOP_ITEM_SOLD,
		PLAYER_FACE_ANIMATION_SKILL_LEARNED,
		PLAYER_FACE_ANIMATION_SHOP_WRONG_SHOP,
		PLAYER_FACE_ANIMATION_SHOP_RUDE,
		PLAYER_FACE_ANIMATION_BANK_DEPOSIT,
		PLAYER_FACE_ANIMATION_TEMPLE_HEAL,
		PLAYER_FACE_ANIMATION_TEMPLE_DONATE,
		PLAYER_FACE_ANIMATION_HELLO_HOUSE,
		PLAYER_FACE_ANIMATION_SKILL_MASTERY_ICREASED,
		PLAYER_FACE_ANIMATION_JOINED_GUILD,
		PLAYER_FACE_ANIMATION_LEVEL_UP,
		PLAYER_FACE_ANIMATION_STAT_BONUS_INCREASED,
		PLAYER_FACE_ANIMATION_STAT_BASE_INCREASED,
		PLAYER_FACE_ANIMATION_QUEST_GOT,
		PLAYER_FACE_ANIMATION_AWARD_GOT,
		PLAYER_FACE_ANIMATION_AFRAID_SILENT,
		PLAYER_FACE_ANIMATION_CHEATED_DEATH,
		PLAYER_FACE_ANIMATION_IN_PRISON,
		PLAYER_FACE_ANIMATION_CHOOSE_ME,
		PLAYER_FACE_ANIMATION_AWAKEN,
		PLAYER_FACE_ANIMATION_ID_MONSTER_WEAK,
		PLAYER_FACE_ANIMATION_ID_MONSTER_BIG,
		PLAYER_FACE_ANIMATION_ID_MONSTER_FAIL,
		PLAYER_FACE_ANIMATION_LAST_MAN_STANDING,
		PLAYER_FACE_ANIMATION_NOT_ENOUGH_FOOD,
		PLAYER_FACE_ANIMATION_DEATH_BLOW;

	extern std::vector<int64_t> FACE_ANIMATION_ALL;
	extern std::map<int64_t, std::string> ENUM_TO_STRING_FACE_ANIMATION;
	extern std::map<std::string, int64_t> STRING_TO_ENUM_FACE_ANIMATION;

	bool checkFaceAnimationValidity(int64_t value);

	extern void makeEnumFaceAnimation_6();
	extern void makeEnumFaceAnimation_7();
	extern void makeEnumFaceAnimation_8();


	// Condition //

	extern int64_t
		PLAYER_CONDITION_CURSED,
		PLAYER_CONDITION_WEAK,
		PLAYER_CONDITION_ASLEEP,
		PLAYER_CONDITION_AFRAID,
		PLAYER_CONDITION_DRUNK,
		PLAYER_CONDITION_INSANE,
		PLAYER_CONDITION_POISON_1,
		PLAYER_CONDITION_DISEASE_1,
		PLAYER_CONDITION_POISON_2,
		PLAYER_CONDITION_DISEASE_2,
		PLAYER_CONDITION_POISON_3,
		PLAYER_CONDITION_DISEASE_3,
		PLAYER_CONDITION_PARALYZED,
		PLAYER_CONDITION_UNCONSCIOUS,
		PLAYER_CONDITION_DEAD,
		PLAYER_CONDITION_STONED,
		PLAYER_CONDITION_ERADICATED,
		PLAYER_CONDITION_GOOD,
		PLAYER_CONDITION_ZOMBIE;

	extern std::vector<int64_t> CONDITION_ALL;
	extern std::map<int64_t, std::string> ENUM_TO_STRING_CONDITION;
	extern std::map<std::string, int64_t> STRING_TO_ENUM_CONDITION;

	bool checkConditionValidity(int64_t value);

	extern void makeEnumCondition_6();
	extern void makeEnumCondition_7();
	extern void makeEnumCondition_8();


	// ChestBits //

	extern int64_t
		CHEST_BIT_TRAPPED,
		CHEST_BIT_ITEMS_PLACED,
		CHEST_BIT_IDENTIFIED;

	extern std::vector<int64_t> CHEST_BITS_ALL;
	extern std::map<int64_t, std::string> ENUM_TO_STRING_CHEST_BITS;
	extern std::map<std::string, int64_t> STRING_TO_ENUM_CHEST_BITS;

	bool checkChestBitsValidity(int64_t value);

	extern void makeEnumChestBits_6();
	extern void makeEnumChestBits_7();
	extern void makeEnumChestBits_8();


	// AIState //

	extern int64_t
		MON_AI_STATE_STAND,
		MON_AI_STATE_ACTIVE,
		MON_AI_STATE_MELEE_ATTACK,
		MON_AI_STATE_RANGED_ATTACK,
		MON_AI_STATE_DYING,
		MON_AI_STATE_DEAD,
		MON_AI_STATE_PURSUE,
		MON_AI_STATE_FLEE,
		MON_AI_STATE_STUNNED,
		MON_AI_STATE_FIDGET,
		MON_AI_STATE_INTERACT,
		MON_AI_STATE_REMOVED,
		MON_AI_STATE_RANGED_ATTACK_2,
		MON_AI_STATE_CAST_SPELL,
		MON_AI_STATE_STONED,
		MON_AI_STATE_PARALYZED,
		MON_AI_STATE_RESURRECT,
		MON_AI_STATE_SUMMONED,
		MON_AI_STATE_RANGED_ATTACK_4,
		MON_AI_STATE_INVISIBLE;

	extern std::vector<int64_t> AISTATE_ALL;
	extern std::map<int64_t, std::string> ENUM_TO_STRING_AISTATE;
	extern std::map<std::string, int64_t> STRING_TO_ENUM_AISTATE;

	bool checkAIStateValidity(int64_t value);

	extern void makeEnumAIState_6();
	extern void makeEnumAIState_7();
	extern void makeEnumAIState_8();


	// Spells //

	extern int64_t
		SPELL_TORCH_LIGHT,
		SPELL_FLAME_ARROW,
		SPELL_PROTECTION_FROM_FIRE,
		SPELL_FIRE_BOLT,
		SPELL_HASTE,
		SPELL_FIREBALL,
		SPELL_RING_OF_FIRE,
		SPELL_FIRE_BLAST,
		SPELL_METEOR_SHOWER,
		SPELL_INFERNO,
		SPELL_INCINERATE,
		SPELL_WIZARD_EYE,
		SPELL_STATIC_CHARGE,
		SPELL_PROTECTION_FROM_ELECTRICITY,
		SPELL_SPARKS,
		SPELL_FEATHER_FALL,
		SPELL_SHIELD,
		SPELL_LIGHTNING_BOLT,
		SPELL_JUMP,
		SPELL_IMPLOSION,
		SPELL_FLY,
		SPELL_STARBURST,
		SPELL_AWAKEN,
		SPELL_COLD_BEAM,
		SPELL_PROTECTION_FROM_COLD,
		SPELL_POISON_SPRAY,
		SPELL_WATER_WALK,
		SPELL_ICE_BOLT,
		SPELL_ENCHANT_ITEM,
		SPELL_ACID_BURST,
		SPELL_TOWN_PORTAL,
		SPELL_ICE_BLAST,
		SPELL_LLOYDS_BEACON,
		SPELL_STUN,
		SPELL_MAGIC_ARROW,
		SPELL_PROTECTION_FROM_MAGIC,
		SPELL_DEADLY_SWARM,
		SPELL_STONE_SKIN,
		SPELL_BLADES,
		SPELL_STONE_TO_FLESH,
		SPELL_ROCK_BLAST,
		SPELL_TURN_TO_STONE,
		SPELL_DEATH_BLOSSOM,
		SPELL_MASS_DISTORTION,
		SPELL_SPIRIT_ARROW,
		SPELL_BLESS,
		SPELL_HEALING_TOUCH,
		SPELL_LUCKY_DAY,
		SPELL_REMOVE_CURSE,
		SPELL_GUARDIAN_ANGEL,
		SPELL_HEROISM,
		SPELL_TURN_UNDEAD,
		SPELL_RAISE_DEAD,
		SPELL_SHARED_LIFE,
		SPELL_RESURRECTION,
		SPELL_MEDITATION,
		SPELL_REMOVE_FEAR,
		SPELL_MIND_BLAST,
		SPELL_PRECISION,
		SPELL_CURE_PARALYSIS,
		SPELL_CHARM,
		SPELL_MASS_FEAR,
		SPELL_FEEBLEMIND,
		SPELL_CURE_INSANITY,
		SPELL_PSYCHIC_SHOCK,
		SPELL_TELEKINESIS,
		SPELL_CURE_WEAKNESS,
		SPELL_FIRST_AID,
		SPELL_PROTECTION_FROM_POISON,
		SPELL_HARM,
		SPELL_CURE_WOUNDS,
		SPELL_CURE_POISON,
		SPELL_SPEED,
		SPELL_CURE_DISEASE,
		SPELL_POWER,
		SPELL_FLYING_FIST,
		SPELL_POWER_CURE,
		SPELL_CREATE_FOOD,
		SPELL_GOLDEN_TOUCH,
		SPELL_DISPEL_MAGIC,
		SPELL_SLOW,
		SPELL_DESTROY_UNDEAD,
		SPELL_DAY_OF_THE_GODS,
		SPELL_PRISMATIC_LIGHT,
		SPELL_HOUR_OF_POWER,
		SPELL_PARALYZE,
		SPELL_SUN_RAY,
		SPELL_DIVINE_INTERVENTION,
		SPELL_REANIMATE,
		SPELL_TOXIC_CLOUD,
		SPELL_MASS_CURSE,
		SPELL_SHRAPMETAL,
		SPELL_SHRINKING_RAY,
		SPELL_DAY_OF_PROTECTION,
		SPELL_FINGER_OF_DEATH,
		SPELL_MOON_RAY,
		SPELL_DRAGON_BREATH,
		SPELL_ARMAGEDDON,
		SPELL_DARK_CONTAINMENT,
		SPELL_SHOOT,
		SPELL_SHOOT_FIRE,
		SPELL_SHOOT_BLASTER,
		SPELL_FIRE_RESISTANCE,
		SPELL_FIRE_AURA,
		SPELL_FIRE_SPIKE,
		SPELL_IMMOLATION,
		SPELL_AIR_RESISTANCE,
		SPELL_INVISIBILITY,
		SPELL_WATER_RESISTANCE,
		SPELL_RECHARGE_ITEM,
		SPELL_EARTH_RESISTANCE,
		SPELL_DETECT_LIFE,
		SPELL_FATE,
		SPELL_PRESERVATION,
		SPELL_SPIRIT_LASH,
		SPELL_MIND_RESISTANCE,
		SPELL_TELEPATHY,
		SPELL_BERSERK,
		SPELL_ENSLAVE,
		SPELL_HEAL,
		SPELL_BODY_RESISTANCE,
		SPELL_REGENERATION,
		SPELL_HAMMERHANDS,
		SPELL_LIGHT_BOLT,
		SPELL_SUMMON_ELEMENTAL,
		SPELL_SUNRAY,
		SPELL_VAMPIRIC_WEAPON,
		SPELL_CONTROL_UNDEAD,
		SPELL_PAIN_REFLECTION,
		SPELL_SACRIFICE,
		SPELL_SOULDRINKER,
		SPELL_SUMMON_WISP,
		SPELL_DARK_GRASP,
		SPELL_GLAMOUR,
		SPELL_TRAVELERS_BOON,
		SPELL_BLIND,
		SPELL_DARKFIRE_BOLT,
		SPELL_LIFEDRAIN,
		SPELL_LEVITATE,
		SPELL_MISTFORM,
		SPELL_FEAR,
		SPELL_FLAME_BLAST,
		SPELL_FLIGHT,
		SPELL_WING_BUFFET,
		SPELL_SHOOT_CANNON_BALL,
		SPELL_SHOOT_DRAGON;

	extern std::vector<int64_t> SPELLS_ALL;
	extern std::map<int64_t, std::string> ENUM_TO_STRING_SPELLS;
	extern std::map<std::string, int64_t> STRING_TO_ENUM_SPELLS;

	bool checkSpellsValidity(int64_t value);

	extern void makeEnumSpells_6();
	extern void makeEnumSpells_7();
	extern void makeEnumSpells_8();

}